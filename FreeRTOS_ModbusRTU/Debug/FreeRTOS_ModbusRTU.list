
FreeRTOS_ModbusRTU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ab8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000048c  08008bc8  08008bc8  00009bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009054  08009054  0000b0e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009054  08009054  0000b0e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009054  08009054  0000b0e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009054  08009054  0000a054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009058  08009058  0000a058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800905c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       000000d0  20000010  0800906c  0000b010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000032e4  200000e0  0800913c  0000b0e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200033c4  0800913c  0000b3c4  2**0
                  ALLOC
 12 .ARM.attributes 00000029  00000000  00000000  0000b0e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019cea  00000000  00000000  0000b109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040f5  00000000  00000000  00024df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001540  00000000  00000000  00028ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001070  00000000  00000000  0002a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b483  00000000  00000000  0002b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f2d7  00000000  00000000  0004691b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094078  00000000  00000000  00065bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f9c6a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005620  00000000  00000000  000f9cb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  000ff2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000e0 	.word	0x200000e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08008bb0 	.word	0x08008bb0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000e4 	.word	0x200000e4
 800014c:	08008bb0 	.word	0x08008bb0

08000150 <LoadInit>:
 *
 * 电缸通讯初始化
 *
 *--------------------------------------------------------*/
void LoadInit(void)
{
 8000150:	b480      	push	{r7}
 8000152:	af00      	add	r7, sp, #0
	loadStr.recCnt = 0x00;
 8000154:	4b04      	ldr	r3, [pc, #16]	@ (8000168 <LoadInit+0x18>)
 8000156:	2200      	movs	r2, #0
 8000158:	745a      	strb	r2, [r3, #17]
	loadStr.recFrameFlag = 0x00;
 800015a:	4b03      	ldr	r3, [pc, #12]	@ (8000168 <LoadInit+0x18>)
 800015c:	2200      	movs	r2, #0
 800015e:	749a      	strb	r2, [r3, #18]
}
 8000160:	bf00      	nop
 8000162:	46bd      	mov	sp, r7
 8000164:	bc80      	pop	{r7}
 8000166:	4770      	bx	lr
 8000168:	200000fc 	.word	0x200000fc

0800016c <LoadStatusInit>:
 * 目标速度 0x0035
 * 目标位置 0x0034
 *
 *--------------------------------------------------------*/
void LoadStatusInit(void)
{
 800016c:	b580      	push	{r7, lr}
 800016e:	b088      	sub	sp, #32
 8000170:	af00      	add	r7, sp, #0
	uint8_t load_slave_id = 0;
 8000172:	2300      	movs	r3, #0
 8000174:	77fb      	strb	r3, [r7, #31]

	// 目标电流
	for (load_slave_id = 0; load_slave_id < LOAD_SLAVE_NUM; load_slave_id++){
 8000176:	2300      	movs	r3, #0
 8000178:	77fb      	strb	r3, [r7, #31]
 800017a:	e01d      	b.n	80001b8 <LoadStatusInit+0x4c>
		uint8_t send_data[8] = {load_slave_id + 1, 0x06, 0x00, 0x36, 0x03, 0x20,};
 800017c:	f107 0314 	add.w	r3, r7, #20
 8000180:	2200      	movs	r2, #0
 8000182:	601a      	str	r2, [r3, #0]
 8000184:	605a      	str	r2, [r3, #4]
 8000186:	7ffb      	ldrb	r3, [r7, #31]
 8000188:	3301      	adds	r3, #1
 800018a:	b2db      	uxtb	r3, r3
 800018c:	753b      	strb	r3, [r7, #20]
 800018e:	2306      	movs	r3, #6
 8000190:	757b      	strb	r3, [r7, #21]
 8000192:	2336      	movs	r3, #54	@ 0x36
 8000194:	75fb      	strb	r3, [r7, #23]
 8000196:	2303      	movs	r3, #3
 8000198:	763b      	strb	r3, [r7, #24]
 800019a:	2320      	movs	r3, #32
 800019c:	767b      	strb	r3, [r7, #25]
		SendModbusFrame(&huart3, send_data, 8);
 800019e:	f107 0314 	add.w	r3, r7, #20
 80001a2:	2208      	movs	r2, #8
 80001a4:	4619      	mov	r1, r3
 80001a6:	482b      	ldr	r0, [pc, #172]	@ (8000254 <LoadStatusInit+0xe8>)
 80001a8:	f000 fe60 	bl	8000e6c <SendModbusFrame>
		osDelay(5);	// 刚上电，不阻塞
 80001ac:	2005      	movs	r0, #5
 80001ae:	f005 fb2f 	bl	8005810 <osDelay>
	for (load_slave_id = 0; load_slave_id < LOAD_SLAVE_NUM; load_slave_id++){
 80001b2:	7ffb      	ldrb	r3, [r7, #31]
 80001b4:	3301      	adds	r3, #1
 80001b6:	77fb      	strb	r3, [r7, #31]
 80001b8:	7ffb      	ldrb	r3, [r7, #31]
 80001ba:	2b03      	cmp	r3, #3
 80001bc:	d9de      	bls.n	800017c <LoadStatusInit+0x10>
	}

	// 目标速度
	for (load_slave_id = 0; load_slave_id < LOAD_SLAVE_NUM; load_slave_id++){
 80001be:	2300      	movs	r3, #0
 80001c0:	77fb      	strb	r3, [r7, #31]
 80001c2:	e01d      	b.n	8000200 <LoadStatusInit+0x94>
		uint8_t send_data[8] = {load_slave_id + 1, 0x06, 0x00, 0x35, 0x03, 0xFF,};
 80001c4:	f107 030c 	add.w	r3, r7, #12
 80001c8:	2200      	movs	r2, #0
 80001ca:	601a      	str	r2, [r3, #0]
 80001cc:	605a      	str	r2, [r3, #4]
 80001ce:	7ffb      	ldrb	r3, [r7, #31]
 80001d0:	3301      	adds	r3, #1
 80001d2:	b2db      	uxtb	r3, r3
 80001d4:	733b      	strb	r3, [r7, #12]
 80001d6:	2306      	movs	r3, #6
 80001d8:	737b      	strb	r3, [r7, #13]
 80001da:	2335      	movs	r3, #53	@ 0x35
 80001dc:	73fb      	strb	r3, [r7, #15]
 80001de:	2303      	movs	r3, #3
 80001e0:	743b      	strb	r3, [r7, #16]
 80001e2:	23ff      	movs	r3, #255	@ 0xff
 80001e4:	747b      	strb	r3, [r7, #17]
		SendModbusFrame(&huart3, send_data, 8);
 80001e6:	f107 030c 	add.w	r3, r7, #12
 80001ea:	2208      	movs	r2, #8
 80001ec:	4619      	mov	r1, r3
 80001ee:	4819      	ldr	r0, [pc, #100]	@ (8000254 <LoadStatusInit+0xe8>)
 80001f0:	f000 fe3c 	bl	8000e6c <SendModbusFrame>
		osDelay(5);	// 刚上电，不阻塞
 80001f4:	2005      	movs	r0, #5
 80001f6:	f005 fb0b 	bl	8005810 <osDelay>
	for (load_slave_id = 0; load_slave_id < LOAD_SLAVE_NUM; load_slave_id++){
 80001fa:	7ffb      	ldrb	r3, [r7, #31]
 80001fc:	3301      	adds	r3, #1
 80001fe:	77fb      	strb	r3, [r7, #31]
 8000200:	7ffb      	ldrb	r3, [r7, #31]
 8000202:	2b03      	cmp	r3, #3
 8000204:	d9de      	bls.n	80001c4 <LoadStatusInit+0x58>
	}

	// 目标位置
	for (load_slave_id = 0; load_slave_id < LOAD_SLAVE_NUM; load_slave_id++){
 8000206:	2300      	movs	r3, #0
 8000208:	77fb      	strb	r3, [r7, #31]
 800020a:	e01b      	b.n	8000244 <LoadStatusInit+0xd8>
		uint8_t send_data[8] = {load_slave_id + 1, 0x06, 0x00, 0x34, 0x03, 0xE8,};
 800020c:	1d3b      	adds	r3, r7, #4
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
 8000212:	605a      	str	r2, [r3, #4]
 8000214:	7ffb      	ldrb	r3, [r7, #31]
 8000216:	3301      	adds	r3, #1
 8000218:	b2db      	uxtb	r3, r3
 800021a:	713b      	strb	r3, [r7, #4]
 800021c:	2306      	movs	r3, #6
 800021e:	717b      	strb	r3, [r7, #5]
 8000220:	2334      	movs	r3, #52	@ 0x34
 8000222:	71fb      	strb	r3, [r7, #7]
 8000224:	2303      	movs	r3, #3
 8000226:	723b      	strb	r3, [r7, #8]
 8000228:	23e8      	movs	r3, #232	@ 0xe8
 800022a:	727b      	strb	r3, [r7, #9]
		SendModbusFrame(&huart3, send_data, 8);
 800022c:	1d3b      	adds	r3, r7, #4
 800022e:	2208      	movs	r2, #8
 8000230:	4619      	mov	r1, r3
 8000232:	4808      	ldr	r0, [pc, #32]	@ (8000254 <LoadStatusInit+0xe8>)
 8000234:	f000 fe1a 	bl	8000e6c <SendModbusFrame>
		osDelay(5);	// 刚上电，不阻塞
 8000238:	2005      	movs	r0, #5
 800023a:	f005 fae9 	bl	8005810 <osDelay>
	for (load_slave_id = 0; load_slave_id < LOAD_SLAVE_NUM; load_slave_id++){
 800023e:	7ffb      	ldrb	r3, [r7, #31]
 8000240:	3301      	adds	r3, #1
 8000242:	77fb      	strb	r3, [r7, #31]
 8000244:	7ffb      	ldrb	r3, [r7, #31]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d9e0      	bls.n	800020c <LoadStatusInit+0xa0>
	}
}
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	3720      	adds	r7, #32
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}
 8000254:	20000498 	.word	0x20000498

08000258 <ProcessData_RecvFromLoad>:
 *
 * 单片机处理来自读电缸的响应数据
 *
 *--------------------------------------------------------*/
void ProcessData_RecvFromLoad(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
	if (loadStr.RecvBuff[1] == 0x03) {
 800025e:	4b4e      	ldr	r3, [pc, #312]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000260:	789b      	ldrb	r3, [r3, #2]
 8000262:	2b03      	cmp	r3, #3
 8000264:	f040 808a 	bne.w	800037c <ProcessData_RecvFromLoad+0x124>
		uint16_t nFarCRC = 0x0000;
 8000268:	2300      	movs	r3, #0
 800026a:	80fb      	strh	r3, [r7, #6]

		loadStr.localCRCValue = CRCCalc(loadStr.RecvBuff, loadStr.recCnt - 2);
 800026c:	4b4a      	ldr	r3, [pc, #296]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800026e:	7c5b      	ldrb	r3, [r3, #17]
 8000270:	3b02      	subs	r3, #2
 8000272:	b29b      	uxth	r3, r3
 8000274:	4619      	mov	r1, r3
 8000276:	4849      	ldr	r0, [pc, #292]	@ (800039c <ProcessData_RecvFromLoad+0x144>)
 8000278:	f000 fdd2 	bl	8000e20 <CRCCalc>
 800027c:	4603      	mov	r3, r0
 800027e:	461a      	mov	r2, r3
 8000280:	4b45      	ldr	r3, [pc, #276]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000282:	829a      	strh	r2, [r3, #20]
		nFarCRC = loadStr.RecvBuff[loadStr.recCnt - 2] + (loadStr.RecvBuff[loadStr.recCnt - 1 ] << 8);
 8000284:	4b44      	ldr	r3, [pc, #272]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000286:	7c5b      	ldrb	r3, [r3, #17]
 8000288:	3b02      	subs	r3, #2
 800028a:	4a43      	ldr	r2, [pc, #268]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800028c:	4413      	add	r3, r2
 800028e:	785b      	ldrb	r3, [r3, #1]
 8000290:	4619      	mov	r1, r3
 8000292:	4b41      	ldr	r3, [pc, #260]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000294:	7c5b      	ldrb	r3, [r3, #17]
 8000296:	3b01      	subs	r3, #1
 8000298:	4a3f      	ldr	r2, [pc, #252]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800029a:	4413      	add	r3, r2
 800029c:	785b      	ldrb	r3, [r3, #1]
 800029e:	021b      	lsls	r3, r3, #8
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	440b      	add	r3, r1
 80002a4:	80fb      	strh	r3, [r7, #6]

		if (nFarCRC == loadStr.localCRCValue) {
 80002a6:	4b3c      	ldr	r3, [pc, #240]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 80002a8:	8a9b      	ldrh	r3, [r3, #20]
 80002aa:	88fa      	ldrh	r2, [r7, #6]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d165      	bne.n	800037c <ProcessData_RecvFromLoad+0x124>
			uint8_t slaveId = 0x00;		// 从机地址
 80002b0:	2300      	movs	r3, #0
 80002b2:	717b      	strb	r3, [r7, #5]

			if (slaveId == 0x01) {
 80002b4:	797b      	ldrb	r3, [r7, #5]
 80002b6:	2b01      	cmp	r3, #1
 80002b8:	d115      	bne.n	80002e6 <ProcessData_RecvFromLoad+0x8e>
				slaveStr.ReadRegsGroup[5] = (loadStr.RecvBuff[5] << 8) + loadStr.RecvBuff[6];	// 电缸反馈电流
 80002ba:	4b37      	ldr	r3, [pc, #220]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 80002bc:	799b      	ldrb	r3, [r3, #6]
 80002be:	021b      	lsls	r3, r3, #8
 80002c0:	b29b      	uxth	r3, r3
 80002c2:	4a35      	ldr	r2, [pc, #212]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 80002c4:	79d2      	ldrb	r2, [r2, #7]
 80002c6:	4413      	add	r3, r2
 80002c8:	b29a      	uxth	r2, r3
 80002ca:	4b35      	ldr	r3, [pc, #212]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 80002cc:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112
				slaveStr.ReadRegsGroup[6] = (loadStr.RecvBuff[3] << 8) + loadStr.RecvBuff[4];	// 电缸实际位置
 80002d0:	4b31      	ldr	r3, [pc, #196]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 80002d2:	791b      	ldrb	r3, [r3, #4]
 80002d4:	021b      	lsls	r3, r3, #8
 80002d6:	b29b      	uxth	r3, r3
 80002d8:	4a2f      	ldr	r2, [pc, #188]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 80002da:	7952      	ldrb	r2, [r2, #5]
 80002dc:	4413      	add	r3, r2
 80002de:	b29a      	uxth	r2, r3
 80002e0:	4b2f      	ldr	r3, [pc, #188]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 80002e2:	f8a3 2114 	strh.w	r2, [r3, #276]	@ 0x114
			}
			if (slaveId == 0x02) {
 80002e6:	797b      	ldrb	r3, [r7, #5]
 80002e8:	2b02      	cmp	r3, #2
 80002ea:	d115      	bne.n	8000318 <ProcessData_RecvFromLoad+0xc0>
				slaveStr.ReadRegsGroup[15] = (loadStr.RecvBuff[5] << 8) + loadStr.RecvBuff[6];	// 电缸反馈电流
 80002ec:	4b2a      	ldr	r3, [pc, #168]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 80002ee:	799b      	ldrb	r3, [r3, #6]
 80002f0:	021b      	lsls	r3, r3, #8
 80002f2:	b29b      	uxth	r3, r3
 80002f4:	4a28      	ldr	r2, [pc, #160]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 80002f6:	79d2      	ldrb	r2, [r2, #7]
 80002f8:	4413      	add	r3, r2
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b28      	ldr	r3, [pc, #160]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 80002fe:	f8a3 2126 	strh.w	r2, [r3, #294]	@ 0x126
				slaveStr.ReadRegsGroup[16] = (loadStr.RecvBuff[3] << 8) + loadStr.RecvBuff[4];	// 电缸实际位置
 8000302:	4b25      	ldr	r3, [pc, #148]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000304:	791b      	ldrb	r3, [r3, #4]
 8000306:	021b      	lsls	r3, r3, #8
 8000308:	b29b      	uxth	r3, r3
 800030a:	4a23      	ldr	r2, [pc, #140]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800030c:	7952      	ldrb	r2, [r2, #5]
 800030e:	4413      	add	r3, r2
 8000310:	b29a      	uxth	r2, r3
 8000312:	4b23      	ldr	r3, [pc, #140]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 8000314:	f8a3 2128 	strh.w	r2, [r3, #296]	@ 0x128
			}
			if (slaveId == 0x03) {
 8000318:	797b      	ldrb	r3, [r7, #5]
 800031a:	2b03      	cmp	r3, #3
 800031c:	d115      	bne.n	800034a <ProcessData_RecvFromLoad+0xf2>
				slaveStr.ReadRegsGroup[25] = (loadStr.RecvBuff[5] << 8) + loadStr.RecvBuff[6];	// 电缸反馈电流
 800031e:	4b1e      	ldr	r3, [pc, #120]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000320:	799b      	ldrb	r3, [r3, #6]
 8000322:	021b      	lsls	r3, r3, #8
 8000324:	b29b      	uxth	r3, r3
 8000326:	4a1c      	ldr	r2, [pc, #112]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000328:	79d2      	ldrb	r2, [r2, #7]
 800032a:	4413      	add	r3, r2
 800032c:	b29a      	uxth	r2, r3
 800032e:	4b1c      	ldr	r3, [pc, #112]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 8000330:	f8a3 213a 	strh.w	r2, [r3, #314]	@ 0x13a
				slaveStr.ReadRegsGroup[26] = (loadStr.RecvBuff[3] << 8) + loadStr.RecvBuff[4];	// 电缸实际位置
 8000334:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000336:	791b      	ldrb	r3, [r3, #4]
 8000338:	021b      	lsls	r3, r3, #8
 800033a:	b29b      	uxth	r3, r3
 800033c:	4a16      	ldr	r2, [pc, #88]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800033e:	7952      	ldrb	r2, [r2, #5]
 8000340:	4413      	add	r3, r2
 8000342:	b29a      	uxth	r2, r3
 8000344:	4b16      	ldr	r3, [pc, #88]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 8000346:	f8a3 213c 	strh.w	r2, [r3, #316]	@ 0x13c
			}
			if (slaveId == 0x04) {
 800034a:	797b      	ldrb	r3, [r7, #5]
 800034c:	2b04      	cmp	r3, #4
 800034e:	d115      	bne.n	800037c <ProcessData_RecvFromLoad+0x124>
				slaveStr.ReadRegsGroup[35] = (loadStr.RecvBuff[5] << 8) + loadStr.RecvBuff[6];	// 电缸反馈电流
 8000350:	4b11      	ldr	r3, [pc, #68]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000352:	799b      	ldrb	r3, [r3, #6]
 8000354:	021b      	lsls	r3, r3, #8
 8000356:	b29b      	uxth	r3, r3
 8000358:	4a0f      	ldr	r2, [pc, #60]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800035a:	79d2      	ldrb	r2, [r2, #7]
 800035c:	4413      	add	r3, r2
 800035e:	b29a      	uxth	r2, r3
 8000360:	4b0f      	ldr	r3, [pc, #60]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 8000362:	f8a3 214e 	strh.w	r2, [r3, #334]	@ 0x14e
				slaveStr.ReadRegsGroup[36] = (loadStr.RecvBuff[3] << 8) + loadStr.RecvBuff[4];	// 电缸实际位置
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	021b      	lsls	r3, r3, #8
 800036c:	b29b      	uxth	r3, r3
 800036e:	4a0a      	ldr	r2, [pc, #40]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000370:	7952      	ldrb	r2, [r2, #5]
 8000372:	4413      	add	r3, r2
 8000374:	b29a      	uxth	r2, r3
 8000376:	4b0a      	ldr	r3, [pc, #40]	@ (80003a0 <ProcessData_RecvFromLoad+0x148>)
 8000378:	f8a3 2150 	strh.w	r2, [r3, #336]	@ 0x150
			}
		} // CRC校验未通过的也不管
	} // 如果不是读的就不用管
	// 处理完这一帧，参数复位
	loadStr.recCnt = 0x00;
 800037c:	4b06      	ldr	r3, [pc, #24]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800037e:	2200      	movs	r2, #0
 8000380:	745a      	strb	r2, [r3, #17]
	loadStr.recFrameFlag = 0x00;
 8000382:	4b05      	ldr	r3, [pc, #20]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 8000384:	2200      	movs	r2, #0
 8000386:	749a      	strb	r2, [r3, #18]
	loadStr.localCRCValue = 0x0000;
 8000388:	4b03      	ldr	r3, [pc, #12]	@ (8000398 <ProcessData_RecvFromLoad+0x140>)
 800038a:	2200      	movs	r2, #0
 800038c:	829a      	strh	r2, [r3, #20]
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200000fc 	.word	0x200000fc
 800039c:	200000fd 	.word	0x200000fd
 80003a0:	20000160 	.word	0x20000160

080003a4 <ProcessData_TransToLoad>:
 *
 * 单片机控制电缸的就位与复位
 *
 *--------------------------------------------------------*/
void ProcessData_TransToLoad(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b092      	sub	sp, #72	@ 0x48
 80003a8:	af02      	add	r7, sp, #8
	switch (REC_CTRL_ARRAY_IDX) {
 80003aa:	4bb5      	ldr	r3, [pc, #724]	@ (8000680 <ProcessData_TransToLoad+0x2dc>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	3b05      	subs	r3, #5
 80003b0:	2b1f      	cmp	r3, #31
 80003b2:	f200 8161 	bhi.w	8000678 <ProcessData_TransToLoad+0x2d4>
 80003b6:	a201      	add	r2, pc, #4	@ (adr r2, 80003bc <ProcessData_TransToLoad+0x18>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	0800043d 	.word	0x0800043d
 80003c0:	08000483 	.word	0x08000483
 80003c4:	08000679 	.word	0x08000679
 80003c8:	08000679 	.word	0x08000679
 80003cc:	08000679 	.word	0x08000679
 80003d0:	08000679 	.word	0x08000679
 80003d4:	08000679 	.word	0x08000679
 80003d8:	08000679 	.word	0x08000679
 80003dc:	08000679 	.word	0x08000679
 80003e0:	08000679 	.word	0x08000679
 80003e4:	080004c9 	.word	0x080004c9
 80003e8:	0800050f 	.word	0x0800050f
 80003ec:	08000679 	.word	0x08000679
 80003f0:	08000679 	.word	0x08000679
 80003f4:	08000679 	.word	0x08000679
 80003f8:	08000679 	.word	0x08000679
 80003fc:	08000679 	.word	0x08000679
 8000400:	08000679 	.word	0x08000679
 8000404:	08000679 	.word	0x08000679
 8000408:	08000679 	.word	0x08000679
 800040c:	08000555 	.word	0x08000555
 8000410:	08000599 	.word	0x08000599
 8000414:	08000679 	.word	0x08000679
 8000418:	08000679 	.word	0x08000679
 800041c:	08000679 	.word	0x08000679
 8000420:	08000679 	.word	0x08000679
 8000424:	08000679 	.word	0x08000679
 8000428:	08000679 	.word	0x08000679
 800042c:	08000679 	.word	0x08000679
 8000430:	08000679 	.word	0x08000679
 8000434:	080005db 	.word	0x080005db
 8000438:	0800061d 	.word	0x0800061d
	case 5:
		// 就位，电缸丝杆伸出到3000位置
		if (1 == slaveStr.WriteRegsGroup[5]) {
 800043c:	4b91      	ldr	r3, [pc, #580]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 800043e:	f8b3 3162 	ldrh.w	r3, [r3, #354]	@ 0x162
 8000442:	2b01      	cmp	r3, #1
 8000444:	f040 8109 	bne.w	800065a <ProcessData_TransToLoad+0x2b6>
			uint8_t send_data[8] = {0x01, 0x06, 0x00, 0x34, 0x0B, 0x8B,};
 8000448:	4a8f      	ldr	r2, [pc, #572]	@ (8000688 <ProcessData_TransToLoad+0x2e4>)
 800044a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800044e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000452:	6018      	str	r0, [r3, #0]
 8000454:	3304      	adds	r3, #4
 8000456:	8019      	strh	r1, [r3, #0]
 8000458:	3302      	adds	r3, #2
 800045a:	0c0a      	lsrs	r2, r1, #16
 800045c:	701a      	strb	r2, [r3, #0]
 800045e:	2300      	movs	r3, #0
 8000460:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 8000464:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000468:	2314      	movs	r3, #20
 800046a:	9300      	str	r3, [sp, #0]
 800046c:	f04f 33ff 	mov.w	r3, #4294967295
 8000470:	2208      	movs	r2, #8
 8000472:	4886      	ldr	r0, [pc, #536]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 8000474:	f000 fd26 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[5] = 0; 	// 避免重复写
 8000478:	4b82      	ldr	r3, [pc, #520]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 800047a:	2200      	movs	r2, #0
 800047c:	f8a3 2162 	strh.w	r2, [r3, #354]	@ 0x162
		}
		break;
 8000480:	e0eb      	b.n	800065a <ProcessData_TransToLoad+0x2b6>

	case 6:
		// 电缸丝杆复位到1000位置
		if (1 == slaveStr.WriteRegsGroup[6]){
 8000482:	4b80      	ldr	r3, [pc, #512]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 8000484:	f8b3 3164 	ldrh.w	r3, [r3, #356]	@ 0x164
 8000488:	2b01      	cmp	r3, #1
 800048a:	f040 80e8 	bne.w	800065e <ProcessData_TransToLoad+0x2ba>
			uint8_t send_data[8] = {0x01, 0x06, 0x00, 0x34, 0x03, 0xE8,};
 800048e:	4a80      	ldr	r2, [pc, #512]	@ (8000690 <ProcessData_TransToLoad+0x2ec>)
 8000490:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000494:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000498:	6018      	str	r0, [r3, #0]
 800049a:	3304      	adds	r3, #4
 800049c:	8019      	strh	r1, [r3, #0]
 800049e:	3302      	adds	r3, #2
 80004a0:	0c0a      	lsrs	r2, r1, #16
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	2300      	movs	r3, #0
 80004a6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 80004aa:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80004ae:	2314      	movs	r3, #20
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	f04f 33ff 	mov.w	r3, #4294967295
 80004b6:	2208      	movs	r2, #8
 80004b8:	4874      	ldr	r0, [pc, #464]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 80004ba:	f000 fd03 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[6] = 0; 	// 避免重复写
 80004be:	4b71      	ldr	r3, [pc, #452]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
		}
		break;
 80004c6:	e0ca      	b.n	800065e <ProcessData_TransToLoad+0x2ba>

	case 15:
		// 就位，电缸丝杆伸出到3000位置
		if (1 == slaveStr.WriteRegsGroup[15]) {
 80004c8:	4b6e      	ldr	r3, [pc, #440]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 80004ca:	f8b3 3176 	ldrh.w	r3, [r3, #374]	@ 0x176
 80004ce:	2b01      	cmp	r3, #1
 80004d0:	f040 80c7 	bne.w	8000662 <ProcessData_TransToLoad+0x2be>
			uint8_t send_data[8] = {0x02, 0x06, 0x00, 0x34, 0x0B, 0x8B,};
 80004d4:	4a6f      	ldr	r2, [pc, #444]	@ (8000694 <ProcessData_TransToLoad+0x2f0>)
 80004d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004de:	6018      	str	r0, [r3, #0]
 80004e0:	3304      	adds	r3, #4
 80004e2:	8019      	strh	r1, [r3, #0]
 80004e4:	3302      	adds	r3, #2
 80004e6:	0c0a      	lsrs	r2, r1, #16
 80004e8:	701a      	strb	r2, [r3, #0]
 80004ea:	2300      	movs	r3, #0
 80004ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 80004f0:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80004f4:	2314      	movs	r3, #20
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	f04f 33ff 	mov.w	r3, #4294967295
 80004fc:	2208      	movs	r2, #8
 80004fe:	4863      	ldr	r0, [pc, #396]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 8000500:	f000 fce0 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[15] = 0; 	// 避免重复写
 8000504:	4b5f      	ldr	r3, [pc, #380]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 8000506:	2200      	movs	r2, #0
 8000508:	f8a3 2176 	strh.w	r2, [r3, #374]	@ 0x176
		}
		break;
 800050c:	e0a9      	b.n	8000662 <ProcessData_TransToLoad+0x2be>

	case 16:
		// 电缸丝杆复位到1000位置
		if (1 == slaveStr.WriteRegsGroup[16]){
 800050e:	4b5d      	ldr	r3, [pc, #372]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 8000510:	f8b3 3178 	ldrh.w	r3, [r3, #376]	@ 0x178
 8000514:	2b01      	cmp	r3, #1
 8000516:	f040 80a6 	bne.w	8000666 <ProcessData_TransToLoad+0x2c2>
			uint8_t send_data[8] = {0x02, 0x06, 0x00, 0x34, 0x03, 0xE8,};
 800051a:	4a5f      	ldr	r2, [pc, #380]	@ (8000698 <ProcessData_TransToLoad+0x2f4>)
 800051c:	f107 0320 	add.w	r3, r7, #32
 8000520:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000524:	6018      	str	r0, [r3, #0]
 8000526:	3304      	adds	r3, #4
 8000528:	8019      	strh	r1, [r3, #0]
 800052a:	3302      	adds	r3, #2
 800052c:	0c0a      	lsrs	r2, r1, #16
 800052e:	701a      	strb	r2, [r3, #0]
 8000530:	2300      	movs	r3, #0
 8000532:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 8000536:	f107 0120 	add.w	r1, r7, #32
 800053a:	2314      	movs	r3, #20
 800053c:	9300      	str	r3, [sp, #0]
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	2208      	movs	r2, #8
 8000544:	4851      	ldr	r0, [pc, #324]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 8000546:	f000 fcbd 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[16] = 0; 	// 避免重复写
 800054a:	4b4e      	ldr	r3, [pc, #312]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 800054c:	2200      	movs	r2, #0
 800054e:	f8a3 2178 	strh.w	r2, [r3, #376]	@ 0x178
		}
		break;
 8000552:	e088      	b.n	8000666 <ProcessData_TransToLoad+0x2c2>

	case 25:
		// 就位，电缸丝杆伸出到3000位置
		if (1 == slaveStr.WriteRegsGroup[25]) {
 8000554:	4b4b      	ldr	r3, [pc, #300]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 8000556:	f8b3 318a 	ldrh.w	r3, [r3, #394]	@ 0x18a
 800055a:	2b01      	cmp	r3, #1
 800055c:	f040 8085 	bne.w	800066a <ProcessData_TransToLoad+0x2c6>
			uint8_t send_data[8] = {0x03, 0x06, 0x00, 0x34, 0x0B, 0x8B,};
 8000560:	4a4e      	ldr	r2, [pc, #312]	@ (800069c <ProcessData_TransToLoad+0x2f8>)
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	e892 0003 	ldmia.w	r2, {r0, r1}
 800056a:	6018      	str	r0, [r3, #0]
 800056c:	3304      	adds	r3, #4
 800056e:	8019      	strh	r1, [r3, #0]
 8000570:	3302      	adds	r3, #2
 8000572:	0c0a      	lsrs	r2, r1, #16
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	2300      	movs	r3, #0
 8000578:	77fb      	strb	r3, [r7, #31]
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 800057a:	f107 0118 	add.w	r1, r7, #24
 800057e:	2314      	movs	r3, #20
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
 8000586:	2208      	movs	r2, #8
 8000588:	4840      	ldr	r0, [pc, #256]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 800058a:	f000 fc9b 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[25] = 0; 	// 避免重复写
 800058e:	4b3d      	ldr	r3, [pc, #244]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 8000590:	2200      	movs	r2, #0
 8000592:	f8a3 218a 	strh.w	r2, [r3, #394]	@ 0x18a
		}
		break;
 8000596:	e068      	b.n	800066a <ProcessData_TransToLoad+0x2c6>

	case 26:
		// 电缸丝杆复位到1000位置
		if (1 == slaveStr.WriteRegsGroup[26]){
 8000598:	4b3a      	ldr	r3, [pc, #232]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 800059a:	f8b3 318c 	ldrh.w	r3, [r3, #396]	@ 0x18c
 800059e:	2b01      	cmp	r3, #1
 80005a0:	d165      	bne.n	800066e <ProcessData_TransToLoad+0x2ca>
			uint8_t send_data[8] = {0x03, 0x06, 0x00, 0x34, 0x03, 0xE8,};
 80005a2:	4a3f      	ldr	r2, [pc, #252]	@ (80006a0 <ProcessData_TransToLoad+0x2fc>)
 80005a4:	f107 0310 	add.w	r3, r7, #16
 80005a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ac:	6018      	str	r0, [r3, #0]
 80005ae:	3304      	adds	r3, #4
 80005b0:	8019      	strh	r1, [r3, #0]
 80005b2:	3302      	adds	r3, #2
 80005b4:	0c0a      	lsrs	r2, r1, #16
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	75fb      	strb	r3, [r7, #23]
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 80005bc:	f107 0110 	add.w	r1, r7, #16
 80005c0:	2314      	movs	r3, #20
 80005c2:	9300      	str	r3, [sp, #0]
 80005c4:	f04f 33ff 	mov.w	r3, #4294967295
 80005c8:	2208      	movs	r2, #8
 80005ca:	4830      	ldr	r0, [pc, #192]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 80005cc:	f000 fc7a 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[26] = 0; 	// 避免重复写
 80005d0:	4b2c      	ldr	r3, [pc, #176]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	f8a3 218c 	strh.w	r2, [r3, #396]	@ 0x18c
		}
		break;
 80005d8:	e049      	b.n	800066e <ProcessData_TransToLoad+0x2ca>

	case 35:
		// 就位，电缸丝杆伸出到3000位置
		if (1 == slaveStr.WriteRegsGroup[35]) {
 80005da:	4b2a      	ldr	r3, [pc, #168]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 80005dc:	f8b3 319e 	ldrh.w	r3, [r3, #414]	@ 0x19e
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d146      	bne.n	8000672 <ProcessData_TransToLoad+0x2ce>
			uint8_t send_data[8] = {0x04, 0x06, 0x00, 0x34, 0x0B, 0x8B,};
 80005e4:	4a2f      	ldr	r2, [pc, #188]	@ (80006a4 <ProcessData_TransToLoad+0x300>)
 80005e6:	f107 0308 	add.w	r3, r7, #8
 80005ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ee:	6018      	str	r0, [r3, #0]
 80005f0:	3304      	adds	r3, #4
 80005f2:	8019      	strh	r1, [r3, #0]
 80005f4:	3302      	adds	r3, #2
 80005f6:	0c0a      	lsrs	r2, r1, #16
 80005f8:	701a      	strb	r2, [r3, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	73fb      	strb	r3, [r7, #15]
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 80005fe:	f107 0108 	add.w	r1, r7, #8
 8000602:	2314      	movs	r3, #20
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	2208      	movs	r2, #8
 800060c:	481f      	ldr	r0, [pc, #124]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 800060e:	f000 fc59 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[35] = 0; 	// 避免重复写
 8000612:	4b1c      	ldr	r3, [pc, #112]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 8000614:	2200      	movs	r2, #0
 8000616:	f8a3 219e 	strh.w	r2, [r3, #414]	@ 0x19e
		}
		break;
 800061a:	e02a      	b.n	8000672 <ProcessData_TransToLoad+0x2ce>

	case 36:
		// 电缸丝杆复位到1000位置
		if (1 == slaveStr.WriteRegsGroup[36]){
 800061c:	4b19      	ldr	r3, [pc, #100]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 800061e:	f8b3 31a0 	ldrh.w	r3, [r3, #416]	@ 0x1a0
 8000622:	2b01      	cmp	r3, #1
 8000624:	d127      	bne.n	8000676 <ProcessData_TransToLoad+0x2d2>
			uint8_t send_data[8] = {0x04, 0x06, 0x00, 0x34, 0x03, 0xE8,};
 8000626:	4a20      	ldr	r2, [pc, #128]	@ (80006a8 <ProcessData_TransToLoad+0x304>)
 8000628:	463b      	mov	r3, r7
 800062a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062e:	6018      	str	r0, [r3, #0]
 8000630:	3304      	adds	r3, #4
 8000632:	8019      	strh	r1, [r3, #0]
 8000634:	3302      	adds	r3, #2
 8000636:	0c0a      	lsrs	r2, r1, #16
 8000638:	701a      	strb	r2, [r3, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	71fb      	strb	r3, [r7, #7]
			UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 20);
 800063e:	4639      	mov	r1, r7
 8000640:	2314      	movs	r3, #20
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	2208      	movs	r2, #8
 800064a:	4810      	ldr	r0, [pc, #64]	@ (800068c <ProcessData_TransToLoad+0x2e8>)
 800064c:	f000 fc3a 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[36] = 0; 	// 避免重复写
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <ProcessData_TransToLoad+0x2e0>)
 8000652:	2200      	movs	r2, #0
 8000654:	f8a3 21a0 	strh.w	r2, [r3, #416]	@ 0x1a0
		}
		break;
 8000658:	e00d      	b.n	8000676 <ProcessData_TransToLoad+0x2d2>
		break;
 800065a:	bf00      	nop
 800065c:	e00c      	b.n	8000678 <ProcessData_TransToLoad+0x2d4>
		break;
 800065e:	bf00      	nop
 8000660:	e00a      	b.n	8000678 <ProcessData_TransToLoad+0x2d4>
		break;
 8000662:	bf00      	nop
 8000664:	e008      	b.n	8000678 <ProcessData_TransToLoad+0x2d4>
		break;
 8000666:	bf00      	nop
 8000668:	e006      	b.n	8000678 <ProcessData_TransToLoad+0x2d4>
		break;
 800066a:	bf00      	nop
 800066c:	e004      	b.n	8000678 <ProcessData_TransToLoad+0x2d4>
		break;
 800066e:	bf00      	nop
 8000670:	e002      	b.n	8000678 <ProcessData_TransToLoad+0x2d4>
		break;
 8000672:	bf00      	nop
 8000674:	e000      	b.n	8000678 <ProcessData_TransToLoad+0x2d4>
		break;
 8000676:	bf00      	nop
	}
}
 8000678:	bf00      	nop
 800067a:	3740      	adds	r7, #64	@ 0x40
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000030a 	.word	0x2000030a
 8000684:	20000160 	.word	0x20000160
 8000688:	08008bc8 	.word	0x08008bc8
 800068c:	20000498 	.word	0x20000498
 8000690:	08008bd0 	.word	0x08008bd0
 8000694:	08008bd8 	.word	0x08008bd8
 8000698:	08008be0 	.word	0x08008be0
 800069c:	08008be8 	.word	0x08008be8
 80006a0:	08008bf0 	.word	0x08008bf0
 80006a4:	08008bf8 	.word	0x08008bf8
 80006a8:	08008c00 	.word	0x08008c00

080006ac <MotorDriverInit>:
 *
 * 电机驱动器通讯初始化
 *
 *--------------------------------------------------------*/
void MotorDriverInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
	motorDriverStr.recCnt = 0x00;
 80006b0:	4b05      	ldr	r3, [pc, #20]	@ (80006c8 <MotorDriverInit+0x1c>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	motorDriverStr.recFrameFlag = 0x00;
 80006b8:	4b03      	ldr	r3, [pc, #12]	@ (80006c8 <MotorDriverInit+0x1c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000124 	.word	0x20000124

080006cc <ProcessData_RecvFromMotorDriver>:
 * 单片机做主站，只关心读数据
 * 处理收到来自电机驱动器的数据，赋值到维持的读寄存器数组，方便PLC读
 *
 *--------------------------------------------------------*/
void ProcessData_RecvFromMotorDriver(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
	if (motorDriverStr.RecvBuff[1] == 0x03) {
 80006d2:	4b6b      	ldr	r3, [pc, #428]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 80006d4:	789b      	ldrb	r3, [r3, #2]
 80006d6:	2b03      	cmp	r3, #3
 80006d8:	f040 80c2 	bne.w	8000860 <ProcessData_RecvFromMotorDriver+0x194>
		uint16_t nFarCRC = 0x0000;
 80006dc:	2300      	movs	r3, #0
 80006de:	807b      	strh	r3, [r7, #2]

		motorDriverStr.localCRCValue = CRCCalc(motorDriverStr.RecvBuff, motorDriverStr.recCnt - 2);
 80006e0:	4b67      	ldr	r3, [pc, #412]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 80006e2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80006e6:	3b02      	subs	r3, #2
 80006e8:	b29b      	uxth	r3, r3
 80006ea:	4619      	mov	r1, r3
 80006ec:	4865      	ldr	r0, [pc, #404]	@ (8000884 <ProcessData_RecvFromMotorDriver+0x1b8>)
 80006ee:	f000 fb97 	bl	8000e20 <CRCCalc>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b62      	ldr	r3, [pc, #392]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 80006f8:	849a      	strh	r2, [r3, #36]	@ 0x24
		nFarCRC = motorDriverStr.RecvBuff[motorDriverStr.recCnt - 2]
 80006fa:	4b61      	ldr	r3, [pc, #388]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 80006fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000700:	3b02      	subs	r3, #2
 8000702:	4a5f      	ldr	r2, [pc, #380]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000704:	4413      	add	r3, r2
 8000706:	785b      	ldrb	r3, [r3, #1]
 8000708:	4619      	mov	r1, r3
										  + (motorDriverStr.RecvBuff[motorDriverStr.recCnt -1] << 8);
 800070a:	4b5d      	ldr	r3, [pc, #372]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 800070c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000710:	3b01      	subs	r3, #1
 8000712:	4a5b      	ldr	r2, [pc, #364]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000714:	4413      	add	r3, r2
 8000716:	785b      	ldrb	r3, [r3, #1]
 8000718:	021b      	lsls	r3, r3, #8
 800071a:	b29b      	uxth	r3, r3
		nFarCRC = motorDriverStr.RecvBuff[motorDriverStr.recCnt - 2]
 800071c:	440b      	add	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
		if (nFarCRC == motorDriverStr.localCRCValue) {
 8000720:	4b57      	ldr	r3, [pc, #348]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000722:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000724:	887a      	ldrh	r2, [r7, #2]
 8000726:	429a      	cmp	r2, r3
 8000728:	f040 809a 	bne.w	8000860 <ProcessData_RecvFromMotorDriver+0x194>
			uint8_t slaveId = 0x00;
 800072c:	2300      	movs	r3, #0
 800072e:	707b      	strb	r3, [r7, #1]
			uint8_t nRegNum = 0x00;
 8000730:	2300      	movs	r3, #0
 8000732:	703b      	strb	r3, [r7, #0]

			slaveId = motorDriverStr.RecvBuff[0];		// 从机地址
 8000734:	4b52      	ldr	r3, [pc, #328]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000736:	785b      	ldrb	r3, [r3, #1]
 8000738:	707b      	strb	r3, [r7, #1]
			nRegNum = motorDriverStr.RecvBuff[2] / 2;	// 寄存器数量
 800073a:	4b51      	ldr	r3, [pc, #324]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 800073c:	78db      	ldrb	r3, [r3, #3]
 800073e:	085b      	lsrs	r3, r3, #1
 8000740:	703b      	strb	r3, [r7, #0]

			// 对号入座赋值
			if(slaveId == 0x01) {
 8000742:	787b      	ldrb	r3, [r7, #1]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d11f      	bne.n	8000788 <ProcessData_RecvFromMotorDriver+0xbc>
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 8000748:	2300      	movs	r3, #0
 800074a:	71fb      	strb	r3, [r7, #7]
 800074c:	e018      	b.n	8000780 <ProcessData_RecvFromMotorDriver+0xb4>
					slaveStr.ReadRegsGroup[0 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	005b      	lsls	r3, r3, #1
 8000752:	3303      	adds	r3, #3
 8000754:	4a4a      	ldr	r2, [pc, #296]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000756:	4413      	add	r3, r2
 8000758:	785b      	ldrb	r3, [r3, #1]
 800075a:	021b      	lsls	r3, r3, #8
 800075c:	b29a      	uxth	r2, r3
							+ motorDriverStr.RecvBuff[4 + idx*2];
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	3302      	adds	r3, #2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4946      	ldr	r1, [pc, #280]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000766:	440b      	add	r3, r1
 8000768:	785b      	ldrb	r3, [r3, #1]
 800076a:	4619      	mov	r1, r3
					slaveStr.ReadRegsGroup[0 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 800076c:	79fb      	ldrb	r3, [r7, #7]
							+ motorDriverStr.RecvBuff[4 + idx*2];
 800076e:	440a      	add	r2, r1
 8000770:	b291      	uxth	r1, r2
					slaveStr.ReadRegsGroup[0 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 8000772:	4a45      	ldr	r2, [pc, #276]	@ (8000888 <ProcessData_RecvFromMotorDriver+0x1bc>)
 8000774:	3384      	adds	r3, #132	@ 0x84
 8000776:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	3301      	adds	r3, #1
 800077e:	71fb      	strb	r3, [r7, #7]
 8000780:	79fa      	ldrb	r2, [r7, #7]
 8000782:	783b      	ldrb	r3, [r7, #0]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3e2      	bcc.n	800074e <ProcessData_RecvFromMotorDriver+0x82>
				}
			}
			if(slaveId == 0x02) {
 8000788:	787b      	ldrb	r3, [r7, #1]
 800078a:	2b02      	cmp	r3, #2
 800078c:	d120      	bne.n	80007d0 <ProcessData_RecvFromMotorDriver+0x104>
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 800078e:	2300      	movs	r3, #0
 8000790:	71bb      	strb	r3, [r7, #6]
 8000792:	e019      	b.n	80007c8 <ProcessData_RecvFromMotorDriver+0xfc>
					slaveStr.ReadRegsGroup[10 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 8000794:	79bb      	ldrb	r3, [r7, #6]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	3303      	adds	r3, #3
 800079a:	4a39      	ldr	r2, [pc, #228]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 800079c:	4413      	add	r3, r2
 800079e:	785b      	ldrb	r3, [r3, #1]
 80007a0:	021b      	lsls	r3, r3, #8
 80007a2:	b29a      	uxth	r2, r3
							+ motorDriverStr.RecvBuff[4 + idx*2];
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3302      	adds	r3, #2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4935      	ldr	r1, [pc, #212]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 80007ac:	440b      	add	r3, r1
 80007ae:	785b      	ldrb	r3, [r3, #1]
 80007b0:	4619      	mov	r1, r3
					slaveStr.ReadRegsGroup[10 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 80007b2:	79bb      	ldrb	r3, [r7, #6]
 80007b4:	330a      	adds	r3, #10
							+ motorDriverStr.RecvBuff[4 + idx*2];
 80007b6:	440a      	add	r2, r1
 80007b8:	b291      	uxth	r1, r2
					slaveStr.ReadRegsGroup[10 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 80007ba:	4a33      	ldr	r2, [pc, #204]	@ (8000888 <ProcessData_RecvFromMotorDriver+0x1bc>)
 80007bc:	3384      	adds	r3, #132	@ 0x84
 80007be:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 80007c2:	79bb      	ldrb	r3, [r7, #6]
 80007c4:	3301      	adds	r3, #1
 80007c6:	71bb      	strb	r3, [r7, #6]
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	783b      	ldrb	r3, [r7, #0]
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d3e1      	bcc.n	8000794 <ProcessData_RecvFromMotorDriver+0xc8>
				}
			}
			if(slaveId == 0x03) {
 80007d0:	787b      	ldrb	r3, [r7, #1]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d120      	bne.n	8000818 <ProcessData_RecvFromMotorDriver+0x14c>
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 80007d6:	2300      	movs	r3, #0
 80007d8:	717b      	strb	r3, [r7, #5]
 80007da:	e019      	b.n	8000810 <ProcessData_RecvFromMotorDriver+0x144>
					slaveStr.ReadRegsGroup[20 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 80007dc:	797b      	ldrb	r3, [r7, #5]
 80007de:	005b      	lsls	r3, r3, #1
 80007e0:	3303      	adds	r3, #3
 80007e2:	4a27      	ldr	r2, [pc, #156]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 80007e4:	4413      	add	r3, r2
 80007e6:	785b      	ldrb	r3, [r3, #1]
 80007e8:	021b      	lsls	r3, r3, #8
 80007ea:	b29a      	uxth	r2, r3
							+ motorDriverStr.RecvBuff[4 + idx*2];
 80007ec:	797b      	ldrb	r3, [r7, #5]
 80007ee:	3302      	adds	r3, #2
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	4923      	ldr	r1, [pc, #140]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 80007f4:	440b      	add	r3, r1
 80007f6:	785b      	ldrb	r3, [r3, #1]
 80007f8:	4619      	mov	r1, r3
					slaveStr.ReadRegsGroup[20 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 80007fa:	797b      	ldrb	r3, [r7, #5]
 80007fc:	3314      	adds	r3, #20
							+ motorDriverStr.RecvBuff[4 + idx*2];
 80007fe:	440a      	add	r2, r1
 8000800:	b291      	uxth	r1, r2
					slaveStr.ReadRegsGroup[20 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 8000802:	4a21      	ldr	r2, [pc, #132]	@ (8000888 <ProcessData_RecvFromMotorDriver+0x1bc>)
 8000804:	3384      	adds	r3, #132	@ 0x84
 8000806:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 800080a:	797b      	ldrb	r3, [r7, #5]
 800080c:	3301      	adds	r3, #1
 800080e:	717b      	strb	r3, [r7, #5]
 8000810:	797a      	ldrb	r2, [r7, #5]
 8000812:	783b      	ldrb	r3, [r7, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d3e1      	bcc.n	80007dc <ProcessData_RecvFromMotorDriver+0x110>
				}
			}
			if(slaveId == 0x04) {
 8000818:	787b      	ldrb	r3, [r7, #1]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d120      	bne.n	8000860 <ProcessData_RecvFromMotorDriver+0x194>
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 800081e:	2300      	movs	r3, #0
 8000820:	713b      	strb	r3, [r7, #4]
 8000822:	e019      	b.n	8000858 <ProcessData_RecvFromMotorDriver+0x18c>
					slaveStr.ReadRegsGroup[30 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 8000824:	793b      	ldrb	r3, [r7, #4]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	3303      	adds	r3, #3
 800082a:	4a15      	ldr	r2, [pc, #84]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 800082c:	4413      	add	r3, r2
 800082e:	785b      	ldrb	r3, [r3, #1]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	b29a      	uxth	r2, r3
							+ motorDriverStr.RecvBuff[4 + idx*2];
 8000834:	793b      	ldrb	r3, [r7, #4]
 8000836:	3302      	adds	r3, #2
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	4911      	ldr	r1, [pc, #68]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 800083c:	440b      	add	r3, r1
 800083e:	785b      	ldrb	r3, [r3, #1]
 8000840:	4619      	mov	r1, r3
					slaveStr.ReadRegsGroup[30 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 8000842:	793b      	ldrb	r3, [r7, #4]
 8000844:	331e      	adds	r3, #30
							+ motorDriverStr.RecvBuff[4 + idx*2];
 8000846:	440a      	add	r2, r1
 8000848:	b291      	uxth	r1, r2
					slaveStr.ReadRegsGroup[30 + idx] = (motorDriverStr.RecvBuff[3 + idx*2] << 8)
 800084a:	4a0f      	ldr	r2, [pc, #60]	@ (8000888 <ProcessData_RecvFromMotorDriver+0x1bc>)
 800084c:	3384      	adds	r3, #132	@ 0x84
 800084e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (uint8_t idx = 0; idx < nRegNum; idx++) {
 8000852:	793b      	ldrb	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	713b      	strb	r3, [r7, #4]
 8000858:	793a      	ldrb	r2, [r7, #4]
 800085a:	783b      	ldrb	r3, [r7, #0]
 800085c:	429a      	cmp	r2, r3
 800085e:	d3e1      	bcc.n	8000824 <ProcessData_RecvFromMotorDriver+0x158>
				}
			}
		} // 通过CRC校验的才处理
	}
	// 处理完这一帧数据，复位
	motorDriverStr.recCnt = 0x00;
 8000860:	4b07      	ldr	r3, [pc, #28]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000862:	2200      	movs	r2, #0
 8000864:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	motorDriverStr.recFrameFlag = 0x00;
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 800086a:	2200      	movs	r2, #0
 800086c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	motorDriverStr.localCRCValue = 0x0000;
 8000870:	4b03      	ldr	r3, [pc, #12]	@ (8000880 <ProcessData_RecvFromMotorDriver+0x1b4>)
 8000872:	2200      	movs	r2, #0
 8000874:	849a      	strh	r2, [r3, #36]	@ 0x24
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000124 	.word	0x20000124
 8000884:	20000125 	.word	0x20000125
 8000888:	20000160 	.word	0x20000160

0800088c <ProcessData_TransToMotorDriver>:
 *
 * 单片机做主站，发送控制命令
 *
 *--------------------------------------------------------*/
void ProcessData_TransToMotorDriver(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b0a0      	sub	sp, #128	@ 0x80
 8000890:	af02      	add	r7, sp, #8
	static uint8_t prev_run_times;
	static uint16_t prev_duty_7_5_v;

	switch (REC_CTRL_ARRAY_IDX) {
 8000892:	4bcc      	ldr	r3, [pc, #816]	@ (8000bc4 <ProcessData_TransToMotorDriver+0x338>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b20      	cmp	r3, #32
 8000898:	f200 82ab 	bhi.w	8000df2 <ProcessData_TransToMotorDriver+0x566>
 800089c:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <ProcessData_TransToMotorDriver+0x18>)
 800089e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a2:	bf00      	nop
 80008a4:	08000929 	.word	0x08000929
 80008a8:	08000975 	.word	0x08000975
 80008ac:	080009bb 	.word	0x080009bb
 80008b0:	08000cd1 	.word	0x08000cd1
 80008b4:	08000df3 	.word	0x08000df3
 80008b8:	08000df3 	.word	0x08000df3
 80008bc:	08000df3 	.word	0x08000df3
 80008c0:	08000df3 	.word	0x08000df3
 80008c4:	08000df3 	.word	0x08000df3
 80008c8:	08000df3 	.word	0x08000df3
 80008cc:	08000a07 	.word	0x08000a07
 80008d0:	08000a53 	.word	0x08000a53
 80008d4:	08000a99 	.word	0x08000a99
 80008d8:	08000df3 	.word	0x08000df3
 80008dc:	08000df3 	.word	0x08000df3
 80008e0:	08000df3 	.word	0x08000df3
 80008e4:	08000df3 	.word	0x08000df3
 80008e8:	08000df3 	.word	0x08000df3
 80008ec:	08000df3 	.word	0x08000df3
 80008f0:	08000df3 	.word	0x08000df3
 80008f4:	08000ae5 	.word	0x08000ae5
 80008f8:	08000b31 	.word	0x08000b31
 80008fc:	08000b77 	.word	0x08000b77
 8000900:	08000df3 	.word	0x08000df3
 8000904:	08000df3 	.word	0x08000df3
 8000908:	08000df3 	.word	0x08000df3
 800090c:	08000df3 	.word	0x08000df3
 8000910:	08000df3 	.word	0x08000df3
 8000914:	08000df3 	.word	0x08000df3
 8000918:	08000df3 	.word	0x08000df3
 800091c:	08000bf5 	.word	0x08000bf5
 8000920:	08000c41 	.word	0x08000c41
 8000924:	08000c87 	.word	0x08000c87
	case 0:
		// 处理开始测试 当0x9000/0x900A/0x9014/0x901E = 1时
		if (1 == slaveStr.WriteRegsGroup[0]) {
 8000928:	4ba7      	ldr	r3, [pc, #668]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 800092a:	f8b3 3158 	ldrh.w	r3, [r3, #344]	@ 0x158
 800092e:	2b01      	cmp	r3, #1
 8000930:	d11b      	bne.n	800096a <ProcessData_TransToMotorDriver+0xde>
			uint8_t send_data[8] = {0x01, 0x06, 0x00, 0xF3, 0x00, 0x01,};
 8000932:	4aa6      	ldr	r2, [pc, #664]	@ (8000bcc <ProcessData_TransToMotorDriver+0x340>)
 8000934:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000938:	e892 0003 	ldmia.w	r2, {r0, r1}
 800093c:	6018      	str	r0, [r3, #0]
 800093e:	3304      	adds	r3, #4
 8000940:	8019      	strh	r1, [r3, #0]
 8000942:	3302      	adds	r3, #2
 8000944:	0c0a      	lsrs	r2, r1, #16
 8000946:	701a      	strb	r2, [r3, #0]
 8000948:	2300      	movs	r3, #0
 800094a:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 800094e:	f107 016c 	add.w	r1, r7, #108	@ 0x6c
 8000952:	2328      	movs	r3, #40	@ 0x28
 8000954:	9300      	str	r3, [sp, #0]
 8000956:	f04f 33ff 	mov.w	r3, #4294967295
 800095a:	2208      	movs	r2, #8
 800095c:	489c      	ldr	r0, [pc, #624]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 800095e:	f000 fab1 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[0] = 0; // 避免重复写
 8000962:	4b99      	ldr	r3, [pc, #612]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000964:	2200      	movs	r2, #0
 8000966:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
		}
		slaveStr.ReadRegsGroup[0] = 1;		// 为了让电缸能顶动
 800096a:	4b97      	ldr	r3, [pc, #604]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 800096c:	2201      	movs	r2, #1
 800096e:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
		break;
 8000972:	e23e      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>

	case 1:
		// 处理复位命令
		if (1 == slaveStr.WriteRegsGroup[1]) {
 8000974:	4b94      	ldr	r3, [pc, #592]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000976:	f8b3 315a 	ldrh.w	r3, [r3, #346]	@ 0x15a
 800097a:	2b01      	cmp	r3, #1
 800097c:	f040 8230 	bne.w	8000de0 <ProcessData_TransToMotorDriver+0x554>
			// 电机驱动器自定义过程，复位0x7102=1
			uint8_t send_data[8] = {0x01, 0x06, 0x71, 0x02, 0x00, 0x01,};
 8000980:	4a94      	ldr	r2, [pc, #592]	@ (8000bd4 <ProcessData_TransToMotorDriver+0x348>)
 8000982:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000986:	e892 0003 	ldmia.w	r2, {r0, r1}
 800098a:	6018      	str	r0, [r3, #0]
 800098c:	3304      	adds	r3, #4
 800098e:	8019      	strh	r1, [r3, #0]
 8000990:	3302      	adds	r3, #2
 8000992:	0c0a      	lsrs	r2, r1, #16
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	2300      	movs	r3, #0
 8000998:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 800099c:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80009a0:	2328      	movs	r3, #40	@ 0x28
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
 80009a8:	2208      	movs	r2, #8
 80009aa:	4889      	ldr	r0, [pc, #548]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 80009ac:	f000 fa8a 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[1] = 0; // 避免重复写
 80009b0:	4b85      	ldr	r3, [pc, #532]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	f8a3 215a 	strh.w	r2, [r3, #346]	@ 0x15a
		}
		break;
 80009b8:	e212      	b.n	8000de0 <ProcessData_TransToMotorDriver+0x554>

	case 2:
		// 处理停止测试
		if (1 == slaveStr.WriteRegsGroup[2]) {
 80009ba:	4b83      	ldr	r3, [pc, #524]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 80009bc:	f8b3 315c 	ldrh.w	r3, [r3, #348]	@ 0x15c
 80009c0:	2b01      	cmp	r3, #1
 80009c2:	d11b      	bne.n	80009fc <ProcessData_TransToMotorDriver+0x170>
			uint8_t send_data[8] = {0x01, 0x06, 0x00, 0xF3, 0x00, 0x00,};
 80009c4:	4a84      	ldr	r2, [pc, #528]	@ (8000bd8 <ProcessData_TransToMotorDriver+0x34c>)
 80009c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80009ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009ce:	6018      	str	r0, [r3, #0]
 80009d0:	3304      	adds	r3, #4
 80009d2:	8019      	strh	r1, [r3, #0]
 80009d4:	3302      	adds	r3, #2
 80009d6:	0c0a      	lsrs	r2, r1, #16
 80009d8:	701a      	strb	r2, [r3, #0]
 80009da:	2300      	movs	r3, #0
 80009dc:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 80009e0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 80009e4:	2328      	movs	r3, #40	@ 0x28
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	f04f 33ff 	mov.w	r3, #4294967295
 80009ec:	2208      	movs	r2, #8
 80009ee:	4878      	ldr	r0, [pc, #480]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 80009f0:	f000 fa68 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[2] = 0; // 避免重复写
 80009f4:	4b74      	ldr	r3, [pc, #464]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	f8a3 215c 	strh.w	r2, [r3, #348]	@ 0x15c
		}
		slaveStr.ReadRegsGroup[0] = 0;		// 为了让电机的控制停下来
 80009fc:	4b72      	ldr	r3, [pc, #456]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
		break;
 8000a04:	e1f5      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>

	case 10:
		// 处理开始测试 当0x9000/0x900A/0x9014/0x901E = 1时
		if (1 == slaveStr.WriteRegsGroup[10]) {
 8000a06:	4b70      	ldr	r3, [pc, #448]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000a08:	f8b3 316c 	ldrh.w	r3, [r3, #364]	@ 0x16c
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d11b      	bne.n	8000a48 <ProcessData_TransToMotorDriver+0x1bc>
			uint8_t send_data[8] = {0x02, 0x06, 0x00, 0xF3, 0x00, 0x01,};
 8000a10:	4a72      	ldr	r2, [pc, #456]	@ (8000bdc <ProcessData_TransToMotorDriver+0x350>)
 8000a12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1a:	6018      	str	r0, [r3, #0]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	8019      	strh	r1, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	0c0a      	lsrs	r2, r1, #16
 8000a24:	701a      	strb	r2, [r3, #0]
 8000a26:	2300      	movs	r3, #0
 8000a28:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000a2c:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 8000a30:	2328      	movs	r3, #40	@ 0x28
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295
 8000a38:	2208      	movs	r2, #8
 8000a3a:	4865      	ldr	r0, [pc, #404]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 8000a3c:	f000 fa42 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[10] = 0; // 避免重复写
 8000a40:	4b61      	ldr	r3, [pc, #388]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f8a3 216c 	strh.w	r2, [r3, #364]	@ 0x16c
		}
		slaveStr.ReadRegsGroup[10] = 1;		// 为了让电缸能顶动
 8000a48:	4b5f      	ldr	r3, [pc, #380]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
		break;
 8000a50:	e1cf      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>

	case 11:
		// 处理复位命令
		if (1 == slaveStr.WriteRegsGroup[11]) {
 8000a52:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000a54:	f8b3 316e 	ldrh.w	r3, [r3, #366]	@ 0x16e
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	f040 81c3 	bne.w	8000de4 <ProcessData_TransToMotorDriver+0x558>
			// 电机驱动器自定义过程，复位0x7102=1
			uint8_t send_data[8] = {0x02, 0x06, 0x71, 0x02, 0x00, 0x01,};
 8000a5e:	4a60      	ldr	r2, [pc, #384]	@ (8000be0 <ProcessData_TransToMotorDriver+0x354>)
 8000a60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a68:	6018      	str	r0, [r3, #0]
 8000a6a:	3304      	adds	r3, #4
 8000a6c:	8019      	strh	r1, [r3, #0]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	0c0a      	lsrs	r2, r1, #16
 8000a72:	701a      	strb	r2, [r3, #0]
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000a7a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8000a7e:	2328      	movs	r3, #40	@ 0x28
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	2208      	movs	r2, #8
 8000a88:	4851      	ldr	r0, [pc, #324]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 8000a8a:	f000 fa1b 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[11] = 0; // 避免重复写
 8000a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	f8a3 216e 	strh.w	r2, [r3, #366]	@ 0x16e
		}
		break;
 8000a96:	e1a5      	b.n	8000de4 <ProcessData_TransToMotorDriver+0x558>

	case 12:
		// 处理停止测试
		if (1 == slaveStr.WriteRegsGroup[12]) {
 8000a98:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000a9a:	f8b3 3170 	ldrh.w	r3, [r3, #368]	@ 0x170
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d11b      	bne.n	8000ada <ProcessData_TransToMotorDriver+0x24e>
			uint8_t send_data[8] = {0x02, 0x06, 0x00, 0xF3, 0x00, 0x00,};
 8000aa2:	4a50      	ldr	r2, [pc, #320]	@ (8000be4 <ProcessData_TransToMotorDriver+0x358>)
 8000aa4:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aac:	6018      	str	r0, [r3, #0]
 8000aae:	3304      	adds	r3, #4
 8000ab0:	8019      	strh	r1, [r3, #0]
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	0c0a      	lsrs	r2, r1, #16
 8000ab6:	701a      	strb	r2, [r3, #0]
 8000ab8:	2300      	movs	r3, #0
 8000aba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000abe:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8000ac2:	2328      	movs	r3, #40	@ 0x28
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aca:	2208      	movs	r2, #8
 8000acc:	4840      	ldr	r0, [pc, #256]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 8000ace:	f000 f9f9 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[12] = 0; // 避免重复写
 8000ad2:	4b3d      	ldr	r3, [pc, #244]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f8a3 2170 	strh.w	r2, [r3, #368]	@ 0x170
		}
		slaveStr.ReadRegsGroup[10] = 0;		// 为了让电机的控制停下来
 8000ada:	4b3b      	ldr	r3, [pc, #236]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
		break;
 8000ae2:	e186      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>

	case 20:
		// 处理开始测试 当0x9000/0x900A/0x9014/0x901E = 1时
		if (1 == slaveStr.WriteRegsGroup[20]) {
 8000ae4:	4b38      	ldr	r3, [pc, #224]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000ae6:	f8b3 3180 	ldrh.w	r3, [r3, #384]	@ 0x180
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d11b      	bne.n	8000b26 <ProcessData_TransToMotorDriver+0x29a>
			uint8_t send_data[8] = {0x03, 0x06, 0x00, 0xF3, 0x00, 0x01,};
 8000aee:	4a3e      	ldr	r2, [pc, #248]	@ (8000be8 <ProcessData_TransToMotorDriver+0x35c>)
 8000af0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af8:	6018      	str	r0, [r3, #0]
 8000afa:	3304      	adds	r3, #4
 8000afc:	8019      	strh	r1, [r3, #0]
 8000afe:	3302      	adds	r3, #2
 8000b00:	0c0a      	lsrs	r2, r1, #16
 8000b02:	701a      	strb	r2, [r3, #0]
 8000b04:	2300      	movs	r3, #0
 8000b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000b0a:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000b0e:	2328      	movs	r3, #40	@ 0x28
 8000b10:	9300      	str	r3, [sp, #0]
 8000b12:	f04f 33ff 	mov.w	r3, #4294967295
 8000b16:	2208      	movs	r2, #8
 8000b18:	482d      	ldr	r0, [pc, #180]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 8000b1a:	f000 f9d3 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[20] = 0; // 避免重复写
 8000b1e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	f8a3 2180 	strh.w	r2, [r3, #384]	@ 0x180
		}
		slaveStr.ReadRegsGroup[20] = 1;		// 为了让电缸能顶动
 8000b26:	4b28      	ldr	r3, [pc, #160]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f8a3 2130 	strh.w	r2, [r3, #304]	@ 0x130
		break;
 8000b2e:	e160      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>

	case 21:
		// 处理复位命令
		if (1 == slaveStr.WriteRegsGroup[21]) {
 8000b30:	4b25      	ldr	r3, [pc, #148]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000b32:	f8b3 3182 	ldrh.w	r3, [r3, #386]	@ 0x182
 8000b36:	2b01      	cmp	r3, #1
 8000b38:	f040 8156 	bne.w	8000de8 <ProcessData_TransToMotorDriver+0x55c>
			// 电机驱动器自定义过程，复位0x7102=1
			uint8_t send_data[8] = {0x03, 0x06, 0x71, 0x02, 0x00, 0x01,};
 8000b3c:	4a2b      	ldr	r2, [pc, #172]	@ (8000bec <ProcessData_TransToMotorDriver+0x360>)
 8000b3e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000b42:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b46:	6018      	str	r0, [r3, #0]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	8019      	strh	r1, [r3, #0]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	0c0a      	lsrs	r2, r1, #16
 8000b50:	701a      	strb	r2, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000b58:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8000b5c:	2328      	movs	r3, #40	@ 0x28
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	f04f 33ff 	mov.w	r3, #4294967295
 8000b64:	2208      	movs	r2, #8
 8000b66:	481a      	ldr	r0, [pc, #104]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 8000b68:	f000 f9ac 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[21] = 0; // 避免重复写
 8000b6c:	4b16      	ldr	r3, [pc, #88]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f8a3 2182 	strh.w	r2, [r3, #386]	@ 0x182
		}
		break;
 8000b74:	e138      	b.n	8000de8 <ProcessData_TransToMotorDriver+0x55c>

	case 22:
		// 处理停止测试
		if (1 == slaveStr.WriteRegsGroup[22]) {
 8000b76:	4b14      	ldr	r3, [pc, #80]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000b78:	f8b3 3184 	ldrh.w	r3, [r3, #388]	@ 0x184
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d11b      	bne.n	8000bb8 <ProcessData_TransToMotorDriver+0x32c>
			uint8_t send_data[8] = {0x03, 0x06, 0x00, 0xF3, 0x00, 0x00,};
 8000b80:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf0 <ProcessData_TransToMotorDriver+0x364>)
 8000b82:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b8a:	6018      	str	r0, [r3, #0]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	8019      	strh	r1, [r3, #0]
 8000b90:	3302      	adds	r3, #2
 8000b92:	0c0a      	lsrs	r2, r1, #16
 8000b94:	701a      	strb	r2, [r3, #0]
 8000b96:	2300      	movs	r3, #0
 8000b98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000b9c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8000ba0:	2328      	movs	r3, #40	@ 0x28
 8000ba2:	9300      	str	r3, [sp, #0]
 8000ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba8:	2208      	movs	r2, #8
 8000baa:	4809      	ldr	r0, [pc, #36]	@ (8000bd0 <ProcessData_TransToMotorDriver+0x344>)
 8000bac:	f000 f98a 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[22] = 0; // 避免重复写
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f8a3 2184 	strh.w	r2, [r3, #388]	@ 0x184
		}
		slaveStr.ReadRegsGroup[20] = 0;		// 为了让电机的控制停下来
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <ProcessData_TransToMotorDriver+0x33c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f8a3 2130 	strh.w	r2, [r3, #304]	@ 0x130
		break;
 8000bc0:	e117      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>
 8000bc2:	bf00      	nop
 8000bc4:	2000030a 	.word	0x2000030a
 8000bc8:	20000160 	.word	0x20000160
 8000bcc:	08008c08 	.word	0x08008c08
 8000bd0:	20000450 	.word	0x20000450
 8000bd4:	08008c10 	.word	0x08008c10
 8000bd8:	08008c18 	.word	0x08008c18
 8000bdc:	08008c20 	.word	0x08008c20
 8000be0:	08008c28 	.word	0x08008c28
 8000be4:	08008c30 	.word	0x08008c30
 8000be8:	08008c38 	.word	0x08008c38
 8000bec:	08008c40 	.word	0x08008c40
 8000bf0:	08008c48 	.word	0x08008c48

	case 30:
		// 处理开始测试 当0x9000/0x900A/0x9014/0x901E = 1时
		if (1 == slaveStr.WriteRegsGroup[30]) {
 8000bf4:	4b81      	ldr	r3, [pc, #516]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000bf6:	f8b3 3194 	ldrh.w	r3, [r3, #404]	@ 0x194
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d11b      	bne.n	8000c36 <ProcessData_TransToMotorDriver+0x3aa>
			uint8_t send_data[8] = {0x04, 0x06, 0x00, 0xF3, 0x00, 0x01,};
 8000bfe:	4a80      	ldr	r2, [pc, #512]	@ (8000e00 <ProcessData_TransToMotorDriver+0x574>)
 8000c00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c08:	6018      	str	r0, [r3, #0]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	8019      	strh	r1, [r3, #0]
 8000c0e:	3302      	adds	r3, #2
 8000c10:	0c0a      	lsrs	r2, r1, #16
 8000c12:	701a      	strb	r2, [r3, #0]
 8000c14:	2300      	movs	r3, #0
 8000c16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000c1a:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000c1e:	2328      	movs	r3, #40	@ 0x28
 8000c20:	9300      	str	r3, [sp, #0]
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295
 8000c26:	2208      	movs	r2, #8
 8000c28:	4876      	ldr	r0, [pc, #472]	@ (8000e04 <ProcessData_TransToMotorDriver+0x578>)
 8000c2a:	f000 f94b 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[30] = 0; // 避免重复写
 8000c2e:	4b73      	ldr	r3, [pc, #460]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	f8a3 2194 	strh.w	r2, [r3, #404]	@ 0x194
		}
		slaveStr.ReadRegsGroup[30] = 1;		// 为了让电缸能顶动
 8000c36:	4b71      	ldr	r3, [pc, #452]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
		break;
 8000c3e:	e0d8      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>

	case 31:
		// 处理复位命令
		if (1 == slaveStr.WriteRegsGroup[31]) {
 8000c40:	4b6e      	ldr	r3, [pc, #440]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000c42:	f8b3 3196 	ldrh.w	r3, [r3, #406]	@ 0x196
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	f040 80d0 	bne.w	8000dec <ProcessData_TransToMotorDriver+0x560>
			// 电机驱动器自定义过程，复位0x7102=1
			uint8_t send_data[8] = {0x04, 0x06, 0x71, 0x02, 0x00, 0x01,};
 8000c4c:	4a6e      	ldr	r2, [pc, #440]	@ (8000e08 <ProcessData_TransToMotorDriver+0x57c>)
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c56:	6018      	str	r0, [r3, #0]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	8019      	strh	r1, [r3, #0]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	0c0a      	lsrs	r2, r1, #16
 8000c60:	701a      	strb	r2, [r3, #0]
 8000c62:	2300      	movs	r3, #0
 8000c64:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000c68:	f107 011c 	add.w	r1, r7, #28
 8000c6c:	2328      	movs	r3, #40	@ 0x28
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	2208      	movs	r2, #8
 8000c76:	4863      	ldr	r0, [pc, #396]	@ (8000e04 <ProcessData_TransToMotorDriver+0x578>)
 8000c78:	f000 f924 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[31] = 0; // 避免重复写
 8000c7c:	4b5f      	ldr	r3, [pc, #380]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f8a3 2196 	strh.w	r2, [r3, #406]	@ 0x196
		}
		break;
 8000c84:	e0b2      	b.n	8000dec <ProcessData_TransToMotorDriver+0x560>

	case 32:
		// 处理停止测试
		if (1 == slaveStr.WriteRegsGroup[32]) {
 8000c86:	4b5d      	ldr	r3, [pc, #372]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000c88:	f8b3 3198 	ldrh.w	r3, [r3, #408]	@ 0x198
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d11a      	bne.n	8000cc6 <ProcessData_TransToMotorDriver+0x43a>
			uint8_t send_data[8] = {0x04, 0x06, 0x00, 0xF3, 0x00, 0x00,};
 8000c90:	4a5e      	ldr	r2, [pc, #376]	@ (8000e0c <ProcessData_TransToMotorDriver+0x580>)
 8000c92:	f107 0314 	add.w	r3, r7, #20
 8000c96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c9a:	6018      	str	r0, [r3, #0]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	8019      	strh	r1, [r3, #0]
 8000ca0:	3302      	adds	r3, #2
 8000ca2:	0c0a      	lsrs	r2, r1, #16
 8000ca4:	701a      	strb	r2, [r3, #0]
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	76fb      	strb	r3, [r7, #27]
			UART_SendDataWithSemaphore(&huart2, send_data, 8, osWaitForever, 40);
 8000caa:	f107 0114 	add.w	r1, r7, #20
 8000cae:	2328      	movs	r3, #40	@ 0x28
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	2208      	movs	r2, #8
 8000cb8:	4852      	ldr	r0, [pc, #328]	@ (8000e04 <ProcessData_TransToMotorDriver+0x578>)
 8000cba:	f000 f903 	bl	8000ec4 <UART_SendDataWithSemaphore>
			slaveStr.WriteRegsGroup[32] = 0; // 避免重复写
 8000cbe:	4b4f      	ldr	r3, [pc, #316]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f8a3 2198 	strh.w	r2, [r3, #408]	@ 0x198
		}
		slaveStr.ReadRegsGroup[30] = 0;		// 为了让电机的控制停下来
 8000cc6:	4b4d      	ldr	r3, [pc, #308]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f8a3 2144 	strh.w	r2, [r3, #324]	@ 0x144
		break;
 8000cce:	e090      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>

	case 3:
		// 如果设置的跑合次数或者7.5V收回时的占空比有变化，则同步给电机驱动器
		if ((slaveStr.WriteRegsGroup[3] != prev_run_times) || (slaveStr.WriteRegsGroup[40] != prev_duty_7_5_v)) {
 8000cd0:	4b4a      	ldr	r3, [pc, #296]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000cd2:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8000cd6:	4a4e      	ldr	r2, [pc, #312]	@ (8000e10 <ProcessData_TransToMotorDriver+0x584>)
 8000cd8:	7812      	ldrb	r2, [r2, #0]
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d107      	bne.n	8000cee <ProcessData_TransToMotorDriver+0x462>
 8000cde:	4b47      	ldr	r3, [pc, #284]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000ce0:	f8b3 21a8 	ldrh.w	r2, [r3, #424]	@ 0x1a8
 8000ce4:	4b4b      	ldr	r3, [pc, #300]	@ (8000e14 <ProcessData_TransToMotorDriver+0x588>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	f000 8081 	beq.w	8000df0 <ProcessData_TransToMotorDriver+0x564>
			uint8_t send_data[13] = {0x01, 0x10, 0x71, 0x00,
 8000cee:	4a4a      	ldr	r2, [pc, #296]	@ (8000e18 <ProcessData_TransToMotorDriver+0x58c>)
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cf4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	743b      	strb	r3, [r7, #16]
					0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00,};

			slaveStr.WriteRegsGroup[13] = slaveStr.WriteRegsGroup[3];
 8000cfc:	4b3f      	ldr	r3, [pc, #252]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000cfe:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8000d02:	4b3e      	ldr	r3, [pc, #248]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d04:	f8a3 2172 	strh.w	r2, [r3, #370]	@ 0x172
			slaveStr.WriteRegsGroup[14] = slaveStr.WriteRegsGroup[4];
 8000d08:	4b3c      	ldr	r3, [pc, #240]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d0a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	@ 0x160
 8000d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d10:	f8a3 2174 	strh.w	r2, [r3, #372]	@ 0x174
			slaveStr.WriteRegsGroup[23] = slaveStr.WriteRegsGroup[3];
 8000d14:	4b39      	ldr	r3, [pc, #228]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d16:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8000d1a:	4b38      	ldr	r3, [pc, #224]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d1c:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186
			slaveStr.WriteRegsGroup[24] = slaveStr.WriteRegsGroup[4];
 8000d20:	4b36      	ldr	r3, [pc, #216]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d22:	f8b3 2160 	ldrh.w	r2, [r3, #352]	@ 0x160
 8000d26:	4b35      	ldr	r3, [pc, #212]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d28:	f8a3 2188 	strh.w	r2, [r3, #392]	@ 0x188
			slaveStr.WriteRegsGroup[33] = slaveStr.WriteRegsGroup[3];
 8000d2c:	4b33      	ldr	r3, [pc, #204]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d2e:	f8b3 215e 	ldrh.w	r2, [r3, #350]	@ 0x15e
 8000d32:	4b32      	ldr	r3, [pc, #200]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d34:	f8a3 219a 	strh.w	r2, [r3, #410]	@ 0x19a
			slaveStr.WriteRegsGroup[34] = slaveStr.WriteRegsGroup[4];
 8000d38:	4b30      	ldr	r3, [pc, #192]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d3a:	f8b3 2160 	ldrh.w	r2, [r3, #352]	@ 0x160
 8000d3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d40:	f8a3 219c 	strh.w	r2, [r3, #412]	@ 0x19c

			for (uint8_t i = 0; i < MOTOR_DRIVER_SLAVE_NUM; i++) {
 8000d44:	2300      	movs	r3, #0
 8000d46:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000d4a:	e044      	b.n	8000dd6 <ProcessData_TransToMotorDriver+0x54a>
				send_data[0] = i + 1;
 8000d4c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000d50:	3301      	adds	r3, #1
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	713b      	strb	r3, [r7, #4]
				send_data[7] = slaveStr.WriteRegsGroup[3] >> 8;
 8000d56:	4b29      	ldr	r3, [pc, #164]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d58:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	72fb      	strb	r3, [r7, #11]
				send_data[8] = slaveStr.WriteRegsGroup[3];
 8000d64:	4b25      	ldr	r3, [pc, #148]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d66:	f8b3 315e 	ldrh.w	r3, [r3, #350]	@ 0x15e
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	733b      	strb	r3, [r7, #12]
				send_data[9] = slaveStr.WriteRegsGroup[4] >> 8;
 8000d6e:	4b23      	ldr	r3, [pc, #140]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d70:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8000d74:	0a1b      	lsrs	r3, r3, #8
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	737b      	strb	r3, [r7, #13]
				send_data[10] = slaveStr.WriteRegsGroup[4];
 8000d7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dfc <ProcessData_TransToMotorDriver+0x570>)
 8000d7e:	f8b3 3160 	ldrh.w	r3, [r3, #352]	@ 0x160
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	73bb      	strb	r3, [r7, #14]

				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8000d86:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <ProcessData_TransToMotorDriver+0x590>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f04f 31ff 	mov.w	r1, #4294967295
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 fe08 	bl	80059a4 <osSemaphoreAcquire>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d10d      	bne.n	8000db6 <ProcessData_TransToMotorDriver+0x52a>
					SendModbusFrame(&huart2, send_data, 13);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	220d      	movs	r2, #13
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4818      	ldr	r0, [pc, #96]	@ (8000e04 <ProcessData_TransToMotorDriver+0x578>)
 8000da2:	f000 f863 	bl	8000e6c <SendModbusFrame>
					osDelay(50);
 8000da6:	2032      	movs	r0, #50	@ 0x32
 8000da8:	f004 fd32 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 8000dac:	4b1b      	ldr	r3, [pc, #108]	@ (8000e1c <ProcessData_TransToMotorDriver+0x590>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4618      	mov	r0, r3
 8000db2:	f004 fe5d 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}

				prev_run_times = (send_data[7] << 8) + send_data[8];
 8000db6:	7b3a      	ldrb	r2, [r7, #12]
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <ProcessData_TransToMotorDriver+0x584>)
 8000dba:	701a      	strb	r2, [r3, #0]
				prev_duty_7_5_v = (send_data[9] << 8) + send_data[10];
 8000dbc:	7b7b      	ldrb	r3, [r7, #13]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	7bba      	ldrb	r2, [r7, #14]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29a      	uxth	r2, r3
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <ProcessData_TransToMotorDriver+0x588>)
 8000dca:	801a      	strh	r2, [r3, #0]
			for (uint8_t i = 0; i < MOTOR_DRIVER_SLAVE_NUM; i++) {
 8000dcc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8000dd6:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d9b6      	bls.n	8000d4c <ProcessData_TransToMotorDriver+0x4c0>
			} // end for
		} // end if
		break;
 8000dde:	e007      	b.n	8000df0 <ProcessData_TransToMotorDriver+0x564>
		break;
 8000de0:	bf00      	nop
 8000de2:	e006      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>
		break;
 8000de4:	bf00      	nop
 8000de6:	e004      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>
		break;
 8000de8:	bf00      	nop
 8000dea:	e002      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>
		break;
 8000dec:	bf00      	nop
 8000dee:	e000      	b.n	8000df2 <ProcessData_TransToMotorDriver+0x566>
		break;
 8000df0:	bf00      	nop
	}
}
 8000df2:	bf00      	nop
 8000df4:	3778      	adds	r7, #120	@ 0x78
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000160 	.word	0x20000160
 8000e00:	08008c50 	.word	0x08008c50
 8000e04:	20000450 	.word	0x20000450
 8000e08:	08008c58 	.word	0x08008c58
 8000e0c:	08008c60 	.word	0x08008c60
 8000e10:	2000015a 	.word	0x2000015a
 8000e14:	2000015c 	.word	0x2000015c
 8000e18:	08008c68 	.word	0x08008c68
 8000e1c:	20000320 	.word	0x20000320

08000e20 <CRCCalc>:
 *
 * CRC16计算，用的查表法
 *
 *--------------------------------------------------------*/
uint16_t CRCCalc(uint8_t *ptr, uint16_t len)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	460b      	mov	r3, r1
 8000e2a:	807b      	strh	r3, [r7, #2]
    uint16_t crcTemp = 0xFFFF;
 8000e2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e30:	81fb      	strh	r3, [r7, #14]

    while (len--) {
 8000e32:	e00e      	b.n	8000e52 <CRCCalc+0x32>
        crcTemp = (crcTemp >> 8) ^ crc16_table[(crcTemp ^ *ptr++) & 0xFF];
 8000e34:	89fb      	ldrh	r3, [r7, #14]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	89f9      	ldrh	r1, [r7, #14]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	1c58      	adds	r0, r3, #1
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	404b      	eors	r3, r1
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4907      	ldr	r1, [pc, #28]	@ (8000e68 <CRCCalc+0x48>)
 8000e4a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e4e:	4053      	eors	r3, r2
 8000e50:	81fb      	strh	r3, [r7, #14]
    while (len--) {
 8000e52:	887b      	ldrh	r3, [r7, #2]
 8000e54:	1e5a      	subs	r2, r3, #1
 8000e56:	807a      	strh	r2, [r7, #2]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d1eb      	bne.n	8000e34 <CRCCalc+0x14>
    }

    return (crcTemp);
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr
 8000e68:	08008d24 	.word	0x08008d24

08000e6c <SendModbusFrame>:
 *
 * 发送附上CRC16校验的数据帧
 *
 *--------------------------------------------------------*/
void SendModbusFrame(UART_HandleTypeDef *huart, uint8_t *send_data, uint8_t len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	4613      	mov	r3, r2
 8000e78:	71fb      	strb	r3, [r7, #7]
    uint16_t tmp_crc16 = CRCCalc(send_data, len - 2);
 8000e7a:	79fb      	ldrb	r3, [r7, #7]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	4619      	mov	r1, r3
 8000e84:	68b8      	ldr	r0, [r7, #8]
 8000e86:	f7ff ffcb 	bl	8000e20 <CRCCalc>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	82fb      	strh	r3, [r7, #22]

    send_data[len - 2] = tmp_crc16;
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	3b02      	subs	r3, #2
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	4413      	add	r3, r2
 8000e96:	8afa      	ldrh	r2, [r7, #22]
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	701a      	strb	r2, [r3, #0]
    send_data[len - 1] = tmp_crc16 >> 8;
 8000e9c:	8afb      	ldrh	r3, [r7, #22]
 8000e9e:	0a1b      	lsrs	r3, r3, #8
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	3b01      	subs	r3, #1
 8000ea6:	68ba      	ldr	r2, [r7, #8]
 8000ea8:	4413      	add	r3, r2
 8000eaa:	b2ca      	uxtb	r2, r1
 8000eac:	701a      	strb	r2, [r3, #0]

    HAL_UART_Transmit_DMA(huart, send_data, len);
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	68f8      	ldr	r0, [r7, #12]
 8000eb8:	f003 fb4c 	bl	8004554 <HAL_UART_Transmit_DMA>
}
 8000ebc:	bf00      	nop
 8000ebe:	3718      	adds	r7, #24
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <UART_SendDataWithSemaphore>:
 *         - 0: 发送成功
 *         - -1: 获取信号量超时
 *         - -2: UART DMA发送启动失败
 */
void UART_SendDataWithSemaphore(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t timeout, uint32_t delayMs)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	603b      	str	r3, [r7, #0]
 8000ed0:	4613      	mov	r3, r2
 8000ed2:	80fb      	strh	r3, [r7, #6]
    // 尝试获取信号量
    if (osSemaphoreAcquire(frameSendSemaphoreHandle, timeout) == osOK) {
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <UART_SendDataWithSemaphore+0x50>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6839      	ldr	r1, [r7, #0]
 8000eda:	4618      	mov	r0, r3
 8000edc:	f004 fd62 	bl	80059a4 <osSemaphoreAcquire>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10c      	bne.n	8000f00 <UART_SendDataWithSemaphore+0x3c>
    	// 启动UART DMA发送
    	SendModbusFrame(huart, pData, Size);
 8000ee6:	88fb      	ldrh	r3, [r7, #6]
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f7ff ffbc 	bl	8000e6c <SendModbusFrame>
		// 短暂延时确保第一个字节发送出去
		if(delayMs > 0) {
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d002      	beq.n	8000f00 <UART_SendDataWithSemaphore+0x3c>
			osDelay(delayMs);
 8000efa:	69b8      	ldr	r0, [r7, #24]
 8000efc:	f004 fc88 	bl	8005810 <osDelay>
		}
    }
    // 释放信号量允许后续发送
    osSemaphoreRelease(frameSendSemaphoreHandle);
 8000f00:	4b04      	ldr	r3, [pc, #16]	@ (8000f14 <UART_SendDataWithSemaphore+0x50>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f004 fdb3 	bl	8005a70 <osSemaphoreRelease>
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000320 	.word	0x20000320

08000f18 <ModbusRtuSlaveInit>:
 *
 * 初始化从站地址
 *
 *--------------------------------------------------------*/
void ModbusRtuSlaveInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
    slaveStr.slaveAddress = SLAVE_ADDR;		// 从机地址（关联宏定义 SLAVE_ADDR ）
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <ModbusRtuSlaveInit+0x2c>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	701a      	strb	r2, [r3, #0]
    slaveStr.recCnt = 0x00;        			// 接收字节计数
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <ModbusRtuSlaveInit+0x2c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
    slaveStr.trsCnt = 0x00;					// 发送字节计数
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <ModbusRtuSlaveInit+0x2c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    slaveStr.recFrameFlag = 0x00;			// 接收帧完成标志
 8000f32:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <ModbusRtuSlaveInit+0x2c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
}
 8000f3a:	bf00      	nop
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bc80      	pop	{r7}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000160 	.word	0x20000160

08000f48 <ProcessData_RecvFromPLC>:
 *
 * 单片机作为从机时，处理接收来自PLC的数据
 *
 *--------------------------------------------------------*/
void ProcessData_RecvFromPLC(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
	uint16_t nFarCRC = 0x0000;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	80fb      	strh	r3, [r7, #6]

	if (slaveStr.RecvBuff[0] == slaveStr.slaveAddress) {
 8000f52:	4b23      	ldr	r3, [pc, #140]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f54:	785a      	ldrb	r2, [r3, #1]
 8000f56:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d12f      	bne.n	8000fbe <ProcessData_RecvFromPLC+0x76>
		slaveStr.localCRCValue = CRCCalc(slaveStr.RecvBuff, slaveStr.recCnt - 2);
 8000f5e:	4b20      	ldr	r3, [pc, #128]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f60:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8000f64:	3b02      	subs	r3, #2
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	4619      	mov	r1, r3
 8000f6a:	481e      	ldr	r0, [pc, #120]	@ (8000fe4 <ProcessData_RecvFromPLC+0x9c>)
 8000f6c:	f7ff ff58 	bl	8000e20 <CRCCalc>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f76:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
		nFarCRC = slaveStr.RecvBuff[slaveStr.recCnt - 2] + (slaveStr.RecvBuff[slaveStr.recCnt - 1] << 8);
 8000f7a:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f7c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8000f80:	3b02      	subs	r3, #2
 8000f82:	4a17      	ldr	r2, [pc, #92]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f84:	4413      	add	r3, r2
 8000f86:	785b      	ldrb	r3, [r3, #1]
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f8c:	f893 3102 	ldrb.w	r3, [r3, #258]	@ 0x102
 8000f90:	3b01      	subs	r3, #1
 8000f92:	4a13      	ldr	r2, [pc, #76]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000f94:	4413      	add	r3, r2
 8000f96:	785b      	ldrb	r3, [r3, #1]
 8000f98:	021b      	lsls	r3, r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	80fb      	strh	r3, [r7, #6]

		if (nFarCRC == slaveStr.localCRCValue) {
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000fa2:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8000fa6:	88fa      	ldrh	r2, [r7, #6]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d102      	bne.n	8000fb2 <ProcessData_RecvFromPLC+0x6a>
			ProcessFuncNum_RecvFromPLC();
 8000fac:	f000 f81c 	bl	8000fe8 <ProcessFuncNum_RecvFromPLC>
 8000fb0:	e005      	b.n	8000fbe <ProcessData_RecvFromPLC+0x76>
		}
		else {
			CommuErrorTrs(slaveStr.RecvBuff[1], 0x03);		// CRC校验出错
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000fb4:	789b      	ldrb	r3, [r3, #2]
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f000 fa83 	bl	80014c4 <CommuErrorTrs>
		}
	}
	// 处理完这一帧数据，复位参数
	slaveStr.recCnt = 0x00;
 8000fbe:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
	slaveStr.recFrameFlag = 0x00;
 8000fc6:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
	slaveStr.localCRCValue = 0x0000;
 8000fce:	4b04      	ldr	r3, [pc, #16]	@ (8000fe0 <ProcessData_RecvFromPLC+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000160 	.word	0x20000160
 8000fe4:	20000161 	.word	0x20000161

08000fe8 <ProcessFuncNum_RecvFromPLC>:
 * 单片机作为从机时，根据功能码处理接收自PLC的数据
 *
 *--------------------------------------------------------*/

void ProcessFuncNum_RecvFromPLC(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
	uint8_t funcNum = 0x00;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	71bb      	strb	r3, [r7, #6]
	int16_t nRegStartIdx   = 0x0000;      // 起始寄存器数组下标
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	80bb      	strh	r3, [r7, #4]
	uint16_t nRegStartAddr = 0x0000;     // 寄存器起始地址
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	807b      	strh	r3, [r7, #2]
	uint8_t  nRegNum       = 0x00;       // 寄存器数量
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	707b      	strb	r3, [r7, #1]
	uint8_t  iCpy          = 0x00;       // 循环变量
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]

	funcNum = slaveStr.RecvBuff[1];			// 功能码
 8001002:	4bb3      	ldr	r3, [pc, #716]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001004:	789b      	ldrb	r3, [r3, #2]
 8001006:	71bb      	strb	r3, [r7, #6]
	nRegStartAddr = (slaveStr.RecvBuff[2] << 8) + slaveStr.RecvBuff[3];		// 起始地址
 8001008:	4bb1      	ldr	r3, [pc, #708]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800100a:	78db      	ldrb	r3, [r3, #3]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b29b      	uxth	r3, r3
 8001010:	4aaf      	ldr	r2, [pc, #700]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001012:	7912      	ldrb	r2, [r2, #4]
 8001014:	4413      	add	r3, r2
 8001016:	807b      	strh	r3, [r7, #2]

	switch (funcNum) {
 8001018:	79bb      	ldrb	r3, [r7, #6]
 800101a:	2b10      	cmp	r3, #16
 800101c:	f000 8177 	beq.w	800130e <ProcessFuncNum_RecvFromPLC+0x326>
 8001020:	2b10      	cmp	r3, #16
 8001022:	f300 8233 	bgt.w	800148c <ProcessFuncNum_RecvFromPLC+0x4a4>
 8001026:	2b03      	cmp	r3, #3
 8001028:	d003      	beq.n	8001032 <ProcessFuncNum_RecvFromPLC+0x4a>
 800102a:	2b06      	cmp	r3, #6
 800102c:	f000 80aa 	beq.w	8001184 <ProcessFuncNum_RecvFromPLC+0x19c>
 8001030:	e22c      	b.n	800148c <ProcessFuncNum_RecvFromPLC+0x4a4>
		// -------------------- 0x03 读寄存器 --------------------
		case 0x03:
			nRegStartIdx = nRegStartAddr - AS_SLAVE_READ_REG_BASE_ADDR;		// 基于读寄存器基地址计算数组下标
 8001032:	887b      	ldrh	r3, [r7, #2]
 8001034:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8001038:	b29b      	uxth	r3, r3
 800103a:	80bb      	strh	r3, [r7, #4]
			nRegNum	 = (slaveStr.RecvBuff[4] << 8) + slaveStr.RecvBuff[5];	// 计算寄存器数量
 800103c:	4ba4      	ldr	r3, [pc, #656]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800103e:	799b      	ldrb	r3, [r3, #6]
 8001040:	707b      	strb	r3, [r7, #1]

			// 校验地址和数量是否越界
			if ((nRegStartIdx + nRegNum <= SLAVE_MAX_READ_REG_NUMBER) &&
 8001042:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001046:	787b      	ldrb	r3, [r7, #1]
 8001048:	4413      	add	r3, r2
 800104a:	2b28      	cmp	r3, #40	@ 0x28
 800104c:	f300 8093 	bgt.w	8001176 <ProcessFuncNum_RecvFromPLC+0x18e>
				(nRegStartAddr >= AS_SLAVE_READ_REG_BASE_ADDR)) {
 8001050:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
			if ((nRegStartIdx + nRegNum <= SLAVE_MAX_READ_REG_NUMBER) &&
 8001054:	2b00      	cmp	r3, #0
 8001056:	f280 808e 	bge.w	8001176 <ProcessFuncNum_RecvFromPLC+0x18e>
				slaveStr.TranBuff[0] = slaveStr.slaveAddress;	// 从机地址
 800105a:	4b9d      	ldr	r3, [pc, #628]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	4b9c      	ldr	r3, [pc, #624]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001060:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				slaveStr.TranBuff[1] = 0x03;					// 功能码
 8001064:	4b9a      	ldr	r3, [pc, #616]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001066:	2203      	movs	r2, #3
 8001068:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
				slaveStr.TranBuff[2] = nRegNum * 2;				// 返回字节数
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	005b      	lsls	r3, r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b97      	ldr	r3, [pc, #604]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001074:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83

				// 填充寄存器数据到响应缓存
				for (iCpy = 0; iCpy < nRegNum; iCpy++) {
 8001078:	2300      	movs	r3, #0
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	e026      	b.n	80010cc <ProcessFuncNum_RecvFromPLC+0xe4>
					slaveStr.TranBuff[3 + iCpy * 2] = slaveStr.ReadRegsGroup[nRegStartIdx + iCpy] >> 8;
 800107e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4413      	add	r3, r2
 8001086:	4a92      	ldr	r2, [pc, #584]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001088:	3384      	adds	r3, #132	@ 0x84
 800108a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800108e:	0a1b      	lsrs	r3, r3, #8
 8001090:	b29a      	uxth	r2, r3
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	3303      	adds	r3, #3
 8001098:	b2d1      	uxtb	r1, r2
 800109a:	4a8d      	ldr	r2, [pc, #564]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800109c:	4413      	add	r3, r2
 800109e:	460a      	mov	r2, r1
 80010a0:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
					slaveStr.TranBuff[4 + iCpy * 2]= slaveStr.ReadRegsGroup[nRegStartIdx + iCpy];
 80010a4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4413      	add	r3, r2
 80010ac:	4a88      	ldr	r2, [pc, #544]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80010ae:	3384      	adds	r3, #132	@ 0x84
 80010b0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	3302      	adds	r3, #2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	b2d1      	uxtb	r1, r2
 80010bc:	4a84      	ldr	r2, [pc, #528]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80010be:	4413      	add	r3, r2
 80010c0:	460a      	mov	r2, r1
 80010c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				for (iCpy = 0; iCpy < nRegNum; iCpy++) {
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	3301      	adds	r3, #1
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	79fa      	ldrb	r2, [r7, #7]
 80010ce:	787b      	ldrb	r3, [r7, #1]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3d4      	bcc.n	800107e <ProcessFuncNum_RecvFromPLC+0x96>
				}

				// 计算发送长度（地址+功能码+字节数+数据+CRC）
				slaveStr.trsCnt = nRegNum * 2 + 5;
 80010d4:	787b      	ldrb	r3, [r7, #1]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	3305      	adds	r3, #5
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4b7c      	ldr	r3, [pc, #496]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80010e0:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				// 计算 CRC
				slaveStr.localCRCValue = CRCCalc(slaveStr.TranBuff, slaveStr.trsCnt - 2);
 80010e4:	4b7a      	ldr	r3, [pc, #488]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80010e6:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80010ea:	3b02      	subs	r3, #2
 80010ec:	b29b      	uxth	r3, r3
 80010ee:	4619      	mov	r1, r3
 80010f0:	4878      	ldr	r0, [pc, #480]	@ (80012d4 <ProcessFuncNum_RecvFromPLC+0x2ec>)
 80010f2:	f7ff fe95 	bl	8000e20 <CRCCalc>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	4b75      	ldr	r3, [pc, #468]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80010fc:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
				// 填充 CRC
				slaveStr.TranBuff[slaveStr.trsCnt - 2] = slaveStr.localCRCValue;
 8001100:	4b73      	ldr	r3, [pc, #460]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001102:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 8001106:	4b72      	ldr	r3, [pc, #456]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001108:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800110c:	3b02      	subs	r3, #2
 800110e:	b2d1      	uxtb	r1, r2
 8001110:	4a6f      	ldr	r2, [pc, #444]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001112:	4413      	add	r3, r2
 8001114:	460a      	mov	r2, r1
 8001116:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				slaveStr.TranBuff[slaveStr.trsCnt - 1] = slaveStr.localCRCValue >> 8;
 800111a:	4b6d      	ldr	r3, [pc, #436]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800111c:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001120:	0a1b      	lsrs	r3, r3, #8
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b6a      	ldr	r3, [pc, #424]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001126:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800112a:	3b01      	subs	r3, #1
 800112c:	b2d1      	uxtb	r1, r2
 800112e:	4a68      	ldr	r2, [pc, #416]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001130:	4413      	add	r3, r2
 8001132:	460a      	mov	r2, r1
 8001134:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001138:	4b67      	ldr	r3, [pc, #412]	@ (80012d8 <ProcessFuncNum_RecvFromPLC+0x2f0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	4618      	mov	r0, r3
 8001142:	f004 fc2f 	bl	80059a4 <osSemaphoreAcquire>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10f      	bne.n	800116c <ProcessFuncNum_RecvFromPLC+0x184>
					// 发送响应
					HAL_UART_Transmit_DMA(&huart1, slaveStr.TranBuff, slaveStr.trsCnt);
 800114c:	4b60      	ldr	r3, [pc, #384]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800114e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001152:	461a      	mov	r2, r3
 8001154:	495f      	ldr	r1, [pc, #380]	@ (80012d4 <ProcessFuncNum_RecvFromPLC+0x2ec>)
 8001156:	4861      	ldr	r0, [pc, #388]	@ (80012dc <ProcessFuncNum_RecvFromPLC+0x2f4>)
 8001158:	f003 f9fc 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(10);
 800115c:	200a      	movs	r0, #10
 800115e:	f004 fb57 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 8001162:	4b5d      	ldr	r3, [pc, #372]	@ (80012d8 <ProcessFuncNum_RecvFromPLC+0x2f0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f004 fc82 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}

				slaveStr.trsCnt = 0x00;
 800116c:	4b58      	ldr	r3, [pc, #352]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
			}
			else {
				// 地址越界，返回错误
				CommuErrorTrs(slaveStr.RecvBuff[1], 0x02);
			}
			break;
 8001174:	e191      	b.n	800149a <ProcessFuncNum_RecvFromPLC+0x4b2>
				CommuErrorTrs(slaveStr.RecvBuff[1], 0x02);
 8001176:	4b56      	ldr	r3, [pc, #344]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001178:	789b      	ldrb	r3, [r3, #2]
 800117a:	2102      	movs	r1, #2
 800117c:	4618      	mov	r0, r3
 800117e:	f000 f9a1 	bl	80014c4 <CommuErrorTrs>
			break;
 8001182:	e18a      	b.n	800149a <ProcessFuncNum_RecvFromPLC+0x4b2>

		// -------------------- 0x06 写单个寄存器 --------------------
		case 0x06:
			nRegStartIdx = nRegStartAddr - AS_SLAVE_WRITE_REG_BASE_ADDR;	// 基于读寄存器基地址计算数组下标
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 800118a:	b29b      	uxth	r3, r3
 800118c:	80bb      	strh	r3, [r7, #4]
			REC_CTRL_ARRAY_IDX = nRegStartIdx;		// 方便后面控制
 800118e:	88bb      	ldrh	r3, [r7, #4]
 8001190:	b2da      	uxtb	r2, r3
 8001192:	4b53      	ldr	r3, [pc, #332]	@ (80012e0 <ProcessFuncNum_RecvFromPLC+0x2f8>)
 8001194:	701a      	strb	r2, [r3, #0]

			// 校验地址是否越界
			if ((nRegStartIdx <= SLAVE_MAX_WRITE_REG_NUMBER) &&
 8001196:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800119a:	2b28      	cmp	r3, #40	@ 0x28
 800119c:	f300 80af 	bgt.w	80012fe <ProcessFuncNum_RecvFromPLC+0x316>
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 80011a6:	f0c0 80aa 	bcc.w	80012fe <ProcessFuncNum_RecvFromPLC+0x316>
					(nRegStartAddr >= AS_SLAVE_WRITE_REG_BASE_ADDR)) {

				// 更新写寄存器数据
				slaveStr.WriteRegsGroup[nRegStartIdx] = (slaveStr.RecvBuff[4] << 8) + slaveStr.RecvBuff[5];
 80011aa:	4b49      	ldr	r3, [pc, #292]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80011ac:	795b      	ldrb	r3, [r3, #5]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	4b47      	ldr	r3, [pc, #284]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80011b4:	799b      	ldrb	r3, [r3, #6]
 80011b6:	4619      	mov	r1, r3
 80011b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011bc:	440a      	add	r2, r1
 80011be:	b291      	uxth	r1, r2
 80011c0:	4a43      	ldr	r2, [pc, #268]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80011c2:	33ac      	adds	r3, #172	@ 0xac
 80011c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

				// 判断是给电机驱动器的命令还是给电缸的命令
				if (REC_CTRL_ARRAY_IDX % 10 < 5) {
 80011c8:	4b45      	ldr	r3, [pc, #276]	@ (80012e0 <ProcessFuncNum_RecvFromPLC+0x2f8>)
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	4b45      	ldr	r3, [pc, #276]	@ (80012e4 <ProcessFuncNum_RecvFromPLC+0x2fc>)
 80011ce:	fba3 1302 	umull	r1, r3, r3, r2
 80011d2:	08d9      	lsrs	r1, r3, #3
 80011d4:	460b      	mov	r3, r1
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	440b      	add	r3, r1
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	2b04      	cmp	r3, #4
 80011e2:	d803      	bhi.n	80011ec <ProcessFuncNum_RecvFromPLC+0x204>
					REC_CTRL_MOTOR_FLAG = 1;
 80011e4:	4b40      	ldr	r3, [pc, #256]	@ (80012e8 <ProcessFuncNum_RecvFromPLC+0x300>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e002      	b.n	80011f2 <ProcessFuncNum_RecvFromPLC+0x20a>
				}
				else {
					REC_CTRL_LOAD_FLAG = 1;
 80011ec:	4b3f      	ldr	r3, [pc, #252]	@ (80012ec <ProcessFuncNum_RecvFromPLC+0x304>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	701a      	strb	r2, [r3, #0]
				}

				// 填充响应帧
				slaveStr.TranBuff[0] = slaveStr.slaveAddress;	// 从机地址
 80011f2:	4b37      	ldr	r3, [pc, #220]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80011f4:	781a      	ldrb	r2, [r3, #0]
 80011f6:	4b36      	ldr	r3, [pc, #216]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80011f8:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				slaveStr.TranBuff[1] = 0x06;	// 功能码
 80011fc:	4b34      	ldr	r3, [pc, #208]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80011fe:	2206      	movs	r2, #6
 8001200:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
				slaveStr.TranBuff[2] = slaveStr.RecvBuff[2];
 8001204:	4b32      	ldr	r3, [pc, #200]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001206:	78da      	ldrb	r2, [r3, #3]
 8001208:	4b31      	ldr	r3, [pc, #196]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800120a:	f883 2083 	strb.w	r2, [r3, #131]	@ 0x83
				slaveStr.TranBuff[3] = slaveStr.RecvBuff[3];
 800120e:	4b30      	ldr	r3, [pc, #192]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001210:	791a      	ldrb	r2, [r3, #4]
 8001212:	4b2f      	ldr	r3, [pc, #188]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001214:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
				slaveStr.TranBuff[4] = slaveStr.WriteRegsGroup[nRegStartIdx] >> 8;
 8001218:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800121c:	4a2c      	ldr	r2, [pc, #176]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800121e:	33ac      	adds	r3, #172	@ 0xac
 8001220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001224:	0a1b      	lsrs	r3, r3, #8
 8001226:	b29b      	uxth	r3, r3
 8001228:	b2da      	uxtb	r2, r3
 800122a:	4b29      	ldr	r3, [pc, #164]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800122c:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85
				slaveStr.TranBuff[5] = slaveStr.WriteRegsGroup[nRegStartIdx];
 8001230:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001234:	4a26      	ldr	r2, [pc, #152]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001236:	33ac      	adds	r3, #172	@ 0xac
 8001238:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800123c:	b2da      	uxtb	r2, r3
 800123e:	4b24      	ldr	r3, [pc, #144]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001240:	f883 2086 	strb.w	r2, [r3, #134]	@ 0x86
				// 计算 CRC
				slaveStr.localCRCValue = CRCCalc(slaveStr.TranBuff, 6);
 8001244:	2106      	movs	r1, #6
 8001246:	4823      	ldr	r0, [pc, #140]	@ (80012d4 <ProcessFuncNum_RecvFromPLC+0x2ec>)
 8001248:	f7ff fdea 	bl	8000e20 <CRCCalc>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b1f      	ldr	r3, [pc, #124]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001252:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
				// 填充 CRC
				slaveStr.TranBuff[6] = slaveStr.localCRCValue;
 8001256:	4b1e      	ldr	r3, [pc, #120]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001258:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800125c:	b2da      	uxtb	r2, r3
 800125e:	4b1c      	ldr	r3, [pc, #112]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001260:	f883 2087 	strb.w	r2, [r3, #135]	@ 0x87
				slaveStr.TranBuff[7] = slaveStr.localCRCValue >> 8;
 8001264:	4b1a      	ldr	r3, [pc, #104]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001266:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800126a:	0a1b      	lsrs	r3, r3, #8
 800126c:	b29b      	uxth	r3, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	4b17      	ldr	r3, [pc, #92]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001272:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

				// 校验回声数据
				if ((slaveStr.TranBuff[6] == slaveStr.RecvBuff[6]) &&
 8001276:	4b16      	ldr	r3, [pc, #88]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001278:	f893 2087 	ldrb.w	r2, [r3, #135]	@ 0x87
 800127c:	4b14      	ldr	r3, [pc, #80]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800127e:	79db      	ldrb	r3, [r3, #7]
 8001280:	429a      	cmp	r2, r3
 8001282:	d135      	bne.n	80012f0 <ProcessFuncNum_RecvFromPLC+0x308>
					(slaveStr.TranBuff[7] == slaveStr.RecvBuff[7])) {
 8001284:	4b12      	ldr	r3, [pc, #72]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 8001286:	f893 2088 	ldrb.w	r2, [r3, #136]	@ 0x88
 800128a:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 800128c:	7a1b      	ldrb	r3, [r3, #8]
				if ((slaveStr.TranBuff[6] == slaveStr.RecvBuff[6]) &&
 800128e:	429a      	cmp	r2, r3
 8001290:	d12e      	bne.n	80012f0 <ProcessFuncNum_RecvFromPLC+0x308>

					if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <ProcessFuncNum_RecvFromPLC+0x2f0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f04f 31ff 	mov.w	r1, #4294967295
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fb82 	bl	80059a4 <osSemaphoreAcquire>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10f      	bne.n	80012c6 <ProcessFuncNum_RecvFromPLC+0x2de>
						// 发送响应
						HAL_UART_Transmit_DMA(&huart1, slaveStr.TranBuff, slaveStr.trsCnt);
 80012a6:	4b0a      	ldr	r3, [pc, #40]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80012a8:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80012ac:	461a      	mov	r2, r3
 80012ae:	4909      	ldr	r1, [pc, #36]	@ (80012d4 <ProcessFuncNum_RecvFromPLC+0x2ec>)
 80012b0:	480a      	ldr	r0, [pc, #40]	@ (80012dc <ProcessFuncNum_RecvFromPLC+0x2f4>)
 80012b2:	f003 f94f 	bl	8004554 <HAL_UART_Transmit_DMA>
						osDelay(10);
 80012b6:	200a      	movs	r0, #10
 80012b8:	f004 faaa 	bl	8005810 <osDelay>
						osSemaphoreRelease(frameSendSemaphoreHandle);
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <ProcessFuncNum_RecvFromPLC+0x2f0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f004 fbd5 	bl	8005a70 <osSemaphoreRelease>
					}
					else {
							// 处理信号量获取失败的情况（如记录错误）
					}

					slaveStr.trsCnt = 0x00;
 80012c6:	4b02      	ldr	r3, [pc, #8]	@ (80012d0 <ProcessFuncNum_RecvFromPLC+0x2e8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
				if ((slaveStr.TranBuff[6] == slaveStr.RecvBuff[6]) &&
 80012ce:	e01d      	b.n	800130c <ProcessFuncNum_RecvFromPLC+0x324>
 80012d0:	20000160 	.word	0x20000160
 80012d4:	200001e1 	.word	0x200001e1
 80012d8:	20000320 	.word	0x20000320
 80012dc:	20000408 	.word	0x20000408
 80012e0:	2000030a 	.word	0x2000030a
 80012e4:	cccccccd 	.word	0xcccccccd
 80012e8:	20000308 	.word	0x20000308
 80012ec:	20000309 	.word	0x20000309
				}
				else {
					CommuErrorTrs(slaveStr.RecvBuff[1], 0x03);	// 写数据错误
 80012f0:	4b6c      	ldr	r3, [pc, #432]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 80012f2:	789b      	ldrb	r3, [r3, #2]
 80012f4:	2103      	movs	r1, #3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f8e4 	bl	80014c4 <CommuErrorTrs>
				if ((slaveStr.TranBuff[6] == slaveStr.RecvBuff[6]) &&
 80012fc:	e006      	b.n	800130c <ProcessFuncNum_RecvFromPLC+0x324>
				}
			}
			else {
				CommuErrorTrs(slaveStr.RecvBuff[1], 0x02);	// 地址越界，返回错误
 80012fe:	4b69      	ldr	r3, [pc, #420]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	2102      	movs	r1, #2
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f8dd 	bl	80014c4 <CommuErrorTrs>
			}
			break;
 800130a:	e0c6      	b.n	800149a <ProcessFuncNum_RecvFromPLC+0x4b2>
 800130c:	e0c5      	b.n	800149a <ProcessFuncNum_RecvFromPLC+0x4b2>

		// -------------------- 0x10 写多个寄存器 --------------------
		case 0x10:
			nRegStartIdx = nRegStartAddr - AS_SLAVE_WRITE_REG_BASE_ADDR;	// 基于读寄存器基地址计算数组下标
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	f503 43e0 	add.w	r3, r3, #28672	@ 0x7000
 8001314:	b29b      	uxth	r3, r3
 8001316:	80bb      	strh	r3, [r7, #4]
			REC_CTRL_ARRAY_IDX = nRegStartIdx % 10;		// 方便后面控制，起始下标为3或4
 8001318:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800131c:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <ProcessFuncNum_RecvFromPLC+0x4c0>)
 800131e:	fb83 1302 	smull	r1, r3, r3, r2
 8001322:	1099      	asrs	r1, r3, #2
 8001324:	17d3      	asrs	r3, r2, #31
 8001326:	1ac9      	subs	r1, r1, r3
 8001328:	460b      	mov	r3, r1
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	b21b      	sxth	r3, r3
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b5d      	ldr	r3, [pc, #372]	@ (80014ac <ProcessFuncNum_RecvFromPLC+0x4c4>)
 8001338:	701a      	strb	r2, [r3, #0]

			nRegNum = (slaveStr.RecvBuff[4] << 8) + slaveStr.RecvBuff[5];	// 计算寄存器数量
 800133a:	4b5a      	ldr	r3, [pc, #360]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 800133c:	799b      	ldrb	r3, [r3, #6]
 800133e:	707b      	strb	r3, [r7, #1]

			// 校验地址和数量是否越界
			if ((nRegStartIdx + nRegNum <= SLAVE_MAX_WRITE_REG_NUMBER) &&
 8001340:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	4413      	add	r3, r2
 8001348:	2b28      	cmp	r3, #40	@ 0x28
 800134a:	f300 8098 	bgt.w	800147e <ProcessFuncNum_RecvFromPLC+0x496>
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	f5b3 4f10 	cmp.w	r3, #36864	@ 0x9000
 8001354:	f0c0 8093 	bcc.w	800147e <ProcessFuncNum_RecvFromPLC+0x496>
					(nRegStartAddr >= AS_SLAVE_WRITE_REG_BASE_ADDR)) {
				// 更新写寄存器数据
				for (iCpy = 0; iCpy < nRegNum; iCpy++) {
 8001358:	2300      	movs	r3, #0
 800135a:	71fb      	strb	r3, [r7, #7]
 800135c:	e01b      	b.n	8001396 <ProcessFuncNum_RecvFromPLC+0x3ae>
					slaveStr.WriteRegsGroup[nRegStartIdx + iCpy] =
						(slaveStr.RecvBuff[7 + iCpy * 2] << 8) + slaveStr.RecvBuff[8 + iCpy * 2];
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	3307      	adds	r3, #7
 8001364:	4a4f      	ldr	r2, [pc, #316]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001366:	4413      	add	r3, r2
 8001368:	785b      	ldrb	r3, [r3, #1]
 800136a:	021b      	lsls	r3, r3, #8
 800136c:	b29a      	uxth	r2, r3
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	3304      	adds	r3, #4
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	494b      	ldr	r1, [pc, #300]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001376:	440b      	add	r3, r1
 8001378:	785b      	ldrb	r3, [r3, #1]
 800137a:	4618      	mov	r0, r3
					slaveStr.WriteRegsGroup[nRegStartIdx + iCpy] =
 800137c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	440b      	add	r3, r1
						(slaveStr.RecvBuff[7 + iCpy * 2] << 8) + slaveStr.RecvBuff[8 + iCpy * 2];
 8001384:	4402      	add	r2, r0
 8001386:	b291      	uxth	r1, r2
					slaveStr.WriteRegsGroup[nRegStartIdx + iCpy] =
 8001388:	4a46      	ldr	r2, [pc, #280]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 800138a:	33ac      	adds	r3, #172	@ 0xac
 800138c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for (iCpy = 0; iCpy < nRegNum; iCpy++) {
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3301      	adds	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	79fa      	ldrb	r2, [r7, #7]
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3df      	bcc.n	800135e <ProcessFuncNum_RecvFromPLC+0x376>
				}
				REC_CTRL_MOTOR_FLAG = 1;		// 去改电机驱动器的配置
 800139e:	4b44      	ldr	r3, [pc, #272]	@ (80014b0 <ProcessFuncNum_RecvFromPLC+0x4c8>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]

				// 填充响应帧（回声数据：从机地址、功能码、起始地址、寄存器数量）
				for (iCpy = 0; iCpy < uart1_rx_len - 2; iCpy++) {
 80013a4:	2300      	movs	r3, #0
 80013a6:	71fb      	strb	r3, [r7, #7]
 80013a8:	e00c      	b.n	80013c4 <ProcessFuncNum_RecvFromPLC+0x3dc>
					slaveStr.TranBuff[iCpy] = slaveStr.RecvBuff[iCpy];
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	493d      	ldr	r1, [pc, #244]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 80013b0:	440a      	add	r2, r1
 80013b2:	7851      	ldrb	r1, [r2, #1]
 80013b4:	4a3b      	ldr	r2, [pc, #236]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 80013b6:	4413      	add	r3, r2
 80013b8:	460a      	mov	r2, r1
 80013ba:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				for (iCpy = 0; iCpy < uart1_rx_len - 2; iCpy++) {
 80013be:	79fb      	ldrb	r3, [r7, #7]
 80013c0:	3301      	adds	r3, #1
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	79fa      	ldrb	r2, [r7, #7]
 80013c6:	4b3b      	ldr	r3, [pc, #236]	@ (80014b4 <ProcessFuncNum_RecvFromPLC+0x4cc>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	3b02      	subs	r3, #2
 80013ce:	429a      	cmp	r2, r3
 80013d0:	dbeb      	blt.n	80013aa <ProcessFuncNum_RecvFromPLC+0x3c2>
				}
				slaveStr.trsCnt = slaveStr.recCnt - 1 - nRegNum * 2;
 80013d2:	4b34      	ldr	r3, [pc, #208]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 80013d4:	f893 2102 	ldrb.w	r2, [r3, #258]	@ 0x102
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	3b01      	subs	r3, #1
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4b2f      	ldr	r3, [pc, #188]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 80013e8:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104

				// 计算 CRC
				slaveStr.localCRCValue = CRCCalc(slaveStr.TranBuff, slaveStr.trsCnt - 2);
 80013ec:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 80013ee:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80013f2:	3b02      	subs	r3, #2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	4619      	mov	r1, r3
 80013f8:	482f      	ldr	r0, [pc, #188]	@ (80014b8 <ProcessFuncNum_RecvFromPLC+0x4d0>)
 80013fa:	f7ff fd11 	bl	8000e20 <CRCCalc>
 80013fe:	4603      	mov	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	4b28      	ldr	r3, [pc, #160]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001404:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
				// 填充 CRC
				slaveStr.TranBuff[slaveStr.trsCnt - 2] = slaveStr.localCRCValue;
 8001408:	4b26      	ldr	r3, [pc, #152]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 800140a:	f8b3 2106 	ldrh.w	r2, [r3, #262]	@ 0x106
 800140e:	4b25      	ldr	r3, [pc, #148]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001410:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001414:	3b02      	subs	r3, #2
 8001416:	b2d1      	uxtb	r1, r2
 8001418:	4a22      	ldr	r2, [pc, #136]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 800141a:	4413      	add	r3, r2
 800141c:	460a      	mov	r2, r1
 800141e:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
				slaveStr.TranBuff[slaveStr.trsCnt - 1] = slaveStr.localCRCValue >> 8;
 8001422:	4b20      	ldr	r3, [pc, #128]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001424:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001428:	0a1b      	lsrs	r3, r3, #8
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b1d      	ldr	r3, [pc, #116]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 800142e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8001432:	3b01      	subs	r3, #1
 8001434:	b2d1      	uxtb	r1, r2
 8001436:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001438:	4413      	add	r3, r2
 800143a:	460a      	mov	r2, r1
 800143c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81


				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001440:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <ProcessFuncNum_RecvFromPLC+0x4d4>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	4618      	mov	r0, r3
 800144a:	f004 faab 	bl	80059a4 <osSemaphoreAcquire>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d10f      	bne.n	8001474 <ProcessFuncNum_RecvFromPLC+0x48c>
					// 发送响应
					HAL_UART_Transmit_DMA(&huart1, slaveStr.TranBuff, slaveStr.trsCnt);
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001456:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800145a:	461a      	mov	r2, r3
 800145c:	4916      	ldr	r1, [pc, #88]	@ (80014b8 <ProcessFuncNum_RecvFromPLC+0x4d0>)
 800145e:	4818      	ldr	r0, [pc, #96]	@ (80014c0 <ProcessFuncNum_RecvFromPLC+0x4d8>)
 8001460:	f003 f878 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(10);
 8001464:	200a      	movs	r0, #10
 8001466:	f004 f9d3 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 800146a:	4b14      	ldr	r3, [pc, #80]	@ (80014bc <ProcessFuncNum_RecvFromPLC+0x4d4>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4618      	mov	r0, r3
 8001470:	f004 fafe 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}
				slaveStr.trsCnt = 0x00;
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
			}
			else {
				// 地址越界，返回错误
				CommuErrorTrs(slaveStr.RecvBuff[1], 0x02);
			}
			break;
 800147c:	e00d      	b.n	800149a <ProcessFuncNum_RecvFromPLC+0x4b2>
				CommuErrorTrs(slaveStr.RecvBuff[1], 0x02);
 800147e:	4b09      	ldr	r3, [pc, #36]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 8001480:	789b      	ldrb	r3, [r3, #2]
 8001482:	2102      	movs	r1, #2
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f81d 	bl	80014c4 <CommuErrorTrs>
			break;
 800148a:	e006      	b.n	800149a <ProcessFuncNum_RecvFromPLC+0x4b2>

		// -------------------- 非法功能码 --------------------
		default:
			// 非法功能码，返回错误
			CommuErrorTrs(slaveStr.RecvBuff[1], 0x01);
 800148c:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <ProcessFuncNum_RecvFromPLC+0x4bc>)
 800148e:	789b      	ldrb	r3, [r3, #2]
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f000 f816 	bl	80014c4 <CommuErrorTrs>
			break;
 8001498:	bf00      	nop
	}
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	20000160 	.word	0x20000160
 80014a8:	66666667 	.word	0x66666667
 80014ac:	2000030a 	.word	0x2000030a
 80014b0:	20000308 	.word	0x20000308
 80014b4:	20000324 	.word	0x20000324
 80014b8:	200001e1 	.word	0x200001e1
 80014bc:	20000320 	.word	0x20000320
 80014c0:	20000408 	.word	0x20000408

080014c4 <CommuErrorTrs>:
 * [0x01:非法功能码, 0x02:非法数据地址, 0x03:非法数据值(CRC校验出错、数据值错误)]
 * @param nFuncNum:   功能码
 * @param nErrorType: 错误类型
 *--------------------------------------------------------*/
void CommuErrorTrs(uint8_t nFuncNum, uint8_t nErrorType)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
    slaveStr.TranBuff[0] = slaveStr.slaveAddress;		// 填充从机地址
 80014d4:	4b23      	ldr	r3, [pc, #140]	@ (8001564 <CommuErrorTrs+0xa0>)
 80014d6:	781a      	ldrb	r2, [r3, #0]
 80014d8:	4b22      	ldr	r3, [pc, #136]	@ (8001564 <CommuErrorTrs+0xa0>)
 80014da:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    slaveStr.TranBuff[1] = nFuncNum | 0x80;				// 功能码最高位置1（表示错误响应）
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <CommuErrorTrs+0xa0>)
 80014e8:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    slaveStr.TranBuff[2] = nErrorType;					// 填充错误码
 80014ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <CommuErrorTrs+0xa0>)
 80014ee:	79bb      	ldrb	r3, [r7, #6]
 80014f0:	f882 3083 	strb.w	r3, [r2, #131]	@ 0x83
    slaveStr.localCRCValue = CRCCalc(slaveStr.TranBuff, 3);	// 计算 CRC（前 3 个字节）
 80014f4:	2103      	movs	r1, #3
 80014f6:	481c      	ldr	r0, [pc, #112]	@ (8001568 <CommuErrorTrs+0xa4>)
 80014f8:	f7ff fc92 	bl	8000e20 <CRCCalc>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b18      	ldr	r3, [pc, #96]	@ (8001564 <CommuErrorTrs+0xa0>)
 8001502:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
    slaveStr.TranBuff[3] = slaveStr.localCRCValue;				// 填充 CRC 低字节
 8001506:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <CommuErrorTrs+0xa0>)
 8001508:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b15      	ldr	r3, [pc, #84]	@ (8001564 <CommuErrorTrs+0xa0>)
 8001510:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
    slaveStr.TranBuff[4] = slaveStr.localCRCValue >> 8;		// 填充 CRC 高字节
 8001514:	4b13      	ldr	r3, [pc, #76]	@ (8001564 <CommuErrorTrs+0xa0>)
 8001516:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 800151a:	0a1b      	lsrs	r3, r3, #8
 800151c:	b29b      	uxth	r3, r3
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <CommuErrorTrs+0xa0>)
 8001522:	f883 2085 	strb.w	r2, [r3, #133]	@ 0x85

//    HAL_UART_Transmit_DMA(&huart1, slaveStr.TranBuff, 5);

	// 等待上一帧发送完成（获取信号量）
//	osStatus_t status = osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever);
	if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001526:	4b11      	ldr	r3, [pc, #68]	@ (800156c <CommuErrorTrs+0xa8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f04f 31ff 	mov.w	r1, #4294967295
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fa38 	bl	80059a4 <osSemaphoreAcquire>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d10c      	bne.n	8001554 <CommuErrorTrs+0x90>
		// 发送响应
		HAL_UART_Transmit_DMA(&huart1, slaveStr.TranBuff, 5);
 800153a:	2205      	movs	r2, #5
 800153c:	490a      	ldr	r1, [pc, #40]	@ (8001568 <CommuErrorTrs+0xa4>)
 800153e:	480c      	ldr	r0, [pc, #48]	@ (8001570 <CommuErrorTrs+0xac>)
 8001540:	f003 f808 	bl	8004554 <HAL_UART_Transmit_DMA>
		osDelay(5);
 8001544:	2005      	movs	r0, #5
 8001546:	f004 f963 	bl	8005810 <osDelay>
		osSemaphoreRelease(frameSendSemaphoreHandle);
 800154a:	4b08      	ldr	r3, [pc, #32]	@ (800156c <CommuErrorTrs+0xa8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f004 fa8e 	bl	8005a70 <osSemaphoreRelease>
	}
	else {
			// 处理信号量获取失败的情况（如记录错误）
	}
	slaveStr.trsCnt = 0x00;
 8001554:	4b03      	ldr	r3, [pc, #12]	@ (8001564 <CommuErrorTrs+0xa0>)
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000160 	.word	0x20000160
 8001568:	200001e1 	.word	0x200001e1
 800156c:	20000320 	.word	0x20000320
 8001570:	20000408 	.word	0x20000408

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157a:	4b20      	ldr	r3, [pc, #128]	@ (80015fc <MX_DMA_Init+0x88>)
 800157c:	695b      	ldr	r3, [r3, #20]
 800157e:	4a1f      	ldr	r2, [pc, #124]	@ (80015fc <MX_DMA_Init+0x88>)
 8001580:	f043 0301 	orr.w	r3, r3, #1
 8001584:	6153      	str	r3, [r2, #20]
 8001586:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <MX_DMA_Init+0x88>)
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2105      	movs	r1, #5
 8001596:	200c      	movs	r0, #12
 8001598:	f001 fafd 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800159c:	200c      	movs	r0, #12
 800159e:	f001 fb16 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2105      	movs	r1, #5
 80015a6:	200d      	movs	r0, #13
 80015a8:	f001 faf5 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80015ac:	200d      	movs	r0, #13
 80015ae:	f001 fb0e 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2105      	movs	r1, #5
 80015b6:	200e      	movs	r0, #14
 80015b8:	f001 faed 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80015bc:	200e      	movs	r0, #14
 80015be:	f001 fb06 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2105      	movs	r1, #5
 80015c6:	200f      	movs	r0, #15
 80015c8:	f001 fae5 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80015cc:	200f      	movs	r0, #15
 80015ce:	f001 fafe 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2105      	movs	r1, #5
 80015d6:	2010      	movs	r0, #16
 80015d8:	f001 fadd 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80015dc:	2010      	movs	r0, #16
 80015de:	f001 faf6 	bl	8002bce <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2105      	movs	r1, #5
 80015e6:	2011      	movs	r0, #17
 80015e8:	f001 fad5 	bl	8002b96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80015ec:	2011      	movs	r0, #17
 80015ee:	f001 faee 	bl	8002bce <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40021000 	.word	0x40021000

08001600 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of frameSendSemaphore */
  frameSendSemaphoreHandle = osSemaphoreNew(1, 1, &frameSendSemaphore_attributes);
 8001604:	4a18      	ldr	r2, [pc, #96]	@ (8001668 <MX_FREERTOS_Init+0x68>)
 8001606:	2101      	movs	r1, #1
 8001608:	2001      	movs	r0, #1
 800160a:	f004 f92f 	bl	800586c <osSemaphoreNew>
 800160e:	4603      	mov	r3, r0
 8001610:	4a16      	ldr	r2, [pc, #88]	@ (800166c <MX_FREERTOS_Init+0x6c>)
 8001612:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of RecvData_Task */
  RecvData_TaskHandle = osThreadNew(Start_RecvData, NULL, &RecvData_Task_attributes);
 8001614:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <MX_FREERTOS_Init+0x70>)
 8001616:	2100      	movs	r1, #0
 8001618:	4816      	ldr	r0, [pc, #88]	@ (8001674 <MX_FREERTOS_Init+0x74>)
 800161a:	f004 f84f 	bl	80056bc <osThreadNew>
 800161e:	4603      	mov	r3, r0
 8001620:	4a15      	ldr	r2, [pc, #84]	@ (8001678 <MX_FREERTOS_Init+0x78>)
 8001622:	6013      	str	r3, [r2, #0]

  /* creation of ProcData_Task */
  ProcData_TaskHandle = osThreadNew(Start_Process_Data, NULL, &ProcData_Task_attributes);
 8001624:	4a15      	ldr	r2, [pc, #84]	@ (800167c <MX_FREERTOS_Init+0x7c>)
 8001626:	2100      	movs	r1, #0
 8001628:	4815      	ldr	r0, [pc, #84]	@ (8001680 <MX_FREERTOS_Init+0x80>)
 800162a:	f004 f847 	bl	80056bc <osThreadNew>
 800162e:	4603      	mov	r3, r0
 8001630:	4a14      	ldr	r2, [pc, #80]	@ (8001684 <MX_FREERTOS_Init+0x84>)
 8001632:	6013      	str	r3, [r2, #0]

  /* creation of MoniMotor_Task */
  MoniMotor_TaskHandle = osThreadNew(Start_MonitorMotor_Data, NULL, &MoniMotor_Task_attributes);
 8001634:	4a14      	ldr	r2, [pc, #80]	@ (8001688 <MX_FREERTOS_Init+0x88>)
 8001636:	2100      	movs	r1, #0
 8001638:	4814      	ldr	r0, [pc, #80]	@ (800168c <MX_FREERTOS_Init+0x8c>)
 800163a:	f004 f83f 	bl	80056bc <osThreadNew>
 800163e:	4603      	mov	r3, r0
 8001640:	4a13      	ldr	r2, [pc, #76]	@ (8001690 <MX_FREERTOS_Init+0x90>)
 8001642:	6013      	str	r3, [r2, #0]

  /* creation of Ctrl_Load_Task */
  Ctrl_Load_TaskHandle = osThreadNew(Start_Control_Load, NULL, &Ctrl_Load_Task_attributes);
 8001644:	4a13      	ldr	r2, [pc, #76]	@ (8001694 <MX_FREERTOS_Init+0x94>)
 8001646:	2100      	movs	r1, #0
 8001648:	4813      	ldr	r0, [pc, #76]	@ (8001698 <MX_FREERTOS_Init+0x98>)
 800164a:	f004 f837 	bl	80056bc <osThreadNew>
 800164e:	4603      	mov	r3, r0
 8001650:	4a12      	ldr	r2, [pc, #72]	@ (800169c <MX_FREERTOS_Init+0x9c>)
 8001652:	6013      	str	r3, [r2, #0]

  /* creation of Main_Ctrl_Task */
  Main_Ctrl_TaskHandle = osThreadNew(Start_Main_Control, NULL, &Main_Ctrl_Task_attributes);
 8001654:	4a12      	ldr	r2, [pc, #72]	@ (80016a0 <MX_FREERTOS_Init+0xa0>)
 8001656:	2100      	movs	r1, #0
 8001658:	4812      	ldr	r0, [pc, #72]	@ (80016a4 <MX_FREERTOS_Init+0xa4>)
 800165a:	f004 f82f 	bl	80056bc <osThreadNew>
 800165e:	4603      	mov	r3, r0
 8001660:	4a11      	ldr	r2, [pc, #68]	@ (80016a8 <MX_FREERTOS_Init+0xa8>)
 8001662:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}
 8001668:	08009018 	.word	0x08009018
 800166c:	20000320 	.word	0x20000320
 8001670:	08008f64 	.word	0x08008f64
 8001674:	080016ad 	.word	0x080016ad
 8001678:	2000030c 	.word	0x2000030c
 800167c:	08008f88 	.word	0x08008f88
 8001680:	08001845 	.word	0x08001845
 8001684:	20000310 	.word	0x20000310
 8001688:	08008fac 	.word	0x08008fac
 800168c:	08001889 	.word	0x08001889
 8001690:	20000314 	.word	0x20000314
 8001694:	08008fd0 	.word	0x08008fd0
 8001698:	080019ad 	.word	0x080019ad
 800169c:	20000318 	.word	0x20000318
 80016a0:	08008ff4 	.word	0x08008ff4
 80016a4:	08001d1d 	.word	0x08001d1d
 80016a8:	2000031c 	.word	0x2000031c

080016ac <Start_RecvData>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Start_RecvData */
void Start_RecvData(void *argument)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_RecvData */
  /* Infinite loop */
  for(;;)
  {
	  // UART1
	  if (1 == UART1_RX_INT_FLAG) {
 80016b4:	4b4e      	ldr	r3, [pc, #312]	@ (80017f0 <Start_RecvData+0x144>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d12f      	bne.n	800171c <Start_RecvData+0x70>
		  if (uart1_rx_len > 0 && uart1_rx_len <= UART1_RX_BUF_SIZE) {
 80016bc:	4b4d      	ldr	r3, [pc, #308]	@ (80017f4 <Start_RecvData+0x148>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d017      	beq.n	80016f6 <Start_RecvData+0x4a>
 80016c6:	4b4b      	ldr	r3, [pc, #300]	@ (80017f4 <Start_RecvData+0x148>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	2b80      	cmp	r3, #128	@ 0x80
 80016ce:	d812      	bhi.n	80016f6 <Start_RecvData+0x4a>
			  memcpy(slaveStr.RecvBuff, uart1_rx_buf, uart1_rx_len);
 80016d0:	4b48      	ldr	r3, [pc, #288]	@ (80017f4 <Start_RecvData+0x148>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4947      	ldr	r1, [pc, #284]	@ (80017f8 <Start_RecvData+0x14c>)
 80016da:	4848      	ldr	r0, [pc, #288]	@ (80017fc <Start_RecvData+0x150>)
 80016dc:	f007 fa5a 	bl	8008b94 <memcpy>
			  slaveStr.recCnt = uart1_rx_len;
 80016e0:	4b44      	ldr	r3, [pc, #272]	@ (80017f4 <Start_RecvData+0x148>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b46      	ldr	r3, [pc, #280]	@ (8001800 <Start_RecvData+0x154>)
 80016e8:	f883 2102 	strb.w	r2, [r3, #258]	@ 0x102
			  slaveStr.recFrameFlag = 1;
 80016ec:	4b44      	ldr	r3, [pc, #272]	@ (8001800 <Start_RecvData+0x154>)
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
 80016f4:	e002      	b.n	80016fc <Start_RecvData+0x50>
		  }
		  else {
			  uart1_rx_len = 0;
 80016f6:	4b3f      	ldr	r3, [pc, #252]	@ (80017f4 <Start_RecvData+0x148>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_RX_BUF_SIZE);
 80016fc:	2280      	movs	r2, #128	@ 0x80
 80016fe:	493e      	ldr	r1, [pc, #248]	@ (80017f8 <Start_RecvData+0x14c>)
 8001700:	4840      	ldr	r0, [pc, #256]	@ (8001804 <Start_RecvData+0x158>)
 8001702:	f003 f816 	bl	8004732 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001706:	4b40      	ldr	r3, [pc, #256]	@ (8001808 <Start_RecvData+0x15c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b3e      	ldr	r3, [pc, #248]	@ (8001808 <Start_RecvData+0x15c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0204 	bic.w	r2, r2, #4
 8001714:	601a      	str	r2, [r3, #0]

		  UART1_RX_INT_FLAG = 0;
 8001716:	4b36      	ldr	r3, [pc, #216]	@ (80017f0 <Start_RecvData+0x144>)
 8001718:	2200      	movs	r2, #0
 800171a:	701a      	strb	r2, [r3, #0]
	  }

	  // UART2
	  if (1 == UART2_RX_INT_FLAG) {
 800171c:	4b3b      	ldr	r3, [pc, #236]	@ (800180c <Start_RecvData+0x160>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b01      	cmp	r3, #1
 8001722:	d12f      	bne.n	8001784 <Start_RecvData+0xd8>
		  if (uart2_rx_len > 0 && uart2_rx_len <= UART2_RX_BUF_SIZE) {
 8001724:	4b3a      	ldr	r3, [pc, #232]	@ (8001810 <Start_RecvData+0x164>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d017      	beq.n	800175e <Start_RecvData+0xb2>
 800172e:	4b38      	ldr	r3, [pc, #224]	@ (8001810 <Start_RecvData+0x164>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	2b40      	cmp	r3, #64	@ 0x40
 8001736:	d812      	bhi.n	800175e <Start_RecvData+0xb2>
			  memcpy(motorDriverStr.RecvBuff, uart2_rx_buf, uart2_rx_len);
 8001738:	4b35      	ldr	r3, [pc, #212]	@ (8001810 <Start_RecvData+0x164>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	461a      	mov	r2, r3
 8001740:	4934      	ldr	r1, [pc, #208]	@ (8001814 <Start_RecvData+0x168>)
 8001742:	4835      	ldr	r0, [pc, #212]	@ (8001818 <Start_RecvData+0x16c>)
 8001744:	f007 fa26 	bl	8008b94 <memcpy>
			  motorDriverStr.recCnt = uart2_rx_len;
 8001748:	4b31      	ldr	r3, [pc, #196]	@ (8001810 <Start_RecvData+0x164>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b33      	ldr	r3, [pc, #204]	@ (800181c <Start_RecvData+0x170>)
 8001750:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			  motorDriverStr.recFrameFlag = 1;
 8001754:	4b31      	ldr	r3, [pc, #196]	@ (800181c <Start_RecvData+0x170>)
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800175c:	e002      	b.n	8001764 <Start_RecvData+0xb8>
		  }
		  else {
			  uart2_rx_len = 0;
 800175e:	4b2c      	ldr	r3, [pc, #176]	@ (8001810 <Start_RecvData+0x164>)
 8001760:	2200      	movs	r2, #0
 8001762:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_RX_BUF_SIZE);
 8001764:	2240      	movs	r2, #64	@ 0x40
 8001766:	492b      	ldr	r1, [pc, #172]	@ (8001814 <Start_RecvData+0x168>)
 8001768:	482d      	ldr	r0, [pc, #180]	@ (8001820 <Start_RecvData+0x174>)
 800176a:	f002 ffe2 	bl	8004732 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 800176e:	4b2d      	ldr	r3, [pc, #180]	@ (8001824 <Start_RecvData+0x178>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b2b      	ldr	r3, [pc, #172]	@ (8001824 <Start_RecvData+0x178>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0204 	bic.w	r2, r2, #4
 800177c:	601a      	str	r2, [r3, #0]

		  UART2_RX_INT_FLAG = 0;
 800177e:	4b23      	ldr	r3, [pc, #140]	@ (800180c <Start_RecvData+0x160>)
 8001780:	2200      	movs	r2, #0
 8001782:	701a      	strb	r2, [r3, #0]
	  }

	  // UART3
	  if (1 == UART3_RX_INT_FLAG) {
 8001784:	4b28      	ldr	r3, [pc, #160]	@ (8001828 <Start_RecvData+0x17c>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b01      	cmp	r3, #1
 800178a:	d12d      	bne.n	80017e8 <Start_RecvData+0x13c>
		  if (uart3_rx_len > 0 && uart3_rx_len <= UART3_RX_BUF_SIZE) {
 800178c:	4b27      	ldr	r3, [pc, #156]	@ (800182c <Start_RecvData+0x180>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b2db      	uxtb	r3, r3
 8001792:	2b00      	cmp	r3, #0
 8001794:	d015      	beq.n	80017c2 <Start_RecvData+0x116>
 8001796:	4b25      	ldr	r3, [pc, #148]	@ (800182c <Start_RecvData+0x180>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b10      	cmp	r3, #16
 800179e:	d810      	bhi.n	80017c2 <Start_RecvData+0x116>
			  memcpy(loadStr.RecvBuff, uart3_rx_buf, uart3_rx_len);
 80017a0:	4b22      	ldr	r3, [pc, #136]	@ (800182c <Start_RecvData+0x180>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	461a      	mov	r2, r3
 80017a8:	4921      	ldr	r1, [pc, #132]	@ (8001830 <Start_RecvData+0x184>)
 80017aa:	4822      	ldr	r0, [pc, #136]	@ (8001834 <Start_RecvData+0x188>)
 80017ac:	f007 f9f2 	bl	8008b94 <memcpy>
			  loadStr.recCnt = uart3_rx_len;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <Start_RecvData+0x180>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <Start_RecvData+0x18c>)
 80017b8:	745a      	strb	r2, [r3, #17]
			  loadStr.recFrameFlag = 1;
 80017ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <Start_RecvData+0x18c>)
 80017bc:	2201      	movs	r2, #1
 80017be:	749a      	strb	r2, [r3, #18]
 80017c0:	e002      	b.n	80017c8 <Start_RecvData+0x11c>
		  }
		  else {
			  uart3_rx_len = 0;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <Start_RecvData+0x180>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	701a      	strb	r2, [r3, #0]
		  }
		  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, uart3_rx_buf, UART3_RX_BUF_SIZE);
 80017c8:	2210      	movs	r2, #16
 80017ca:	4919      	ldr	r1, [pc, #100]	@ (8001830 <Start_RecvData+0x184>)
 80017cc:	481b      	ldr	r0, [pc, #108]	@ (800183c <Start_RecvData+0x190>)
 80017ce:	f002 ffb0 	bl	8004732 <HAL_UARTEx_ReceiveToIdle_DMA>
		  __HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80017d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <Start_RecvData+0x194>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	4b19      	ldr	r3, [pc, #100]	@ (8001840 <Start_RecvData+0x194>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f022 0204 	bic.w	r2, r2, #4
 80017e0:	601a      	str	r2, [r3, #0]

		  UART3_RX_INT_FLAG = 0;
 80017e2:	4b11      	ldr	r3, [pc, #68]	@ (8001828 <Start_RecvData+0x17c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
	  }


    osDelay(20);
 80017e8:	2014      	movs	r0, #20
 80017ea:	f004 f811 	bl	8005810 <osDelay>
	  if (1 == UART1_RX_INT_FLAG) {
 80017ee:	e761      	b.n	80016b4 <Start_RecvData+0x8>
 80017f0:	20000327 	.word	0x20000327
 80017f4:	20000324 	.word	0x20000324
 80017f8:	20000010 	.word	0x20000010
 80017fc:	20000161 	.word	0x20000161
 8001800:	20000160 	.word	0x20000160
 8001804:	20000408 	.word	0x20000408
 8001808:	200004e0 	.word	0x200004e0
 800180c:	20000328 	.word	0x20000328
 8001810:	20000325 	.word	0x20000325
 8001814:	20000090 	.word	0x20000090
 8001818:	20000125 	.word	0x20000125
 800181c:	20000124 	.word	0x20000124
 8001820:	20000450 	.word	0x20000450
 8001824:	20000568 	.word	0x20000568
 8001828:	20000329 	.word	0x20000329
 800182c:	20000326 	.word	0x20000326
 8001830:	200000d0 	.word	0x200000d0
 8001834:	200000fd 	.word	0x200000fd
 8001838:	200000fc 	.word	0x200000fc
 800183c:	20000498 	.word	0x20000498
 8001840:	200005f0 	.word	0x200005f0

08001844 <Start_Process_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Process_Data */
void Start_Process_Data(void *argument)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Process_Data */
  /* Infinite loop */

  for(;;)
  {
	  if (slaveStr.recFrameFlag) {
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <Start_Process_Data+0x38>)
 800184e:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <Start_Process_Data+0x16>
		  ProcessData_RecvFromPLC();
 8001856:	f7ff fb77 	bl	8000f48 <ProcessData_RecvFromPLC>
	  }

	  if (motorDriverStr.recFrameFlag) {
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <Start_Process_Data+0x3c>)
 800185c:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <Start_Process_Data+0x24>
		  ProcessData_RecvFromMotorDriver();
 8001864:	f7fe ff32 	bl	80006cc <ProcessData_RecvFromMotorDriver>
	  }

	  if (loadStr.recFrameFlag) {
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <Start_Process_Data+0x40>)
 800186a:	7c9b      	ldrb	r3, [r3, #18]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <Start_Process_Data+0x30>
		  ProcessData_RecvFromLoad();
 8001870:	f7fe fcf2 	bl	8000258 <ProcessData_RecvFromLoad>
	  }

    osDelay(20);
 8001874:	2014      	movs	r0, #20
 8001876:	f003 ffcb 	bl	8005810 <osDelay>
	  if (slaveStr.recFrameFlag) {
 800187a:	e7e7      	b.n	800184c <Start_Process_Data+0x8>
 800187c:	20000160 	.word	0x20000160
 8001880:	20000124 	.word	0x20000124
 8001884:	200000fc 	.word	0x200000fc

08001888 <Start_MonitorMotor_Data>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_MonitorMotor_Data */
void Start_MonitorMotor_Data(void *argument)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_MonitorMotor_Data */
  /* Infinite loop */
  for(;;)
  {
//	  osStatus_t status = osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever);
	  switch (MONITORING_MOTOR_FLAG) {
 8001890:	4b3f      	ldr	r3, [pc, #252]	@ (8001990 <Start_MonitorMotor_Data+0x108>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	3b01      	subs	r3, #1
 8001896:	2b03      	cmp	r3, #3
 8001898:	d876      	bhi.n	8001988 <Start_MonitorMotor_Data+0x100>
 800189a:	a201      	add	r2, pc, #4	@ (adr r2, 80018a0 <Start_MonitorMotor_Data+0x18>)
 800189c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a0:	080018b1 	.word	0x080018b1
 80018a4:	080018e7 	.word	0x080018e7
 80018a8:	0800191d 	.word	0x0800191d
 80018ac:	08001953 	.word	0x08001953
	  	  case 1:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 80018b0:	4b38      	ldr	r3, [pc, #224]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f04f 31ff 	mov.w	r1, #4294967295
 80018b8:	4618      	mov	r0, r3
 80018ba:	f004 f873 	bl	80059a4 <osSemaphoreAcquire>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10c      	bne.n	80018de <Start_MonitorMotor_Data+0x56>
					// 发送查询
					HAL_UART_Transmit_DMA(&huart2, send_to_motor[0], 8);
 80018c4:	2208      	movs	r2, #8
 80018c6:	4934      	ldr	r1, [pc, #208]	@ (8001998 <Start_MonitorMotor_Data+0x110>)
 80018c8:	4834      	ldr	r0, [pc, #208]	@ (800199c <Start_MonitorMotor_Data+0x114>)
 80018ca:	f002 fe43 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(10);
 80018ce:	200a      	movs	r0, #10
 80018d0:	f003 ff9e 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f004 f8c9 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}
				MONITORING_MOTOR_FLAG = 0;
 80018de:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <Start_MonitorMotor_Data+0x108>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	701a      	strb	r2, [r3, #0]
	  		  break;
 80018e4:	e050      	b.n	8001988 <Start_MonitorMotor_Data+0x100>

	  	  case 2:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 80018e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f04f 31ff 	mov.w	r1, #4294967295
 80018ee:	4618      	mov	r0, r3
 80018f0:	f004 f858 	bl	80059a4 <osSemaphoreAcquire>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10c      	bne.n	8001914 <Start_MonitorMotor_Data+0x8c>
					// 发送查询
					HAL_UART_Transmit_DMA(&huart2, send_to_motor[1], 8);
 80018fa:	2208      	movs	r2, #8
 80018fc:	4928      	ldr	r1, [pc, #160]	@ (80019a0 <Start_MonitorMotor_Data+0x118>)
 80018fe:	4827      	ldr	r0, [pc, #156]	@ (800199c <Start_MonitorMotor_Data+0x114>)
 8001900:	f002 fe28 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(10);
 8001904:	200a      	movs	r0, #10
 8001906:	f003 ff83 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 800190a:	4b22      	ldr	r3, [pc, #136]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f004 f8ae 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}
				MONITORING_MOTOR_FLAG = 0;
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <Start_MonitorMotor_Data+0x108>)
 8001916:	2200      	movs	r2, #0
 8001918:	701a      	strb	r2, [r3, #0]
			  break;
 800191a:	e035      	b.n	8001988 <Start_MonitorMotor_Data+0x100>

	  	  case 3:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 800191c:	4b1d      	ldr	r3, [pc, #116]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	4618      	mov	r0, r3
 8001926:	f004 f83d 	bl	80059a4 <osSemaphoreAcquire>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10c      	bne.n	800194a <Start_MonitorMotor_Data+0xc2>
					// 发送查询
					HAL_UART_Transmit_DMA(&huart2, send_to_motor[2], 8);
 8001930:	2208      	movs	r2, #8
 8001932:	491c      	ldr	r1, [pc, #112]	@ (80019a4 <Start_MonitorMotor_Data+0x11c>)
 8001934:	4819      	ldr	r0, [pc, #100]	@ (800199c <Start_MonitorMotor_Data+0x114>)
 8001936:	f002 fe0d 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(10);
 800193a:	200a      	movs	r0, #10
 800193c:	f003 ff68 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 8001940:	4b14      	ldr	r3, [pc, #80]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4618      	mov	r0, r3
 8001946:	f004 f893 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}
				MONITORING_MOTOR_FLAG = 0;
 800194a:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <Start_MonitorMotor_Data+0x108>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
			  break;
 8001950:	e01a      	b.n	8001988 <Start_MonitorMotor_Data+0x100>

	  	  case 4:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001952:	4b10      	ldr	r3, [pc, #64]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f04f 31ff 	mov.w	r1, #4294967295
 800195a:	4618      	mov	r0, r3
 800195c:	f004 f822 	bl	80059a4 <osSemaphoreAcquire>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10c      	bne.n	8001980 <Start_MonitorMotor_Data+0xf8>
					// 发送查询
					HAL_UART_Transmit_DMA(&huart2, send_to_motor[3], 8);
 8001966:	2208      	movs	r2, #8
 8001968:	490f      	ldr	r1, [pc, #60]	@ (80019a8 <Start_MonitorMotor_Data+0x120>)
 800196a:	480c      	ldr	r0, [pc, #48]	@ (800199c <Start_MonitorMotor_Data+0x114>)
 800196c:	f002 fdf2 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(10);
 8001970:	200a      	movs	r0, #10
 8001972:	f003 ff4d 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 8001976:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <Start_MonitorMotor_Data+0x10c>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f004 f878 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}
				MONITORING_MOTOR_FLAG = 0;
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <Start_MonitorMotor_Data+0x108>)
 8001982:	2200      	movs	r2, #0
 8001984:	701a      	strb	r2, [r3, #0]
			  break;
 8001986:	bf00      	nop
	  }
    osDelay(20);
 8001988:	2014      	movs	r0, #20
 800198a:	f003 ff41 	bl	8005810 <osDelay>
	  switch (MONITORING_MOTOR_FLAG) {
 800198e:	e77f      	b.n	8001890 <Start_MonitorMotor_Data+0x8>
 8001990:	2000032a 	.word	0x2000032a
 8001994:	20000320 	.word	0x20000320
 8001998:	08008f24 	.word	0x08008f24
 800199c:	20000450 	.word	0x20000450
 80019a0:	08008f2c 	.word	0x08008f2c
 80019a4:	08008f34 	.word	0x08008f34
 80019a8:	08008f3c 	.word	0x08008f3c

080019ac <Start_Control_Load>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Control_Load */
void Start_Control_Load(void *argument)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b094      	sub	sp, #80	@ 0x50
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Control_Load */
  /* Infinite loop */
  for(;;)
  {
	  switch (MONITORING_LOAD_FLAG) {
 80019b4:	4b95      	ldr	r3, [pc, #596]	@ (8001c0c <Start_Control_Load+0x260>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	2b03      	cmp	r3, #3
 80019bc:	f200 819c 	bhi.w	8001cf8 <Start_Control_Load+0x34c>
 80019c0:	a201      	add	r2, pc, #4	@ (adr r2, 80019c8 <Start_Control_Load+0x1c>)
 80019c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019c6:	bf00      	nop
 80019c8:	080019d9 	.word	0x080019d9
 80019cc:	08001a95 	.word	0x08001a95
 80019d0:	08001b51 	.word	0x08001b51
 80019d4:	08001c41 	.word	0x08001c41
		  case 1:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 80019d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001c10 <Start_Control_Load+0x264>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	4618      	mov	r0, r3
 80019e2:	f003 ffdf 	bl	80059a4 <osSemaphoreAcquire>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10c      	bne.n	8001a06 <Start_Control_Load+0x5a>
					HAL_UART_Transmit_DMA(&huart3, send_to_load[0], 8);
 80019ec:	2208      	movs	r2, #8
 80019ee:	4989      	ldr	r1, [pc, #548]	@ (8001c14 <Start_Control_Load+0x268>)
 80019f0:	4889      	ldr	r0, [pc, #548]	@ (8001c18 <Start_Control_Load+0x26c>)
 80019f2:	f002 fdaf 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(40);
 80019f6:	2028      	movs	r0, #40	@ 0x28
 80019f8:	f003 ff0a 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 80019fc:	4b84      	ldr	r3, [pc, #528]	@ (8001c10 <Start_Control_Load+0x264>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f004 f835 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误�?
				}

				if (1 == slaveStr.ReadRegsGroup[0]) {
 8001a06:	4b85      	ldr	r3, [pc, #532]	@ (8001c1c <Start_Control_Load+0x270>)
 8001a08:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d13d      	bne.n	8001a8c <Start_Control_Load+0xe0>
					if (slaveStr.ReadRegsGroup[6] > 2600) {
 8001a10:	4b82      	ldr	r3, [pc, #520]	@ (8001c1c <Start_Control_Load+0x270>)
 8001a12:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 8001a16:	f640 2228 	movw	r2, #2600	@ 0xa28
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d917      	bls.n	8001a4e <Start_Control_Load+0xa2>
						uint8_t send_data[8] = {0x01, 0x06, 0x00, 0x36, 0x00, 0x28,};
 8001a1e:	4a80      	ldr	r2, [pc, #512]	@ (8001c20 <Start_Control_Load+0x274>)
 8001a20:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a28:	6018      	str	r0, [r3, #0]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	8019      	strh	r1, [r3, #0]
 8001a2e:	3302      	adds	r3, #2
 8001a30:	0c0a      	lsrs	r2, r1, #16
 8001a32:	701a      	strb	r2, [r3, #0]
 8001a34:	2300      	movs	r3, #0
 8001a36:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001a3a:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001a3e:	2305      	movs	r3, #5
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	2208      	movs	r2, #8
 8001a48:	4873      	ldr	r0, [pc, #460]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001a4a:	f7ff fa3b 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
					if (slaveStr.ReadRegsGroup[6] < 1700) {
 8001a4e:	4b73      	ldr	r3, [pc, #460]	@ (8001c1c <Start_Control_Load+0x270>)
 8001a50:	f8b3 3114 	ldrh.w	r3, [r3, #276]	@ 0x114
 8001a54:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d817      	bhi.n	8001a8c <Start_Control_Load+0xe0>
						uint8_t send_data[8] = {0x01, 0x06, 0x00, 0x36, 0x01, 0x5E,};
 8001a5c:	4a71      	ldr	r2, [pc, #452]	@ (8001c24 <Start_Control_Load+0x278>)
 8001a5e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001a62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a66:	6018      	str	r0, [r3, #0]
 8001a68:	3304      	adds	r3, #4
 8001a6a:	8019      	strh	r1, [r3, #0]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	0c0a      	lsrs	r2, r1, #16
 8001a70:	701a      	strb	r2, [r3, #0]
 8001a72:	2300      	movs	r3, #0
 8001a74:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001a78:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8001a7c:	2305      	movs	r3, #5
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	2208      	movs	r2, #8
 8001a86:	4864      	ldr	r0, [pc, #400]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001a88:	f7ff fa1c 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
				}

				MONITORING_LOAD_FLAG = 0;
 8001a8c:	4b5f      	ldr	r3, [pc, #380]	@ (8001c0c <Start_Control_Load+0x260>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
			  break;
 8001a92:	e131      	b.n	8001cf8 <Start_Control_Load+0x34c>

		  case 2:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001a94:	4b5e      	ldr	r3, [pc, #376]	@ (8001c10 <Start_Control_Load+0x264>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 ff81 	bl	80059a4 <osSemaphoreAcquire>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10c      	bne.n	8001ac2 <Start_Control_Load+0x116>
					HAL_UART_Transmit_DMA(&huart3, send_to_load[1], 8);
 8001aa8:	2208      	movs	r2, #8
 8001aaa:	495f      	ldr	r1, [pc, #380]	@ (8001c28 <Start_Control_Load+0x27c>)
 8001aac:	485a      	ldr	r0, [pc, #360]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001aae:	f002 fd51 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(25);
 8001ab2:	2019      	movs	r0, #25
 8001ab4:	f003 feac 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 8001ab8:	4b55      	ldr	r3, [pc, #340]	@ (8001c10 <Start_Control_Load+0x264>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f003 ffd7 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误�?
				}

				if (1 == slaveStr.ReadRegsGroup[10]) {
 8001ac2:	4b56      	ldr	r3, [pc, #344]	@ (8001c1c <Start_Control_Load+0x270>)
 8001ac4:	f8b3 311c 	ldrh.w	r3, [r3, #284]	@ 0x11c
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d13d      	bne.n	8001b48 <Start_Control_Load+0x19c>
					if (slaveStr.ReadRegsGroup[16] > 2600) {
 8001acc:	4b53      	ldr	r3, [pc, #332]	@ (8001c1c <Start_Control_Load+0x270>)
 8001ace:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8001ad2:	f640 2228 	movw	r2, #2600	@ 0xa28
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d917      	bls.n	8001b0a <Start_Control_Load+0x15e>
						uint8_t send_data[8] = {0x02, 0x06, 0x00, 0x36, 0x00, 0x28,};
 8001ada:	4a54      	ldr	r2, [pc, #336]	@ (8001c2c <Start_Control_Load+0x280>)
 8001adc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001ae0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ae4:	6018      	str	r0, [r3, #0]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	8019      	strh	r1, [r3, #0]
 8001aea:	3302      	adds	r3, #2
 8001aec:	0c0a      	lsrs	r2, r1, #16
 8001aee:	701a      	strb	r2, [r3, #0]
 8001af0:	2300      	movs	r3, #0
 8001af2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001af6:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001afa:	2305      	movs	r3, #5
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	2208      	movs	r2, #8
 8001b04:	4844      	ldr	r0, [pc, #272]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001b06:	f7ff f9dd 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
					if (slaveStr.ReadRegsGroup[16] < 1700) {
 8001b0a:	4b44      	ldr	r3, [pc, #272]	@ (8001c1c <Start_Control_Load+0x270>)
 8001b0c:	f8b3 3128 	ldrh.w	r3, [r3, #296]	@ 0x128
 8001b10:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d817      	bhi.n	8001b48 <Start_Control_Load+0x19c>
						uint8_t send_data[8] = {0x02, 0x06, 0x00, 0x36, 0x01, 0x5E,};
 8001b18:	4a45      	ldr	r2, [pc, #276]	@ (8001c30 <Start_Control_Load+0x284>)
 8001b1a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001b22:	6018      	str	r0, [r3, #0]
 8001b24:	3304      	adds	r3, #4
 8001b26:	8019      	strh	r1, [r3, #0]
 8001b28:	3302      	adds	r3, #2
 8001b2a:	0c0a      	lsrs	r2, r1, #16
 8001b2c:	701a      	strb	r2, [r3, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001b34:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001b38:	2305      	movs	r3, #5
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b40:	2208      	movs	r2, #8
 8001b42:	4835      	ldr	r0, [pc, #212]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001b44:	f7ff f9be 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
				}

				MONITORING_LOAD_FLAG = 0;
 8001b48:	4b30      	ldr	r3, [pc, #192]	@ (8001c0c <Start_Control_Load+0x260>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	701a      	strb	r2, [r3, #0]
			  break;
 8001b4e:	e0d3      	b.n	8001cf8 <Start_Control_Load+0x34c>

		  case 3:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001b50:	4b2f      	ldr	r3, [pc, #188]	@ (8001c10 <Start_Control_Load+0x264>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f003 ff23 	bl	80059a4 <osSemaphoreAcquire>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d10c      	bne.n	8001b7e <Start_Control_Load+0x1d2>
					HAL_UART_Transmit_DMA(&huart3, send_to_load[2], 8);
 8001b64:	2208      	movs	r2, #8
 8001b66:	4933      	ldr	r1, [pc, #204]	@ (8001c34 <Start_Control_Load+0x288>)
 8001b68:	482b      	ldr	r0, [pc, #172]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001b6a:	f002 fcf3 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(25);
 8001b6e:	2019      	movs	r0, #25
 8001b70:	f003 fe4e 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 8001b74:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <Start_Control_Load+0x264>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f003 ff79 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误）
				}
				if (1 == slaveStr.ReadRegsGroup[20]) {
 8001b7e:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <Start_Control_Load+0x270>)
 8001b80:	f8b3 3130 	ldrh.w	r3, [r3, #304]	@ 0x130
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d13c      	bne.n	8001c02 <Start_Control_Load+0x256>
					if (slaveStr.ReadRegsGroup[26] > 2600) {
 8001b88:	4b24      	ldr	r3, [pc, #144]	@ (8001c1c <Start_Control_Load+0x270>)
 8001b8a:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8001b8e:	f640 2228 	movw	r2, #2600	@ 0xa28
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d917      	bls.n	8001bc6 <Start_Control_Load+0x21a>
						uint8_t send_data[8] = {0x03, 0x06, 0x00, 0x36, 0x00, 0x28,};
 8001b96:	4a28      	ldr	r2, [pc, #160]	@ (8001c38 <Start_Control_Load+0x28c>)
 8001b98:	f107 0320 	add.w	r3, r7, #32
 8001b9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ba0:	6018      	str	r0, [r3, #0]
 8001ba2:	3304      	adds	r3, #4
 8001ba4:	8019      	strh	r1, [r3, #0]
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	0c0a      	lsrs	r2, r1, #16
 8001baa:	701a      	strb	r2, [r3, #0]
 8001bac:	2300      	movs	r3, #0
 8001bae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001bb2:	f107 0120 	add.w	r1, r7, #32
 8001bb6:	2305      	movs	r3, #5
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	4815      	ldr	r0, [pc, #84]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001bc2:	f7ff f97f 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
					if (slaveStr.ReadRegsGroup[26] < 1700) {
 8001bc6:	4b15      	ldr	r3, [pc, #84]	@ (8001c1c <Start_Control_Load+0x270>)
 8001bc8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	@ 0x13c
 8001bcc:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d816      	bhi.n	8001c02 <Start_Control_Load+0x256>
						uint8_t send_data[8] = {0x03, 0x06, 0x00, 0x36, 0x01, 0x5E,};
 8001bd4:	4a19      	ldr	r2, [pc, #100]	@ (8001c3c <Start_Control_Load+0x290>)
 8001bd6:	f107 0318 	add.w	r3, r7, #24
 8001bda:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bde:	6018      	str	r0, [r3, #0]
 8001be0:	3304      	adds	r3, #4
 8001be2:	8019      	strh	r1, [r3, #0]
 8001be4:	3302      	adds	r3, #2
 8001be6:	0c0a      	lsrs	r2, r1, #16
 8001be8:	701a      	strb	r2, [r3, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	77fb      	strb	r3, [r7, #31]
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001bee:	f107 0118 	add.w	r1, r7, #24
 8001bf2:	2305      	movs	r3, #5
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfa:	2208      	movs	r2, #8
 8001bfc:	4806      	ldr	r0, [pc, #24]	@ (8001c18 <Start_Control_Load+0x26c>)
 8001bfe:	f7ff f961 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
				}

				MONITORING_LOAD_FLAG = 0;
 8001c02:	4b02      	ldr	r3, [pc, #8]	@ (8001c0c <Start_Control_Load+0x260>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]
			  break;
 8001c08:	e076      	b.n	8001cf8 <Start_Control_Load+0x34c>
 8001c0a:	bf00      	nop
 8001c0c:	2000032b 	.word	0x2000032b
 8001c10:	20000320 	.word	0x20000320
 8001c14:	08008f44 	.word	0x08008f44
 8001c18:	20000498 	.word	0x20000498
 8001c1c:	20000160 	.word	0x20000160
 8001c20:	08008cdc 	.word	0x08008cdc
 8001c24:	08008ce4 	.word	0x08008ce4
 8001c28:	08008f4c 	.word	0x08008f4c
 8001c2c:	08008cec 	.word	0x08008cec
 8001c30:	08008cf4 	.word	0x08008cf4
 8001c34:	08008f54 	.word	0x08008f54
 8001c38:	08008cfc 	.word	0x08008cfc
 8001c3c:	08008d04 	.word	0x08008d04

		  case 4:
				if (osSemaphoreAcquire(frameSendSemaphoreHandle, osWaitForever) == osOK) {
 8001c40:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <Start_Control_Load+0x354>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 31ff 	mov.w	r1, #4294967295
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f003 feab 	bl	80059a4 <osSemaphoreAcquire>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <Start_Control_Load+0x2c2>
					HAL_UART_Transmit_DMA(&huart3, send_to_load[3], 8);
 8001c54:	2208      	movs	r2, #8
 8001c56:	492b      	ldr	r1, [pc, #172]	@ (8001d04 <Start_Control_Load+0x358>)
 8001c58:	482b      	ldr	r0, [pc, #172]	@ (8001d08 <Start_Control_Load+0x35c>)
 8001c5a:	f002 fc7b 	bl	8004554 <HAL_UART_Transmit_DMA>
					osDelay(25);
 8001c5e:	2019      	movs	r0, #25
 8001c60:	f003 fdd6 	bl	8005810 <osDelay>
					osSemaphoreRelease(frameSendSemaphoreHandle);
 8001c64:	4b26      	ldr	r3, [pc, #152]	@ (8001d00 <Start_Control_Load+0x354>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 ff01 	bl	8005a70 <osSemaphoreRelease>
				}
				else {
						// 处理信号量获取失败的情况（如记录错误�?
				}
				if (1 == slaveStr.ReadRegsGroup[30]) {
 8001c6e:	4b27      	ldr	r3, [pc, #156]	@ (8001d0c <Start_Control_Load+0x360>)
 8001c70:	f8b3 3144 	ldrh.w	r3, [r3, #324]	@ 0x144
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d13b      	bne.n	8001cf0 <Start_Control_Load+0x344>
					if (slaveStr.ReadRegsGroup[36] > 2600) {
 8001c78:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <Start_Control_Load+0x360>)
 8001c7a:	f8b3 3150 	ldrh.w	r3, [r3, #336]	@ 0x150
 8001c7e:	f640 2228 	movw	r2, #2600	@ 0xa28
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d916      	bls.n	8001cb4 <Start_Control_Load+0x308>
						uint8_t send_data[8] = {0x03, 0x06, 0x00, 0x36, 0x00, 0x28,};
 8001c86:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <Start_Control_Load+0x364>)
 8001c88:	f107 0310 	add.w	r3, r7, #16
 8001c8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c90:	6018      	str	r0, [r3, #0]
 8001c92:	3304      	adds	r3, #4
 8001c94:	8019      	strh	r1, [r3, #0]
 8001c96:	3302      	adds	r3, #2
 8001c98:	0c0a      	lsrs	r2, r1, #16
 8001c9a:	701a      	strb	r2, [r3, #0]
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	75fb      	strb	r3, [r7, #23]
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001ca0:	f107 0110 	add.w	r1, r7, #16
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	9300      	str	r3, [sp, #0]
 8001ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8001cac:	2208      	movs	r2, #8
 8001cae:	4816      	ldr	r0, [pc, #88]	@ (8001d08 <Start_Control_Load+0x35c>)
 8001cb0:	f7ff f908 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
					if (slaveStr.ReadRegsGroup[36] < 1700) {
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <Start_Control_Load+0x360>)
 8001cb6:	f8b3 3150 	ldrh.w	r3, [r3, #336]	@ 0x150
 8001cba:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d816      	bhi.n	8001cf0 <Start_Control_Load+0x344>
						uint8_t send_data[8] = {0x03, 0x06, 0x00, 0x36, 0x01, 0x5E,};
 8001cc2:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <Start_Control_Load+0x368>)
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	8019      	strh	r1, [r3, #0]
 8001cd2:	3302      	adds	r3, #2
 8001cd4:	0c0a      	lsrs	r2, r1, #16
 8001cd6:	701a      	strb	r2, [r3, #0]
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
						UART_SendDataWithSemaphore(&huart3, send_data, 8, osWaitForever, 5);
 8001cdc:	f107 0108 	add.w	r1, r7, #8
 8001ce0:	2305      	movs	r3, #5
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce8:	2208      	movs	r2, #8
 8001cea:	4807      	ldr	r0, [pc, #28]	@ (8001d08 <Start_Control_Load+0x35c>)
 8001cec:	f7ff f8ea 	bl	8000ec4 <UART_SendDataWithSemaphore>
					}
				}

				MONITORING_LOAD_FLAG = 0;
 8001cf0:	4b09      	ldr	r3, [pc, #36]	@ (8001d18 <Start_Control_Load+0x36c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
			  break;
 8001cf6:	bf00      	nop
	  }

	  osDelay(20);
 8001cf8:	2014      	movs	r0, #20
 8001cfa:	f003 fd89 	bl	8005810 <osDelay>
	  switch (MONITORING_LOAD_FLAG) {
 8001cfe:	e659      	b.n	80019b4 <Start_Control_Load+0x8>
 8001d00:	20000320 	.word	0x20000320
 8001d04:	08008f5c 	.word	0x08008f5c
 8001d08:	20000498 	.word	0x20000498
 8001d0c:	20000160 	.word	0x20000160
 8001d10:	08008cfc 	.word	0x08008cfc
 8001d14:	08008d04 	.word	0x08008d04
 8001d18:	2000032b 	.word	0x2000032b

08001d1c <Start_Main_Control>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Main_Control */
void Start_Main_Control(void *argument)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_Main_Control */
  /* Infinite loop */
  for(;;)
  {
	  if (REC_CTRL_MOTOR_FLAG) {
 8001d24:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <Start_Main_Control+0x34>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d004      	beq.n	8001d36 <Start_Main_Control+0x1a>
		  ProcessData_TransToMotorDriver();
 8001d2c:	f7fe fdae 	bl	800088c <ProcessData_TransToMotorDriver>
		  REC_CTRL_MOTOR_FLAG = 0;
 8001d30:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <Start_Main_Control+0x34>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]
	  }

	  if (REC_CTRL_LOAD_FLAG) {
 8001d36:	4b07      	ldr	r3, [pc, #28]	@ (8001d54 <Start_Main_Control+0x38>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <Start_Main_Control+0x2c>
		  ProcessData_TransToLoad();
 8001d3e:	f7fe fb31 	bl	80003a4 <ProcessData_TransToLoad>
		  REC_CTRL_LOAD_FLAG = 0;
 8001d42:	4b04      	ldr	r3, [pc, #16]	@ (8001d54 <Start_Main_Control+0x38>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
	  }

    osDelay(20);
 8001d48:	2014      	movs	r0, #20
 8001d4a:	f003 fd61 	bl	8005810 <osDelay>
	  if (REC_CTRL_MOTOR_FLAG) {
 8001d4e:	e7e9      	b.n	8001d24 <Start_Main_Control+0x8>
 8001d50:	20000308 	.word	0x20000308
 8001d54:	20000309 	.word	0x20000309

08001d58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5e:	4b14      	ldr	r3, [pc, #80]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	4a13      	ldr	r2, [pc, #76]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d64:	f043 0320 	orr.w	r3, r3, #32
 8001d68:	6193      	str	r3, [r2, #24]
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d6c:	699b      	ldr	r3, [r3, #24]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d7c:	f043 0304 	orr.w	r3, r3, #4
 8001d80:	6193      	str	r3, [r2, #24]
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	f003 0304 	and.w	r3, r3, #4
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	4a07      	ldr	r2, [pc, #28]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	6193      	str	r3, [r2, #24]
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <MX_GPIO_Init+0x58>)
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	607b      	str	r3, [r7, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]

}
 8001da6:	bf00      	nop
 8001da8:	3714      	adds	r7, #20
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	40021000 	.word	0x40021000

08001db4 <HAL_UARTEx_RxEventCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART1) {
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a21      	ldr	r2, [pc, #132]	@ (8001e4c <HAL_UARTEx_RxEventCallback+0x98>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d110      	bne.n	8001dec <HAL_UARTEx_RxEventCallback+0x38>
		HAL_UART_DMAStop(&huart1);
 8001dca:	4821      	ldr	r0, [pc, #132]	@ (8001e50 <HAL_UARTEx_RxEventCallback+0x9c>)
 8001dcc:	f002 fc32 	bl	8004634 <HAL_UART_DMAStop>
		uart1_rx_len = huart->RxXferSize - huart->RxXferCount;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <HAL_UARTEx_RxEventCallback+0xa0>)
 8001de4:	701a      	strb	r2, [r3, #0]
		UART1_RX_INT_FLAG = 1;
 8001de6:	4b1c      	ldr	r3, [pc, #112]	@ (8001e58 <HAL_UARTEx_RxEventCallback+0xa4>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == USART2) {
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e5c <HAL_UARTEx_RxEventCallback+0xa8>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d110      	bne.n	8001e18 <HAL_UARTEx_RxEventCallback+0x64>
		HAL_UART_DMAStop(&huart2);
 8001df6:	481a      	ldr	r0, [pc, #104]	@ (8001e60 <HAL_UARTEx_RxEventCallback+0xac>)
 8001df8:	f002 fc1c 	bl	8004634 <HAL_UART_DMAStop>
		uart2_rx_len = huart->RxXferSize - huart->RxXferCount;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <HAL_UARTEx_RxEventCallback+0xb0>)
 8001e10:	701a      	strb	r2, [r3, #0]
		UART2_RX_INT_FLAG = 1;
 8001e12:	4b15      	ldr	r3, [pc, #84]	@ (8001e68 <HAL_UARTEx_RxEventCallback+0xb4>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	701a      	strb	r2, [r3, #0]
	}

	if (huart->Instance == USART3) {
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a13      	ldr	r2, [pc, #76]	@ (8001e6c <HAL_UARTEx_RxEventCallback+0xb8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d110      	bne.n	8001e44 <HAL_UARTEx_RxEventCallback+0x90>
		HAL_UART_DMAStop(&huart3);
 8001e22:	4813      	ldr	r0, [pc, #76]	@ (8001e70 <HAL_UARTEx_RxEventCallback+0xbc>)
 8001e24:	f002 fc06 	bl	8004634 <HAL_UART_DMAStop>
		uart3_rx_len = huart->RxXferSize - huart->RxXferCount;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8001e2c:	b2da      	uxtb	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8001e74 <HAL_UARTEx_RxEventCallback+0xc0>)
 8001e3c:	701a      	strb	r2, [r3, #0]
		UART3_RX_INT_FLAG = 1;
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_UARTEx_RxEventCallback+0xc4>)
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
	}
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	20000408 	.word	0x20000408
 8001e54:	20000324 	.word	0x20000324
 8001e58:	20000327 	.word	0x20000327
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	20000450 	.word	0x20000450
 8001e64:	20000325 	.word	0x20000325
 8001e68:	20000328 	.word	0x20000328
 8001e6c:	40004800 	.word	0x40004800
 8001e70:	20000498 	.word	0x20000498
 8001e74:	20000326 	.word	0x20000326
 8001e78:	20000329 	.word	0x20000329

08001e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e80:	f000 fda2 	bl	80029c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e84:	f000 f862 	bl	8001f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e88:	f7ff ff66 	bl	8001d58 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e8c:	f7ff fb72 	bl	8001574 <MX_DMA_Init>
  MX_TIM2_Init();
 8001e90:	f000 fa3a 	bl	8002308 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001e94:	f000 fb14 	bl	80024c0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001e98:	f000 fb3c 	bl	8002514 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001e9c:	f000 fb66 	bl	800256c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001ea0:	f000 fa80 	bl	80023a4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8001ea4:	481e      	ldr	r0, [pc, #120]	@ (8001f20 <main+0xa4>)
 8001ea6:	f001 ff57 	bl	8003d58 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001eaa:	481e      	ldr	r0, [pc, #120]	@ (8001f24 <main+0xa8>)
 8001eac:	f001 ff54 	bl	8003d58 <HAL_TIM_Base_Start_IT>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart1_rx_buf, UART1_RX_BUF_SIZE);
 8001eb0:	2280      	movs	r2, #128	@ 0x80
 8001eb2:	491d      	ldr	r1, [pc, #116]	@ (8001f28 <main+0xac>)
 8001eb4:	481d      	ldr	r0, [pc, #116]	@ (8001f2c <main+0xb0>)
 8001eb6:	f002 fc3c 	bl	8004732 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8001eba:	4b1d      	ldr	r3, [pc, #116]	@ (8001f30 <main+0xb4>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f30 <main+0xb4>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 0204 	bic.w	r2, r2, #4
 8001ec8:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, uart2_rx_buf, UART2_RX_BUF_SIZE);
 8001eca:	2240      	movs	r2, #64	@ 0x40
 8001ecc:	4919      	ldr	r1, [pc, #100]	@ (8001f34 <main+0xb8>)
 8001ece:	481a      	ldr	r0, [pc, #104]	@ (8001f38 <main+0xbc>)
 8001ed0:	f002 fc2f 	bl	8004732 <HAL_UARTEx_ReceiveToIdle_DMA>
  	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001ed4:	4b19      	ldr	r3, [pc, #100]	@ (8001f3c <main+0xc0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <main+0xc0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0204 	bic.w	r2, r2, #4
 8001ee2:	601a      	str	r2, [r3, #0]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, uart3_rx_buf, UART3_RX_BUF_SIZE);
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	4916      	ldr	r1, [pc, #88]	@ (8001f40 <main+0xc4>)
 8001ee8:	4816      	ldr	r0, [pc, #88]	@ (8001f44 <main+0xc8>)
 8001eea:	f002 fc22 	bl	8004732 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <main+0xcc>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	4b14      	ldr	r3, [pc, #80]	@ (8001f48 <main+0xcc>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0204 	bic.w	r2, r2, #4
 8001efc:	601a      	str	r2, [r3, #0]

	ModbusRtuSlaveInit();
 8001efe:	f7ff f80b 	bl	8000f18 <ModbusRtuSlaveInit>
	MotorDriverInit();
 8001f02:	f7fe fbd3 	bl	80006ac <MotorDriverInit>
	LoadInit();
 8001f06:	f7fe f923 	bl	8000150 <LoadInit>

	LoadStatusInit();
 8001f0a:	f7fe f92f 	bl	800016c <LoadStatusInit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001f0e:	f003 fb6f 	bl	80055f0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001f12:	f7ff fb75 	bl	8001600 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f16:	f003 fb9d 	bl	8005654 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f1a:	bf00      	nop
 8001f1c:	e7fd      	b.n	8001f1a <main+0x9e>
 8001f1e:	bf00      	nop
 8001f20:	20000378 	.word	0x20000378
 8001f24:	200003c0 	.word	0x200003c0
 8001f28:	20000010 	.word	0x20000010
 8001f2c:	20000408 	.word	0x20000408
 8001f30:	200004e0 	.word	0x200004e0
 8001f34:	20000090 	.word	0x20000090
 8001f38:	20000450 	.word	0x20000450
 8001f3c:	20000568 	.word	0x20000568
 8001f40:	200000d0 	.word	0x200000d0
 8001f44:	20000498 	.word	0x20000498
 8001f48:	200005f0 	.word	0x200005f0

08001f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b090      	sub	sp, #64	@ 0x40
 8001f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f52:	f107 0318 	add.w	r3, r7, #24
 8001f56:	2228      	movs	r2, #40	@ 0x28
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f006 fdee 	bl	8008b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f60:	1d3b      	adds	r3, r7, #4
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f76:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f80:	2302      	movs	r3, #2
 8001f82:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001f8a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f90:	f107 0318 	add.w	r3, r7, #24
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 fa4f 	bl	8003438 <HAL_RCC_OscConfig>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001fa0:	f000 f86a 	bl	8002078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa4:	230f      	movs	r3, #15
 8001fa6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fb0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2102      	movs	r1, #2
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f001 fcbc 	bl	800393c <HAL_RCC_ClockConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001fca:	f000 f855 	bl	8002078 <Error_Handler>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3740      	adds	r7, #64	@ 0x40
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	static uint8_t motor_idx;
	static uint8_t load_idx;

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	@ (8002058 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d101      	bne.n	8001fee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001fea:	f000 fd03 	bl	80029f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM2) {
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff6:	d112      	bne.n	800201e <HAL_TIM_PeriodElapsedCallback+0x46>
	  monitoring_counter_100ms++;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	4b16      	ldr	r3, [pc, #88]	@ (800205c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8002002:	701a      	strb	r2, [r3, #0]
	  MONITORING_LOAD_FLAG = (load_idx++) % 4 + 1;
 8002004:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	1c5a      	adds	r2, r3, #1
 800200a:	b2d1      	uxtb	r1, r2
 800200c:	4a14      	ldr	r2, [pc, #80]	@ (8002060 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800200e:	7011      	strb	r1, [r2, #0]
 8002010:	f003 0303 	and.w	r3, r3, #3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	3301      	adds	r3, #1
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4b12      	ldr	r3, [pc, #72]	@ (8002064 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800201c:	701a      	strb	r2, [r3, #0]
  }

  if (htim->Instance == TIM3) {
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a11      	ldr	r2, [pc, #68]	@ (8002068 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d112      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0x76>
	  monitoring_counter_500ms++;
 8002028:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_TIM_PeriodElapsedCallback+0x94>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	b2da      	uxtb	r2, r3
 8002030:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8002032:	701a      	strb	r2, [r3, #0]
	  MONITORING_MOTOR_FLAG = (motor_idx++) % 4 + 1;
 8002034:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	1c5a      	adds	r2, r3, #1
 800203a:	b2d1      	uxtb	r1, r2
 800203c:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800203e:	7011      	strb	r1, [r2, #0]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4b0a      	ldr	r3, [pc, #40]	@ (8002074 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800204c:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END Callback 1 */
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40012c00 	.word	0x40012c00
 800205c:	2000032c 	.word	0x2000032c
 8002060:	2000032e 	.word	0x2000032e
 8002064:	2000032b 	.word	0x2000032b
 8002068:	40000400 	.word	0x40000400
 800206c:	2000032d 	.word	0x2000032d
 8002070:	2000032f 	.word	0x2000032f
 8002074:	2000032a 	.word	0x2000032a

08002078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800207c:	b672      	cpsid	i
}
 800207e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002080:	bf00      	nop
 8002082:	e7fd      	b.n	8002080 <Error_Handler+0x8>

08002084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800208a:	4b18      	ldr	r3, [pc, #96]	@ (80020ec <HAL_MspInit+0x68>)
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	4a17      	ldr	r2, [pc, #92]	@ (80020ec <HAL_MspInit+0x68>)
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	6193      	str	r3, [r2, #24]
 8002096:	4b15      	ldr	r3, [pc, #84]	@ (80020ec <HAL_MspInit+0x68>)
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f003 0301 	and.w	r3, r3, #1
 800209e:	60bb      	str	r3, [r7, #8]
 80020a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020a2:	4b12      	ldr	r3, [pc, #72]	@ (80020ec <HAL_MspInit+0x68>)
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	4a11      	ldr	r2, [pc, #68]	@ (80020ec <HAL_MspInit+0x68>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ac:	61d3      	str	r3, [r2, #28]
 80020ae:	4b0f      	ldr	r3, [pc, #60]	@ (80020ec <HAL_MspInit+0x68>)
 80020b0:	69db      	ldr	r3, [r3, #28]
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	210f      	movs	r1, #15
 80020be:	f06f 0001 	mvn.w	r0, #1
 80020c2:	f000 fd68 	bl	8002b96 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80020c6:	4b0a      	ldr	r3, [pc, #40]	@ (80020f0 <HAL_MspInit+0x6c>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	4a04      	ldr	r2, [pc, #16]	@ (80020f0 <HAL_MspInit+0x6c>)
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020e2:	bf00      	nop
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40021000 	.word	0x40021000
 80020f0:	40010000 	.word	0x40010000

080020f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b08c      	sub	sp, #48	@ 0x30
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80020fc:	2300      	movs	r3, #0
 80020fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002104:	2300      	movs	r3, #0
 8002106:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800210a:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <HAL_InitTick+0xd0>)
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <HAL_InitTick+0xd0>)
 8002110:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002114:	6193      	str	r3, [r2, #24]
 8002116:	4b2b      	ldr	r3, [pc, #172]	@ (80021c4 <HAL_InitTick+0xd0>)
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002122:	f107 020c 	add.w	r2, r7, #12
 8002126:	f107 0310 	add.w	r3, r7, #16
 800212a:	4611      	mov	r1, r2
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fd75 	bl	8003c1c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002132:	f001 fd5f 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8002136:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800213a:	4a23      	ldr	r2, [pc, #140]	@ (80021c8 <HAL_InitTick+0xd4>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	3b01      	subs	r3, #1
 8002144:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002146:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_InitTick+0xd8>)
 8002148:	4a21      	ldr	r2, [pc, #132]	@ (80021d0 <HAL_InitTick+0xdc>)
 800214a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800214c:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <HAL_InitTick+0xd8>)
 800214e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002152:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002154:	4a1d      	ldr	r2, [pc, #116]	@ (80021cc <HAL_InitTick+0xd8>)
 8002156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002158:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800215a:	4b1c      	ldr	r3, [pc, #112]	@ (80021cc <HAL_InitTick+0xd8>)
 800215c:	2200      	movs	r2, #0
 800215e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002160:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_InitTick+0xd8>)
 8002162:	2200      	movs	r2, #0
 8002164:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002166:	4b19      	ldr	r3, [pc, #100]	@ (80021cc <HAL_InitTick+0xd8>)
 8002168:	2200      	movs	r2, #0
 800216a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800216c:	4817      	ldr	r0, [pc, #92]	@ (80021cc <HAL_InitTick+0xd8>)
 800216e:	f001 fda3 	bl	8003cb8 <HAL_TIM_Base_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002178:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800217c:	2b00      	cmp	r3, #0
 800217e:	d11b      	bne.n	80021b8 <HAL_InitTick+0xc4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002180:	4812      	ldr	r0, [pc, #72]	@ (80021cc <HAL_InitTick+0xd8>)
 8002182:	f001 fde9 	bl	8003d58 <HAL_TIM_Base_Start_IT>
 8002186:	4603      	mov	r3, r0
 8002188:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800218c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002190:	2b00      	cmp	r3, #0
 8002192:	d111      	bne.n	80021b8 <HAL_InitTick+0xc4>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002194:	2019      	movs	r0, #25
 8002196:	f000 fd1a 	bl	8002bce <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b0f      	cmp	r3, #15
 800219e:	d808      	bhi.n	80021b2 <HAL_InitTick+0xbe>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 80021a0:	2200      	movs	r2, #0
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	2019      	movs	r0, #25
 80021a6:	f000 fcf6 	bl	8002b96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80021aa:	4a0a      	ldr	r2, [pc, #40]	@ (80021d4 <HAL_InitTick+0xe0>)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6013      	str	r3, [r2, #0]
 80021b0:	e002      	b.n	80021b8 <HAL_InitTick+0xc4>
      }
      else
      {
        status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80021b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3730      	adds	r7, #48	@ 0x30
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	431bde83 	.word	0x431bde83
 80021cc:	20000330 	.word	0x20000330
 80021d0:	40012c00 	.word	0x40012c00
 80021d4:	20000004 	.word	0x20000004

080021d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021dc:	bf00      	nop
 80021de:	e7fd      	b.n	80021dc <NMI_Handler+0x4>

080021e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e4:	bf00      	nop
 80021e6:	e7fd      	b.n	80021e4 <HardFault_Handler+0x4>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <MemManage_Handler+0x4>

080021f0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <BusFault_Handler+0x4>

080021f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <UsageFault_Handler+0x4>

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002210:	4802      	ldr	r0, [pc, #8]	@ (800221c <DMA1_Channel2_IRQHandler+0x10>)
 8002212:	f000 fe59 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002216:	bf00      	nop
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000634 	.word	0x20000634

08002220 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002224:	4802      	ldr	r0, [pc, #8]	@ (8002230 <DMA1_Channel3_IRQHandler+0x10>)
 8002226:	f000 fe4f 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	200005f0 	.word	0x200005f0

08002234 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002238:	4802      	ldr	r0, [pc, #8]	@ (8002244 <DMA1_Channel4_IRQHandler+0x10>)
 800223a:	f000 fe45 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	20000524 	.word	0x20000524

08002248 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <DMA1_Channel5_IRQHandler+0x10>)
 800224e:	f000 fe3b 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200004e0 	.word	0x200004e0

0800225c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002260:	4802      	ldr	r0, [pc, #8]	@ (800226c <DMA1_Channel6_IRQHandler+0x10>)
 8002262:	f000 fe31 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000568 	.word	0x20000568

08002270 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002274:	4802      	ldr	r0, [pc, #8]	@ (8002280 <DMA1_Channel7_IRQHandler+0x10>)
 8002276:	f000 fe27 	bl	8002ec8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	200005ac 	.word	0x200005ac

08002284 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002288:	4802      	ldr	r0, [pc, #8]	@ (8002294 <TIM1_UP_IRQHandler+0x10>)
 800228a:	f001 fdb7 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000330 	.word	0x20000330

08002298 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800229c:	4802      	ldr	r0, [pc, #8]	@ (80022a8 <TIM2_IRQHandler+0x10>)
 800229e:	f001 fdad 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	20000378 	.word	0x20000378

080022ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022b0:	4802      	ldr	r0, [pc, #8]	@ (80022bc <TIM3_IRQHandler+0x10>)
 80022b2:	f001 fda3 	bl	8003dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200003c0 	.word	0x200003c0

080022c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022c4:	4802      	ldr	r0, [pc, #8]	@ (80022d0 <USART1_IRQHandler+0x10>)
 80022c6:	f002 fa91 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000408 	.word	0x20000408

080022d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80022d8:	4802      	ldr	r0, [pc, #8]	@ (80022e4 <USART2_IRQHandler+0x10>)
 80022da:	f002 fa87 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000450 	.word	0x20000450

080022e8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <USART3_IRQHandler+0x10>)
 80022ee:	f002 fa7d 	bl	80047ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20000498 	.word	0x20000498

080022fc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002300:	bf00      	nop
 8002302:	46bd      	mov	sp, r7
 8002304:	bc80      	pop	{r7}
 8002306:	4770      	bx	lr

08002308 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800230e:	f107 0308 	add.w	r3, r7, #8
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]
 8002316:	605a      	str	r2, [r3, #4]
 8002318:	609a      	str	r2, [r3, #8]
 800231a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800231c:	463b      	mov	r3, r7
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002324:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <MX_TIM2_Init+0x98>)
 8002326:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800232a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 800232c:	4b1c      	ldr	r3, [pc, #112]	@ (80023a0 <MX_TIM2_Init+0x98>)
 800232e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8002332:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002334:	4b1a      	ldr	r3, [pc, #104]	@ (80023a0 <MX_TIM2_Init+0x98>)
 8002336:	2200      	movs	r2, #0
 8002338:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800233a:	4b19      	ldr	r3, [pc, #100]	@ (80023a0 <MX_TIM2_Init+0x98>)
 800233c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002340:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <MX_TIM2_Init+0x98>)
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002348:	4b15      	ldr	r3, [pc, #84]	@ (80023a0 <MX_TIM2_Init+0x98>)
 800234a:	2200      	movs	r2, #0
 800234c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800234e:	4814      	ldr	r0, [pc, #80]	@ (80023a0 <MX_TIM2_Init+0x98>)
 8002350:	f001 fcb2 	bl	8003cb8 <HAL_TIM_Base_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800235a:	f7ff fe8d 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800235e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002362:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002364:	f107 0308 	add.w	r3, r7, #8
 8002368:	4619      	mov	r1, r3
 800236a:	480d      	ldr	r0, [pc, #52]	@ (80023a0 <MX_TIM2_Init+0x98>)
 800236c:	f001 fe4e 	bl	800400c <HAL_TIM_ConfigClockSource>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002376:	f7ff fe7f 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002382:	463b      	mov	r3, r7
 8002384:	4619      	mov	r1, r3
 8002386:	4806      	ldr	r0, [pc, #24]	@ (80023a0 <MX_TIM2_Init+0x98>)
 8002388:	f002 f824 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002392:	f7ff fe71 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	3718      	adds	r7, #24
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	20000378 	.word	0x20000378

080023a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023b8:	463b      	mov	r3, r7
 80023ba:	2200      	movs	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80023c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002438 <MX_TIM3_Init+0x94>)
 80023c2:	4a1e      	ldr	r2, [pc, #120]	@ (800243c <MX_TIM3_Init+0x98>)
 80023c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 80023c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002438 <MX_TIM3_Init+0x94>)
 80023c8:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80023cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002438 <MX_TIM3_Init+0x94>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4999;
 80023d4:	4b18      	ldr	r3, [pc, #96]	@ (8002438 <MX_TIM3_Init+0x94>)
 80023d6:	f241 3287 	movw	r2, #4999	@ 0x1387
 80023da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023dc:	4b16      	ldr	r3, [pc, #88]	@ (8002438 <MX_TIM3_Init+0x94>)
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e2:	4b15      	ldr	r3, [pc, #84]	@ (8002438 <MX_TIM3_Init+0x94>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80023e8:	4813      	ldr	r0, [pc, #76]	@ (8002438 <MX_TIM3_Init+0x94>)
 80023ea:	f001 fc65 	bl	8003cb8 <HAL_TIM_Base_Init>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80023f4:	f7ff fe40 	bl	8002078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80023fe:	f107 0308 	add.w	r3, r7, #8
 8002402:	4619      	mov	r1, r3
 8002404:	480c      	ldr	r0, [pc, #48]	@ (8002438 <MX_TIM3_Init+0x94>)
 8002406:	f001 fe01 	bl	800400c <HAL_TIM_ConfigClockSource>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002410:	f7ff fe32 	bl	8002078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002414:	2300      	movs	r3, #0
 8002416:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002418:	2300      	movs	r3, #0
 800241a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800241c:	463b      	mov	r3, r7
 800241e:	4619      	mov	r1, r3
 8002420:	4805      	ldr	r0, [pc, #20]	@ (8002438 <MX_TIM3_Init+0x94>)
 8002422:	f001 ffd7 	bl	80043d4 <HAL_TIMEx_MasterConfigSynchronization>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800242c:	f7ff fe24 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002430:	bf00      	nop
 8002432:	3718      	adds	r7, #24
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	200003c0 	.word	0x200003c0
 800243c:	40000400 	.word	0x40000400

08002440 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002450:	d114      	bne.n	800247c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <HAL_TIM_Base_MspInit+0x78>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	4a18      	ldr	r2, [pc, #96]	@ (80024b8 <HAL_TIM_Base_MspInit+0x78>)
 8002458:	f043 0301 	orr.w	r3, r3, #1
 800245c:	61d3      	str	r3, [r2, #28]
 800245e:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <HAL_TIM_Base_MspInit+0x78>)
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	f003 0301 	and.w	r3, r3, #1
 8002466:	60fb      	str	r3, [r7, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800246a:	2200      	movs	r2, #0
 800246c:	2105      	movs	r1, #5
 800246e:	201c      	movs	r0, #28
 8002470:	f000 fb91 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002474:	201c      	movs	r0, #28
 8002476:	f000 fbaa 	bl	8002bce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800247a:	e018      	b.n	80024ae <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a0e      	ldr	r2, [pc, #56]	@ (80024bc <HAL_TIM_Base_MspInit+0x7c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d113      	bne.n	80024ae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002486:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <HAL_TIM_Base_MspInit+0x78>)
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	4a0b      	ldr	r2, [pc, #44]	@ (80024b8 <HAL_TIM_Base_MspInit+0x78>)
 800248c:	f043 0302 	orr.w	r3, r3, #2
 8002490:	61d3      	str	r3, [r2, #28]
 8002492:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <HAL_TIM_Base_MspInit+0x78>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
 800249c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2105      	movs	r1, #5
 80024a2:	201d      	movs	r0, #29
 80024a4:	f000 fb77 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024a8:	201d      	movs	r0, #29
 80024aa:	f000 fb90 	bl	8002bce <HAL_NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40000400 	.word	0x40000400

080024c0 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <MX_USART1_UART_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f8:	f001 ffdc 	bl	80044b4 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002502:	f7ff fdb9 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000408 	.word	0x20000408
 8002510:	40013800 	.word	0x40013800

08002514 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002518:	4b12      	ldr	r3, [pc, #72]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 800251a:	4a13      	ldr	r2, [pc, #76]	@ (8002568 <MX_USART2_UART_Init+0x54>)
 800251c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 8002520:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 8002524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002526:	4b0f      	ldr	r3, [pc, #60]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 8002528:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800252c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800252e:	4b0d      	ldr	r3, [pc, #52]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 8002530:	2200      	movs	r2, #0
 8002532:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002534:	4b0b      	ldr	r3, [pc, #44]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 8002536:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800253a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800253c:	4b09      	ldr	r3, [pc, #36]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 800253e:	220c      	movs	r2, #12
 8002540:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002542:	4b08      	ldr	r3, [pc, #32]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 8002544:	2200      	movs	r2, #0
 8002546:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002548:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 800254a:	2200      	movs	r2, #0
 800254c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800254e:	4805      	ldr	r0, [pc, #20]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 8002550:	f001 ffb0 	bl	80044b4 <HAL_UART_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800255a:	f7ff fd8d 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800255e:	bf00      	nop
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000450 	.word	0x20000450
 8002568:	40004400 	.word	0x40004400

0800256c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002570:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 8002572:	4a12      	ldr	r2, [pc, #72]	@ (80025bc <MX_USART3_UART_Init+0x50>)
 8002574:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 57600;
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 8002578:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800257c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800257e:	4b0e      	ldr	r3, [pc, #56]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002584:	4b0c      	ldr	r3, [pc, #48]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800258a:	4b0b      	ldr	r3, [pc, #44]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002590:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 8002592:	220c      	movs	r2, #12
 8002594:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <MX_USART3_UART_Init+0x4c>)
 80025a4:	f001 ff86 	bl	80044b4 <HAL_UART_Init>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80025ae:	f7ff fd63 	bl	8002078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000498 	.word	0x20000498
 80025bc:	40004800 	.word	0x40004800

080025c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b08c      	sub	sp, #48	@ 0x30
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c8:	f107 0320 	add.w	r3, r7, #32
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	605a      	str	r2, [r3, #4]
 80025d2:	609a      	str	r2, [r3, #8]
 80025d4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a8c      	ldr	r2, [pc, #560]	@ (800280c <HAL_UART_MspInit+0x24c>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	f040 8087 	bne.w	80026f0 <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002810 <HAL_UART_MspInit+0x250>)
 80025e4:	699b      	ldr	r3, [r3, #24]
 80025e6:	4a8a      	ldr	r2, [pc, #552]	@ (8002810 <HAL_UART_MspInit+0x250>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6193      	str	r3, [r2, #24]
 80025ee:	4b88      	ldr	r3, [pc, #544]	@ (8002810 <HAL_UART_MspInit+0x250>)
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	61fb      	str	r3, [r7, #28]
 80025f8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	4b85      	ldr	r3, [pc, #532]	@ (8002810 <HAL_UART_MspInit+0x250>)
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	4a84      	ldr	r2, [pc, #528]	@ (8002810 <HAL_UART_MspInit+0x250>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6193      	str	r3, [r2, #24]
 8002606:	4b82      	ldr	r3, [pc, #520]	@ (8002810 <HAL_UART_MspInit+0x250>)
 8002608:	699b      	ldr	r3, [r3, #24]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002612:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800261c:	2303      	movs	r3, #3
 800261e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002620:	f107 0320 	add.w	r3, r7, #32
 8002624:	4619      	mov	r1, r3
 8002626:	487b      	ldr	r0, [pc, #492]	@ (8002814 <HAL_UART_MspInit+0x254>)
 8002628:	f000 fd82 	bl	8003130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800262c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800263a:	f107 0320 	add.w	r3, r7, #32
 800263e:	4619      	mov	r1, r3
 8002640:	4874      	ldr	r0, [pc, #464]	@ (8002814 <HAL_UART_MspInit+0x254>)
 8002642:	f000 fd75 	bl	8003130 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002646:	4b74      	ldr	r3, [pc, #464]	@ (8002818 <HAL_UART_MspInit+0x258>)
 8002648:	4a74      	ldr	r2, [pc, #464]	@ (800281c <HAL_UART_MspInit+0x25c>)
 800264a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800264c:	4b72      	ldr	r3, [pc, #456]	@ (8002818 <HAL_UART_MspInit+0x258>)
 800264e:	2200      	movs	r2, #0
 8002650:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002652:	4b71      	ldr	r3, [pc, #452]	@ (8002818 <HAL_UART_MspInit+0x258>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002658:	4b6f      	ldr	r3, [pc, #444]	@ (8002818 <HAL_UART_MspInit+0x258>)
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800265e:	4b6e      	ldr	r3, [pc, #440]	@ (8002818 <HAL_UART_MspInit+0x258>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002664:	4b6c      	ldr	r3, [pc, #432]	@ (8002818 <HAL_UART_MspInit+0x258>)
 8002666:	2200      	movs	r2, #0
 8002668:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800266a:	4b6b      	ldr	r3, [pc, #428]	@ (8002818 <HAL_UART_MspInit+0x258>)
 800266c:	2220      	movs	r2, #32
 800266e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002670:	4b69      	ldr	r3, [pc, #420]	@ (8002818 <HAL_UART_MspInit+0x258>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002676:	4868      	ldr	r0, [pc, #416]	@ (8002818 <HAL_UART_MspInit+0x258>)
 8002678:	f000 fab8 	bl	8002bec <HAL_DMA_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8002682:	f7ff fcf9 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a63      	ldr	r2, [pc, #396]	@ (8002818 <HAL_UART_MspInit+0x258>)
 800268a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800268c:	4a62      	ldr	r2, [pc, #392]	@ (8002818 <HAL_UART_MspInit+0x258>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8002692:	4b63      	ldr	r3, [pc, #396]	@ (8002820 <HAL_UART_MspInit+0x260>)
 8002694:	4a63      	ldr	r2, [pc, #396]	@ (8002824 <HAL_UART_MspInit+0x264>)
 8002696:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002698:	4b61      	ldr	r3, [pc, #388]	@ (8002820 <HAL_UART_MspInit+0x260>)
 800269a:	2210      	movs	r2, #16
 800269c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269e:	4b60      	ldr	r3, [pc, #384]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026a6:	2280      	movs	r2, #128	@ 0x80
 80026a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026aa:	4b5d      	ldr	r3, [pc, #372]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80026b6:	4b5a      	ldr	r3, [pc, #360]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80026bc:	4b58      	ldr	r3, [pc, #352]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026be:	2200      	movs	r2, #0
 80026c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026c2:	4857      	ldr	r0, [pc, #348]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026c4:	f000 fa92 	bl	8002bec <HAL_DMA_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80026ce:	f7ff fcd3 	bl	8002078 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a52      	ldr	r2, [pc, #328]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026d6:	639a      	str	r2, [r3, #56]	@ 0x38
 80026d8:	4a51      	ldr	r2, [pc, #324]	@ (8002820 <HAL_UART_MspInit+0x260>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2105      	movs	r1, #5
 80026e2:	2025      	movs	r0, #37	@ 0x25
 80026e4:	f000 fa57 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026e8:	2025      	movs	r0, #37	@ 0x25
 80026ea:	f000 fa70 	bl	8002bce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026ee:	e133      	b.n	8002958 <HAL_UART_MspInit+0x398>
  else if(uartHandle->Instance==USART2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a4c      	ldr	r2, [pc, #304]	@ (8002828 <HAL_UART_MspInit+0x268>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f040 80a0 	bne.w	800283c <HAL_UART_MspInit+0x27c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80026fc:	4b44      	ldr	r3, [pc, #272]	@ (8002810 <HAL_UART_MspInit+0x250>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	4a43      	ldr	r2, [pc, #268]	@ (8002810 <HAL_UART_MspInit+0x250>)
 8002702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002706:	61d3      	str	r3, [r2, #28]
 8002708:	4b41      	ldr	r3, [pc, #260]	@ (8002810 <HAL_UART_MspInit+0x250>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <HAL_UART_MspInit+0x250>)
 8002716:	699b      	ldr	r3, [r3, #24]
 8002718:	4a3d      	ldr	r2, [pc, #244]	@ (8002810 <HAL_UART_MspInit+0x250>)
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	6193      	str	r3, [r2, #24]
 8002720:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <HAL_UART_MspInit+0x250>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800272c:	2304      	movs	r3, #4
 800272e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002730:	2302      	movs	r3, #2
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002738:	f107 0320 	add.w	r3, r7, #32
 800273c:	4619      	mov	r1, r3
 800273e:	4835      	ldr	r0, [pc, #212]	@ (8002814 <HAL_UART_MspInit+0x254>)
 8002740:	f000 fcf6 	bl	8003130 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002744:	2308      	movs	r3, #8
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800274c:	2300      	movs	r3, #0
 800274e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002750:	f107 0320 	add.w	r3, r7, #32
 8002754:	4619      	mov	r1, r3
 8002756:	482f      	ldr	r0, [pc, #188]	@ (8002814 <HAL_UART_MspInit+0x254>)
 8002758:	f000 fcea 	bl	8003130 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800275c:	4b33      	ldr	r3, [pc, #204]	@ (800282c <HAL_UART_MspInit+0x26c>)
 800275e:	4a34      	ldr	r2, [pc, #208]	@ (8002830 <HAL_UART_MspInit+0x270>)
 8002760:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002762:	4b32      	ldr	r3, [pc, #200]	@ (800282c <HAL_UART_MspInit+0x26c>)
 8002764:	2200      	movs	r2, #0
 8002766:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002768:	4b30      	ldr	r3, [pc, #192]	@ (800282c <HAL_UART_MspInit+0x26c>)
 800276a:	2200      	movs	r2, #0
 800276c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800276e:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <HAL_UART_MspInit+0x26c>)
 8002770:	2280      	movs	r2, #128	@ 0x80
 8002772:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002774:	4b2d      	ldr	r3, [pc, #180]	@ (800282c <HAL_UART_MspInit+0x26c>)
 8002776:	2200      	movs	r2, #0
 8002778:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800277a:	4b2c      	ldr	r3, [pc, #176]	@ (800282c <HAL_UART_MspInit+0x26c>)
 800277c:	2200      	movs	r2, #0
 800277e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002780:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <HAL_UART_MspInit+0x26c>)
 8002782:	2220      	movs	r2, #32
 8002784:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002786:	4b29      	ldr	r3, [pc, #164]	@ (800282c <HAL_UART_MspInit+0x26c>)
 8002788:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800278c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800278e:	4827      	ldr	r0, [pc, #156]	@ (800282c <HAL_UART_MspInit+0x26c>)
 8002790:	f000 fa2c 	bl	8002bec <HAL_DMA_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_UART_MspInit+0x1de>
      Error_Handler();
 800279a:	f7ff fc6d 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a22      	ldr	r2, [pc, #136]	@ (800282c <HAL_UART_MspInit+0x26c>)
 80027a2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80027a4:	4a21      	ldr	r2, [pc, #132]	@ (800282c <HAL_UART_MspInit+0x26c>)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80027aa:	4b22      	ldr	r3, [pc, #136]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027ac:	4a22      	ldr	r2, [pc, #136]	@ (8002838 <HAL_UART_MspInit+0x278>)
 80027ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027b0:	4b20      	ldr	r3, [pc, #128]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027b2:	2210      	movs	r2, #16
 80027b4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027b6:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027c4:	2200      	movs	r2, #0
 80027c6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80027ce:	4b19      	ldr	r3, [pc, #100]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80027d4:	4b17      	ldr	r3, [pc, #92]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80027da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80027dc:	4815      	ldr	r0, [pc, #84]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027de:	f000 fa05 	bl	8002bec <HAL_DMA_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_UART_MspInit+0x22c>
      Error_Handler();
 80027e8:	f7ff fc46 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a11      	ldr	r2, [pc, #68]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80027f2:	4a10      	ldr	r2, [pc, #64]	@ (8002834 <HAL_UART_MspInit+0x274>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80027f8:	2200      	movs	r2, #0
 80027fa:	2105      	movs	r1, #5
 80027fc:	2026      	movs	r0, #38	@ 0x26
 80027fe:	f000 f9ca 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002802:	2026      	movs	r0, #38	@ 0x26
 8002804:	f000 f9e3 	bl	8002bce <HAL_NVIC_EnableIRQ>
}
 8002808:	e0a6      	b.n	8002958 <HAL_UART_MspInit+0x398>
 800280a:	bf00      	nop
 800280c:	40013800 	.word	0x40013800
 8002810:	40021000 	.word	0x40021000
 8002814:	40010800 	.word	0x40010800
 8002818:	200004e0 	.word	0x200004e0
 800281c:	40020058 	.word	0x40020058
 8002820:	20000524 	.word	0x20000524
 8002824:	40020044 	.word	0x40020044
 8002828:	40004400 	.word	0x40004400
 800282c:	20000568 	.word	0x20000568
 8002830:	4002006c 	.word	0x4002006c
 8002834:	200005ac 	.word	0x200005ac
 8002838:	40020080 	.word	0x40020080
  else if(uartHandle->Instance==USART3)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a47      	ldr	r2, [pc, #284]	@ (8002960 <HAL_UART_MspInit+0x3a0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	f040 8088 	bne.w	8002958 <HAL_UART_MspInit+0x398>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002848:	4b46      	ldr	r3, [pc, #280]	@ (8002964 <HAL_UART_MspInit+0x3a4>)
 800284a:	69db      	ldr	r3, [r3, #28]
 800284c:	4a45      	ldr	r2, [pc, #276]	@ (8002964 <HAL_UART_MspInit+0x3a4>)
 800284e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002852:	61d3      	str	r3, [r2, #28]
 8002854:	4b43      	ldr	r3, [pc, #268]	@ (8002964 <HAL_UART_MspInit+0x3a4>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002860:	4b40      	ldr	r3, [pc, #256]	@ (8002964 <HAL_UART_MspInit+0x3a4>)
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	4a3f      	ldr	r2, [pc, #252]	@ (8002964 <HAL_UART_MspInit+0x3a4>)
 8002866:	f043 0308 	orr.w	r3, r3, #8
 800286a:	6193      	str	r3, [r2, #24]
 800286c:	4b3d      	ldr	r3, [pc, #244]	@ (8002964 <HAL_UART_MspInit+0x3a4>)
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002878:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002882:	2303      	movs	r3, #3
 8002884:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002886:	f107 0320 	add.w	r3, r7, #32
 800288a:	4619      	mov	r1, r3
 800288c:	4836      	ldr	r0, [pc, #216]	@ (8002968 <HAL_UART_MspInit+0x3a8>)
 800288e:	f000 fc4f 	bl	8003130 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002892:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002898:	2300      	movs	r3, #0
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a0:	f107 0320 	add.w	r3, r7, #32
 80028a4:	4619      	mov	r1, r3
 80028a6:	4830      	ldr	r0, [pc, #192]	@ (8002968 <HAL_UART_MspInit+0x3a8>)
 80028a8:	f000 fc42 	bl	8003130 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80028ac:	4b2f      	ldr	r3, [pc, #188]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028ae:	4a30      	ldr	r2, [pc, #192]	@ (8002970 <HAL_UART_MspInit+0x3b0>)
 80028b0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028b2:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028b8:	4b2c      	ldr	r3, [pc, #176]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028be:	4b2b      	ldr	r3, [pc, #172]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028c0:	2280      	movs	r2, #128	@ 0x80
 80028c2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028c4:	4b29      	ldr	r3, [pc, #164]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028ca:	4b28      	ldr	r3, [pc, #160]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80028d0:	4b26      	ldr	r3, [pc, #152]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028d2:	2220      	movs	r2, #32
 80028d4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80028d6:	4b25      	ldr	r3, [pc, #148]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80028dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80028de:	4823      	ldr	r0, [pc, #140]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028e0:	f000 f984 	bl	8002bec <HAL_DMA_Init>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <HAL_UART_MspInit+0x32e>
      Error_Handler();
 80028ea:	f7ff fbc5 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1e      	ldr	r2, [pc, #120]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028f2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028f4:	4a1d      	ldr	r2, [pc, #116]	@ (800296c <HAL_UART_MspInit+0x3ac>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6253      	str	r3, [r2, #36]	@ 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 80028fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 80028fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002978 <HAL_UART_MspInit+0x3b8>)
 80028fe:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002900:	4b1c      	ldr	r3, [pc, #112]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 8002902:	2210      	movs	r2, #16
 8002904:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002906:	4b1b      	ldr	r3, [pc, #108]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 8002908:	2200      	movs	r2, #0
 800290a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800290c:	4b19      	ldr	r3, [pc, #100]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 800290e:	2280      	movs	r2, #128	@ 0x80
 8002910:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002912:	4b18      	ldr	r3, [pc, #96]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 8002914:	2200      	movs	r2, #0
 8002916:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002918:	4b16      	ldr	r3, [pc, #88]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 800291a:	2200      	movs	r2, #0
 800291c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800291e:	4b15      	ldr	r3, [pc, #84]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 8002920:	2200      	movs	r2, #0
 8002922:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002924:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 8002926:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800292a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800292c:	4811      	ldr	r0, [pc, #68]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 800292e:	f000 f95d 	bl	8002bec <HAL_DMA_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_UART_MspInit+0x37c>
      Error_Handler();
 8002938:	f7ff fb9e 	bl	8002078 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a0d      	ldr	r2, [pc, #52]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 8002940:	639a      	str	r2, [r3, #56]	@ 0x38
 8002942:	4a0c      	ldr	r2, [pc, #48]	@ (8002974 <HAL_UART_MspInit+0x3b4>)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002948:	2200      	movs	r2, #0
 800294a:	2105      	movs	r1, #5
 800294c:	2027      	movs	r0, #39	@ 0x27
 800294e:	f000 f922 	bl	8002b96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002952:	2027      	movs	r0, #39	@ 0x27
 8002954:	f000 f93b 	bl	8002bce <HAL_NVIC_EnableIRQ>
}
 8002958:	bf00      	nop
 800295a:	3730      	adds	r7, #48	@ 0x30
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40004800 	.word	0x40004800
 8002964:	40021000 	.word	0x40021000
 8002968:	40010c00 	.word	0x40010c00
 800296c:	200005f0 	.word	0x200005f0
 8002970:	40020030 	.word	0x40020030
 8002974:	20000634 	.word	0x20000634
 8002978:	4002001c 	.word	0x4002001c

0800297c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800297c:	f7ff fcbe 	bl	80022fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002980:	480b      	ldr	r0, [pc, #44]	@ (80029b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002982:	490c      	ldr	r1, [pc, #48]	@ (80029b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002984:	4a0c      	ldr	r2, [pc, #48]	@ (80029b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002988:	e002      	b.n	8002990 <LoopCopyDataInit>

0800298a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800298a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800298c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800298e:	3304      	adds	r3, #4

08002990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002994:	d3f9      	bcc.n	800298a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002996:	4a09      	ldr	r2, [pc, #36]	@ (80029bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002998:	4c09      	ldr	r4, [pc, #36]	@ (80029c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800299a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800299c:	e001      	b.n	80029a2 <LoopFillZerobss>

0800299e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800299e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029a0:	3204      	adds	r2, #4

080029a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029a4:	d3fb      	bcc.n	800299e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029a6:	f006 f8d1 	bl	8008b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80029aa:	f7ff fa67 	bl	8001e7c <main>
  bx lr
 80029ae:	4770      	bx	lr
  ldr r0, =_sdata
 80029b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80029b8:	0800905c 	.word	0x0800905c
  ldr r2, =_sbss
 80029bc:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 80029c0:	200033c4 	.word	0x200033c4

080029c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029c4:	e7fe      	b.n	80029c4 <ADC1_2_IRQHandler>
	...

080029c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_Init+0x28>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a07      	ldr	r2, [pc, #28]	@ (80029f0 <HAL_Init+0x28>)
 80029d2:	f043 0310 	orr.w	r3, r3, #16
 80029d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 f8d1 	bl	8002b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029de:	200f      	movs	r0, #15
 80029e0:	f7ff fb88 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e4:	f7ff fb4e 	bl	8002084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40022000 	.word	0x40022000

080029f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b05      	ldr	r3, [pc, #20]	@ (8002a10 <HAL_IncTick+0x1c>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b05      	ldr	r3, [pc, #20]	@ (8002a14 <HAL_IncTick+0x20>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a03      	ldr	r2, [pc, #12]	@ (8002a14 <HAL_IncTick+0x20>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr
 8002a10:	20000008 	.word	0x20000008
 8002a14:	20000678 	.word	0x20000678

08002a18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b02      	ldr	r3, [pc, #8]	@ (8002a28 <HAL_GetTick+0x10>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	20000678 	.word	0x20000678

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	@ (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bc80      	pop	{r7}
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	@ (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bc80      	pop	{r7}
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4906      	ldr	r1, [pc, #24]	@ (8002ac4 <__NVIC_EnableIRQ+0x34>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	6039      	str	r1, [r7, #0]
 8002ad2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	db0a      	blt.n	8002af2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	b2da      	uxtb	r2, r3
 8002ae0:	490c      	ldr	r1, [pc, #48]	@ (8002b14 <__NVIC_SetPriority+0x4c>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	0112      	lsls	r2, r2, #4
 8002ae8:	b2d2      	uxtb	r2, r2
 8002aea:	440b      	add	r3, r1
 8002aec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af0:	e00a      	b.n	8002b08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	b2da      	uxtb	r2, r3
 8002af6:	4908      	ldr	r1, [pc, #32]	@ (8002b18 <__NVIC_SetPriority+0x50>)
 8002af8:	79fb      	ldrb	r3, [r7, #7]
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	3b04      	subs	r3, #4
 8002b00:	0112      	lsls	r2, r2, #4
 8002b02:	b2d2      	uxtb	r2, r2
 8002b04:	440b      	add	r3, r1
 8002b06:	761a      	strb	r2, [r3, #24]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bc80      	pop	{r7}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000e100 	.word	0xe000e100
 8002b18:	e000ed00 	.word	0xe000ed00

08002b1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b089      	sub	sp, #36	@ 0x24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	f1c3 0307 	rsb	r3, r3, #7
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	bf28      	it	cs
 8002b3a:	2304      	movcs	r3, #4
 8002b3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d902      	bls.n	8002b4c <NVIC_EncodePriority+0x30>
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	3b03      	subs	r3, #3
 8002b4a:	e000      	b.n	8002b4e <NVIC_EncodePriority+0x32>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b50:	f04f 32ff 	mov.w	r2, #4294967295
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43da      	mvns	r2, r3
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	401a      	ands	r2, r3
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b6e:	43d9      	mvns	r1, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b74:	4313      	orrs	r3, r2
         );
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3724      	adds	r7, #36	@ 0x24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr

08002b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff ff4f 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	60b9      	str	r1, [r7, #8]
 8002ba0:	607a      	str	r2, [r7, #4]
 8002ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ba8:	f7ff ff64 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ffb2 	bl	8002b1c <NVIC_EncodePriority>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff ff81 	bl	8002ac8 <__NVIC_SetPriority>
}
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b082      	sub	sp, #8
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff ff57 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
	...

08002bec <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e043      	b.n	8002c8a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	4b22      	ldr	r3, [pc, #136]	@ (8002c94 <HAL_DMA_Init+0xa8>)
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a22      	ldr	r2, [pc, #136]	@ (8002c98 <HAL_DMA_Init+0xac>)
 8002c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	009a      	lsls	r2, r3, #2
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8002c9c <HAL_DMA_Init+0xb0>)
 8002c1e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002c36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002c3a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002c44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c64:	68fa      	ldr	r2, [r7, #12]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	bffdfff8 	.word	0xbffdfff8
 8002c98:	cccccccd 	.word	0xcccccccd
 8002c9c:	40020000 	.word	0x40020000

08002ca0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b086      	sub	sp, #24
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	60f8      	str	r0, [r7, #12]
 8002ca8:	60b9      	str	r1, [r7, #8]
 8002caa:	607a      	str	r2, [r7, #4]
 8002cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_DMA_Start_IT+0x20>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e04b      	b.n	8002d58 <HAL_DMA_Start_IT+0xb8>
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d13a      	bne.n	8002d4a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	687a      	ldr	r2, [r7, #4]
 8002cf6:	68b9      	ldr	r1, [r7, #8]
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 f9eb 	bl	80030d4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d008      	beq.n	8002d18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 020e 	orr.w	r2, r2, #14
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	e00f      	b.n	8002d38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0204 	bic.w	r2, r2, #4
 8002d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f042 020a 	orr.w	r2, r2, #10
 8002d36:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f042 0201 	orr.w	r2, r2, #1
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e005      	b.n	8002d56 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d52:	2302      	movs	r3, #2
 8002d54:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002d56:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b085      	sub	sp, #20
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d008      	beq.n	8002d8a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2204      	movs	r2, #4
 8002d7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e020      	b.n	8002dcc <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 020e 	bic.w	r2, r2, #14
 8002d98:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f022 0201 	bic.w	r2, r2, #1
 8002da8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002db2:	2101      	movs	r1, #1
 8002db4:	fa01 f202 	lsl.w	r2, r1, r2
 8002db8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d005      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2204      	movs	r2, #4
 8002df4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	73fb      	strb	r3, [r7, #15]
 8002dfa:	e051      	b.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 020e 	bic.w	r2, r2, #14
 8002e0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f022 0201 	bic.w	r2, r2, #1
 8002e1a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a22      	ldr	r2, [pc, #136]	@ (8002eac <HAL_DMA_Abort_IT+0xd4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d029      	beq.n	8002e7a <HAL_DMA_Abort_IT+0xa2>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a21      	ldr	r2, [pc, #132]	@ (8002eb0 <HAL_DMA_Abort_IT+0xd8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d022      	beq.n	8002e76 <HAL_DMA_Abort_IT+0x9e>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1f      	ldr	r2, [pc, #124]	@ (8002eb4 <HAL_DMA_Abort_IT+0xdc>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01a      	beq.n	8002e70 <HAL_DMA_Abort_IT+0x98>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb8 <HAL_DMA_Abort_IT+0xe0>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d012      	beq.n	8002e6a <HAL_DMA_Abort_IT+0x92>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1c      	ldr	r2, [pc, #112]	@ (8002ebc <HAL_DMA_Abort_IT+0xe4>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00a      	beq.n	8002e64 <HAL_DMA_Abort_IT+0x8c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a1b      	ldr	r2, [pc, #108]	@ (8002ec0 <HAL_DMA_Abort_IT+0xe8>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d102      	bne.n	8002e5e <HAL_DMA_Abort_IT+0x86>
 8002e58:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002e5c:	e00e      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e5e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e62:	e00b      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002e68:	e008      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e6a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002e6e:	e005      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e74:	e002      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e76:	2310      	movs	r3, #16
 8002e78:	e000      	b.n	8002e7c <HAL_DMA_Abort_IT+0xa4>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	4a11      	ldr	r2, [pc, #68]	@ (8002ec4 <HAL_DMA_Abort_IT+0xec>)
 8002e7e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	4798      	blx	r3
    } 
  }
  return status;
 8002ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40020008 	.word	0x40020008
 8002eb0:	4002001c 	.word	0x4002001c
 8002eb4:	40020030 	.word	0x40020030
 8002eb8:	40020044 	.word	0x40020044
 8002ebc:	40020058 	.word	0x40020058
 8002ec0:	4002006c 	.word	0x4002006c
 8002ec4:	40020000 	.word	0x40020000

08002ec8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d04f      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xc8>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f003 0304 	and.w	r3, r3, #4
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d04a      	beq.n	8002f90 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f022 0204 	bic.w	r2, r2, #4
 8002f16:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a66      	ldr	r2, [pc, #408]	@ (80030b8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d029      	beq.n	8002f76 <HAL_DMA_IRQHandler+0xae>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_DMA_IRQHandler+0x1f4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_IRQHandler+0xaa>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a63      	ldr	r2, [pc, #396]	@ (80030c0 <HAL_DMA_IRQHandler+0x1f8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01a      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xa4>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a62      	ldr	r2, [pc, #392]	@ (80030c4 <HAL_DMA_IRQHandler+0x1fc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d012      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x9e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a60      	ldr	r2, [pc, #384]	@ (80030c8 <HAL_DMA_IRQHandler+0x200>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00a      	beq.n	8002f60 <HAL_DMA_IRQHandler+0x98>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a5f      	ldr	r2, [pc, #380]	@ (80030cc <HAL_DMA_IRQHandler+0x204>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d102      	bne.n	8002f5a <HAL_DMA_IRQHandler+0x92>
 8002f54:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002f58:	e00e      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f5a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002f5e:	e00b      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f60:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002f64:	e008      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f66:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002f6a:	e005      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f70:	e002      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f72:	2340      	movs	r3, #64	@ 0x40
 8002f74:	e000      	b.n	8002f78 <HAL_DMA_IRQHandler+0xb0>
 8002f76:	2304      	movs	r3, #4
 8002f78:	4a55      	ldr	r2, [pc, #340]	@ (80030d0 <HAL_DMA_IRQHandler+0x208>)
 8002f7a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f000 8094 	beq.w	80030ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002f8e:	e08e      	b.n	80030ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f94:	2202      	movs	r2, #2
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d056      	beq.n	800304e <HAL_DMA_IRQHandler+0x186>
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d051      	beq.n	800304e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10b      	bne.n	8002fd0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f022 020a 	bic.w	r2, r2, #10
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a38      	ldr	r2, [pc, #224]	@ (80030b8 <HAL_DMA_IRQHandler+0x1f0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d029      	beq.n	800302e <HAL_DMA_IRQHandler+0x166>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a37      	ldr	r2, [pc, #220]	@ (80030bc <HAL_DMA_IRQHandler+0x1f4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d022      	beq.n	800302a <HAL_DMA_IRQHandler+0x162>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a35      	ldr	r2, [pc, #212]	@ (80030c0 <HAL_DMA_IRQHandler+0x1f8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d01a      	beq.n	8003024 <HAL_DMA_IRQHandler+0x15c>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a34      	ldr	r2, [pc, #208]	@ (80030c4 <HAL_DMA_IRQHandler+0x1fc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d012      	beq.n	800301e <HAL_DMA_IRQHandler+0x156>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a32      	ldr	r2, [pc, #200]	@ (80030c8 <HAL_DMA_IRQHandler+0x200>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00a      	beq.n	8003018 <HAL_DMA_IRQHandler+0x150>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a31      	ldr	r2, [pc, #196]	@ (80030cc <HAL_DMA_IRQHandler+0x204>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d102      	bne.n	8003012 <HAL_DMA_IRQHandler+0x14a>
 800300c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003010:	e00e      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 8003012:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003016:	e00b      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 8003018:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800301c:	e008      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 800301e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003022:	e005      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 8003024:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003028:	e002      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 800302a:	2320      	movs	r3, #32
 800302c:	e000      	b.n	8003030 <HAL_DMA_IRQHandler+0x168>
 800302e:	2302      	movs	r3, #2
 8003030:	4a27      	ldr	r2, [pc, #156]	@ (80030d0 <HAL_DMA_IRQHandler+0x208>)
 8003032:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	2b00      	cmp	r3, #0
 8003042:	d034      	beq.n	80030ae <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800304c:	e02f      	b.n	80030ae <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	2208      	movs	r2, #8
 8003054:	409a      	lsls	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4013      	ands	r3, r2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d028      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x1e8>
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d023      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 020e 	bic.w	r2, r2, #14
 8003076:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003080:	2101      	movs	r1, #1
 8003082:	fa01 f202 	lsl.w	r2, r1, r2
 8003086:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d004      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	4798      	blx	r3
    }
  }
  return;
 80030ae:	bf00      	nop
 80030b0:	bf00      	nop
}
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40020008 	.word	0x40020008
 80030bc:	4002001c 	.word	0x4002001c
 80030c0:	40020030 	.word	0x40020030
 80030c4:	40020044 	.word	0x40020044
 80030c8:	40020058 	.word	0x40020058
 80030cc:	4002006c 	.word	0x4002006c
 80030d0:	40020000 	.word	0x40020000

080030d4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d108      	bne.n	8003114 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003112:	e007      	b.n	8003124 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
	...

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b08b      	sub	sp, #44	@ 0x2c
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800313a:	2300      	movs	r3, #0
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800313e:	2300      	movs	r3, #0
 8003140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003142:	e169      	b.n	8003418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003144:	2201      	movs	r2, #1
 8003146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	429a      	cmp	r2, r3
 800315e:	f040 8158 	bne.w	8003412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	4a9a      	ldr	r2, [pc, #616]	@ (80033d0 <HAL_GPIO_Init+0x2a0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d05e      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 800316c:	4a98      	ldr	r2, [pc, #608]	@ (80033d0 <HAL_GPIO_Init+0x2a0>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d875      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 8003172:	4a98      	ldr	r2, [pc, #608]	@ (80033d4 <HAL_GPIO_Init+0x2a4>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d058      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 8003178:	4a96      	ldr	r2, [pc, #600]	@ (80033d4 <HAL_GPIO_Init+0x2a4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d86f      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 800317e:	4a96      	ldr	r2, [pc, #600]	@ (80033d8 <HAL_GPIO_Init+0x2a8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d052      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 8003184:	4a94      	ldr	r2, [pc, #592]	@ (80033d8 <HAL_GPIO_Init+0x2a8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d869      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 800318a:	4a94      	ldr	r2, [pc, #592]	@ (80033dc <HAL_GPIO_Init+0x2ac>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d04c      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 8003190:	4a92      	ldr	r2, [pc, #584]	@ (80033dc <HAL_GPIO_Init+0x2ac>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d863      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 8003196:	4a92      	ldr	r2, [pc, #584]	@ (80033e0 <HAL_GPIO_Init+0x2b0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d046      	beq.n	800322a <HAL_GPIO_Init+0xfa>
 800319c:	4a90      	ldr	r2, [pc, #576]	@ (80033e0 <HAL_GPIO_Init+0x2b0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d85d      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 80031a2:	2b12      	cmp	r3, #18
 80031a4:	d82a      	bhi.n	80031fc <HAL_GPIO_Init+0xcc>
 80031a6:	2b12      	cmp	r3, #18
 80031a8:	d859      	bhi.n	800325e <HAL_GPIO_Init+0x12e>
 80031aa:	a201      	add	r2, pc, #4	@ (adr r2, 80031b0 <HAL_GPIO_Init+0x80>)
 80031ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b0:	0800322b 	.word	0x0800322b
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003217 	.word	0x08003217
 80031bc:	08003259 	.word	0x08003259
 80031c0:	0800325f 	.word	0x0800325f
 80031c4:	0800325f 	.word	0x0800325f
 80031c8:	0800325f 	.word	0x0800325f
 80031cc:	0800325f 	.word	0x0800325f
 80031d0:	0800325f 	.word	0x0800325f
 80031d4:	0800325f 	.word	0x0800325f
 80031d8:	0800325f 	.word	0x0800325f
 80031dc:	0800325f 	.word	0x0800325f
 80031e0:	0800325f 	.word	0x0800325f
 80031e4:	0800325f 	.word	0x0800325f
 80031e8:	0800325f 	.word	0x0800325f
 80031ec:	0800325f 	.word	0x0800325f
 80031f0:	0800325f 	.word	0x0800325f
 80031f4:	0800320d 	.word	0x0800320d
 80031f8:	08003221 	.word	0x08003221
 80031fc:	4a79      	ldr	r2, [pc, #484]	@ (80033e4 <HAL_GPIO_Init+0x2b4>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003202:	e02c      	b.n	800325e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	623b      	str	r3, [r7, #32]
          break;
 800320a:	e029      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	3304      	adds	r3, #4
 8003212:	623b      	str	r3, [r7, #32]
          break;
 8003214:	e024      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	3308      	adds	r3, #8
 800321c:	623b      	str	r3, [r7, #32]
          break;
 800321e:	e01f      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	330c      	adds	r3, #12
 8003226:	623b      	str	r3, [r7, #32]
          break;
 8003228:	e01a      	b.n	8003260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d102      	bne.n	8003238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003232:	2304      	movs	r3, #4
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e013      	b.n	8003260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003240:	2308      	movs	r3, #8
 8003242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69fa      	ldr	r2, [r7, #28]
 8003248:	611a      	str	r2, [r3, #16]
          break;
 800324a:	e009      	b.n	8003260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800324c:	2308      	movs	r3, #8
 800324e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	615a      	str	r2, [r3, #20]
          break;
 8003256:	e003      	b.n	8003260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003258:	2300      	movs	r3, #0
 800325a:	623b      	str	r3, [r7, #32]
          break;
 800325c:	e000      	b.n	8003260 <HAL_GPIO_Init+0x130>
          break;
 800325e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	2bff      	cmp	r3, #255	@ 0xff
 8003264:	d801      	bhi.n	800326a <HAL_GPIO_Init+0x13a>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	e001      	b.n	800326e <HAL_GPIO_Init+0x13e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2bff      	cmp	r3, #255	@ 0xff
 8003274:	d802      	bhi.n	800327c <HAL_GPIO_Init+0x14c>
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	e002      	b.n	8003282 <HAL_GPIO_Init+0x152>
 800327c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327e:	3b08      	subs	r3, #8
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	210f      	movs	r1, #15
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	fa01 f303 	lsl.w	r3, r1, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	401a      	ands	r2, r3
 8003294:	6a39      	ldr	r1, [r7, #32]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	431a      	orrs	r2, r3
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	f000 80b1 	beq.w	8003412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032b0:	4b4d      	ldr	r3, [pc, #308]	@ (80033e8 <HAL_GPIO_Init+0x2b8>)
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	4a4c      	ldr	r2, [pc, #304]	@ (80033e8 <HAL_GPIO_Init+0x2b8>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6193      	str	r3, [r2, #24]
 80032bc:	4b4a      	ldr	r3, [pc, #296]	@ (80033e8 <HAL_GPIO_Init+0x2b8>)
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032c8:	4a48      	ldr	r2, [pc, #288]	@ (80033ec <HAL_GPIO_Init+0x2bc>)
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d8:	f003 0303 	and.w	r3, r3, #3
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	220f      	movs	r2, #15
 80032e0:	fa02 f303 	lsl.w	r3, r2, r3
 80032e4:	43db      	mvns	r3, r3
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	4013      	ands	r3, r2
 80032ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a40      	ldr	r2, [pc, #256]	@ (80033f0 <HAL_GPIO_Init+0x2c0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d013      	beq.n	800331c <HAL_GPIO_Init+0x1ec>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a3f      	ldr	r2, [pc, #252]	@ (80033f4 <HAL_GPIO_Init+0x2c4>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d00d      	beq.n	8003318 <HAL_GPIO_Init+0x1e8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	4a3e      	ldr	r2, [pc, #248]	@ (80033f8 <HAL_GPIO_Init+0x2c8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d007      	beq.n	8003314 <HAL_GPIO_Init+0x1e4>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a3d      	ldr	r2, [pc, #244]	@ (80033fc <HAL_GPIO_Init+0x2cc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d101      	bne.n	8003310 <HAL_GPIO_Init+0x1e0>
 800330c:	2303      	movs	r3, #3
 800330e:	e006      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 8003310:	2304      	movs	r3, #4
 8003312:	e004      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 8003314:	2302      	movs	r3, #2
 8003316:	e002      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 8003318:	2301      	movs	r3, #1
 800331a:	e000      	b.n	800331e <HAL_GPIO_Init+0x1ee>
 800331c:	2300      	movs	r3, #0
 800331e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003320:	f002 0203 	and.w	r2, r2, #3
 8003324:	0092      	lsls	r2, r2, #2
 8003326:	4093      	lsls	r3, r2
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800332e:	492f      	ldr	r1, [pc, #188]	@ (80033ec <HAL_GPIO_Init+0x2bc>)
 8003330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003332:	089b      	lsrs	r3, r3, #2
 8003334:	3302      	adds	r3, #2
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d006      	beq.n	8003356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003348:	4b2d      	ldr	r3, [pc, #180]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	492c      	ldr	r1, [pc, #176]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	4313      	orrs	r3, r2
 8003352:	608b      	str	r3, [r1, #8]
 8003354:	e006      	b.n	8003364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003356:	4b2a      	ldr	r3, [pc, #168]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	43db      	mvns	r3, r3
 800335e:	4928      	ldr	r1, [pc, #160]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 8003360:	4013      	ands	r3, r2
 8003362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d006      	beq.n	800337e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003370:	4b23      	ldr	r3, [pc, #140]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	4922      	ldr	r1, [pc, #136]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	4313      	orrs	r3, r2
 800337a:	60cb      	str	r3, [r1, #12]
 800337c:	e006      	b.n	800338c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 8003380:	68da      	ldr	r2, [r3, #12]
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	43db      	mvns	r3, r3
 8003386:	491e      	ldr	r1, [pc, #120]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 8003388:	4013      	ands	r3, r2
 800338a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003398:	4b19      	ldr	r3, [pc, #100]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	4918      	ldr	r1, [pc, #96]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	604b      	str	r3, [r1, #4]
 80033a4:	e006      	b.n	80033b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033a6:	4b16      	ldr	r3, [pc, #88]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	43db      	mvns	r3, r3
 80033ae:	4914      	ldr	r1, [pc, #80]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 80033b0:	4013      	ands	r3, r2
 80033b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d021      	beq.n	8003404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	490e      	ldr	r1, [pc, #56]	@ (8003400 <HAL_GPIO_Init+0x2d0>)
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
 80033cc:	e021      	b.n	8003412 <HAL_GPIO_Init+0x2e2>
 80033ce:	bf00      	nop
 80033d0:	10320000 	.word	0x10320000
 80033d4:	10310000 	.word	0x10310000
 80033d8:	10220000 	.word	0x10220000
 80033dc:	10210000 	.word	0x10210000
 80033e0:	10120000 	.word	0x10120000
 80033e4:	10110000 	.word	0x10110000
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40010800 	.word	0x40010800
 80033f4:	40010c00 	.word	0x40010c00
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40011400 	.word	0x40011400
 8003400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003404:	4b0b      	ldr	r3, [pc, #44]	@ (8003434 <HAL_GPIO_Init+0x304>)
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	43db      	mvns	r3, r3
 800340c:	4909      	ldr	r1, [pc, #36]	@ (8003434 <HAL_GPIO_Init+0x304>)
 800340e:	4013      	ands	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003414:	3301      	adds	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341e:	fa22 f303 	lsr.w	r3, r2, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	f47f ae8e 	bne.w	8003144 <HAL_GPIO_Init+0x14>
  }
}
 8003428:	bf00      	nop
 800342a:	bf00      	nop
 800342c:	372c      	adds	r7, #44	@ 0x2c
 800342e:	46bd      	mov	sp, r7
 8003430:	bc80      	pop	{r7}
 8003432:	4770      	bx	lr
 8003434:	40010400 	.word	0x40010400

08003438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e272      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8087 	beq.w	8003566 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003458:	4b92      	ldr	r3, [pc, #584]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b04      	cmp	r3, #4
 8003462:	d00c      	beq.n	800347e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003464:	4b8f      	ldr	r3, [pc, #572]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f003 030c 	and.w	r3, r3, #12
 800346c:	2b08      	cmp	r3, #8
 800346e:	d112      	bne.n	8003496 <HAL_RCC_OscConfig+0x5e>
 8003470:	4b8c      	ldr	r3, [pc, #560]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800347c:	d10b      	bne.n	8003496 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347e:	4b89      	ldr	r3, [pc, #548]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003486:	2b00      	cmp	r3, #0
 8003488:	d06c      	beq.n	8003564 <HAL_RCC_OscConfig+0x12c>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d168      	bne.n	8003564 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e24c      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x76>
 80034a0:	4b80      	ldr	r3, [pc, #512]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a7f      	ldr	r2, [pc, #508]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034aa:	6013      	str	r3, [r2, #0]
 80034ac:	e02e      	b.n	800350c <HAL_RCC_OscConfig+0xd4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x98>
 80034b6:	4b7b      	ldr	r3, [pc, #492]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a7a      	ldr	r2, [pc, #488]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034c0:	6013      	str	r3, [r2, #0]
 80034c2:	4b78      	ldr	r3, [pc, #480]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a77      	ldr	r2, [pc, #476]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	e01d      	b.n	800350c <HAL_RCC_OscConfig+0xd4>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034d8:	d10c      	bne.n	80034f4 <HAL_RCC_OscConfig+0xbc>
 80034da:	4b72      	ldr	r3, [pc, #456]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a71      	ldr	r2, [pc, #452]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	4b6f      	ldr	r3, [pc, #444]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a6e      	ldr	r2, [pc, #440]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034f0:	6013      	str	r3, [r2, #0]
 80034f2:	e00b      	b.n	800350c <HAL_RCC_OscConfig+0xd4>
 80034f4:	4b6b      	ldr	r3, [pc, #428]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a6a      	ldr	r2, [pc, #424]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80034fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034fe:	6013      	str	r3, [r2, #0]
 8003500:	4b68      	ldr	r3, [pc, #416]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a67      	ldr	r2, [pc, #412]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003506:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800350a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d013      	beq.n	800353c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003514:	f7ff fa80 	bl	8002a18 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	e008      	b.n	800352e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800351c:	f7ff fa7c 	bl	8002a18 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	2b64      	cmp	r3, #100	@ 0x64
 8003528:	d901      	bls.n	800352e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e200      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800352e:	4b5d      	ldr	r3, [pc, #372]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d0f0      	beq.n	800351c <HAL_RCC_OscConfig+0xe4>
 800353a:	e014      	b.n	8003566 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353c:	f7ff fa6c 	bl	8002a18 <HAL_GetTick>
 8003540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003542:	e008      	b.n	8003556 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003544:	f7ff fa68 	bl	8002a18 <HAL_GetTick>
 8003548:	4602      	mov	r2, r0
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1ad3      	subs	r3, r2, r3
 800354e:	2b64      	cmp	r3, #100	@ 0x64
 8003550:	d901      	bls.n	8003556 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e1ec      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003556:	4b53      	ldr	r3, [pc, #332]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355e:	2b00      	cmp	r3, #0
 8003560:	d1f0      	bne.n	8003544 <HAL_RCC_OscConfig+0x10c>
 8003562:	e000      	b.n	8003566 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d063      	beq.n	800363a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003572:	4b4c      	ldr	r3, [pc, #304]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800357e:	4b49      	ldr	r3, [pc, #292]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b08      	cmp	r3, #8
 8003588:	d11c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x18c>
 800358a:	4b46      	ldr	r3, [pc, #280]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d116      	bne.n	80035c4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	4b43      	ldr	r3, [pc, #268]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0302 	and.w	r3, r3, #2
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_RCC_OscConfig+0x176>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e1c0      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ae:	4b3d      	ldr	r3, [pc, #244]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	00db      	lsls	r3, r3, #3
 80035bc:	4939      	ldr	r1, [pc, #228]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c2:	e03a      	b.n	800363a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d020      	beq.n	800360e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035cc:	4b36      	ldr	r3, [pc, #216]	@ (80036a8 <HAL_RCC_OscConfig+0x270>)
 80035ce:	2201      	movs	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d2:	f7ff fa21 	bl	8002a18 <HAL_GetTick>
 80035d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d8:	e008      	b.n	80035ec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035da:	f7ff fa1d 	bl	8002a18 <HAL_GetTick>
 80035de:	4602      	mov	r2, r0
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	1ad3      	subs	r3, r2, r3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e1a1      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ec:	4b2d      	ldr	r3, [pc, #180]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0f0      	beq.n	80035da <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f8:	4b2a      	ldr	r3, [pc, #168]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	00db      	lsls	r3, r3, #3
 8003606:	4927      	ldr	r1, [pc, #156]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
 800360c:	e015      	b.n	800363a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800360e:	4b26      	ldr	r3, [pc, #152]	@ (80036a8 <HAL_RCC_OscConfig+0x270>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003614:	f7ff fa00 	bl	8002a18 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800361c:	f7ff f9fc 	bl	8002a18 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e180      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800362e:	4b1d      	ldr	r3, [pc, #116]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d1f0      	bne.n	800361c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0308 	and.w	r3, r3, #8
 8003642:	2b00      	cmp	r3, #0
 8003644:	d03a      	beq.n	80036bc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	699b      	ldr	r3, [r3, #24]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d019      	beq.n	8003682 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800364e:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <HAL_RCC_OscConfig+0x274>)
 8003650:	2201      	movs	r2, #1
 8003652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003654:	f7ff f9e0 	bl	8002a18 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800365a:	e008      	b.n	800366e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365c:	f7ff f9dc 	bl	8002a18 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d901      	bls.n	800366e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e160      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800366e:	4b0d      	ldr	r3, [pc, #52]	@ (80036a4 <HAL_RCC_OscConfig+0x26c>)
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d0f0      	beq.n	800365c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800367a:	2001      	movs	r0, #1
 800367c:	f000 fafe 	bl	8003c7c <RCC_Delay>
 8003680:	e01c      	b.n	80036bc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003682:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <HAL_RCC_OscConfig+0x274>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003688:	f7ff f9c6 	bl	8002a18 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800368e:	e00f      	b.n	80036b0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003690:	f7ff f9c2 	bl	8002a18 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d908      	bls.n	80036b0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e146      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
 80036a2:	bf00      	nop
 80036a4:	40021000 	.word	0x40021000
 80036a8:	42420000 	.word	0x42420000
 80036ac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b0:	4b92      	ldr	r3, [pc, #584]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d1e9      	bne.n	8003690 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0304 	and.w	r3, r3, #4
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	f000 80a6 	beq.w	8003816 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036ca:	2300      	movs	r3, #0
 80036cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ce:	4b8b      	ldr	r3, [pc, #556]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10d      	bne.n	80036f6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036da:	4b88      	ldr	r3, [pc, #544]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	4a87      	ldr	r2, [pc, #540]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036e4:	61d3      	str	r3, [r2, #28]
 80036e6:	4b85      	ldr	r3, [pc, #532]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036f2:	2301      	movs	r3, #1
 80036f4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f6:	4b82      	ldr	r3, [pc, #520]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d118      	bne.n	8003734 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003702:	4b7f      	ldr	r3, [pc, #508]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a7e      	ldr	r2, [pc, #504]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 8003708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800370c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800370e:	f7ff f983 	bl	8002a18 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003716:	f7ff f97f 	bl	8002a18 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b64      	cmp	r3, #100	@ 0x64
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e103      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003728:	4b75      	ldr	r3, [pc, #468]	@ (8003900 <HAL_RCC_OscConfig+0x4c8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0f0      	beq.n	8003716 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d106      	bne.n	800374a <HAL_RCC_OscConfig+0x312>
 800373c:	4b6f      	ldr	r3, [pc, #444]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4a6e      	ldr	r2, [pc, #440]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003742:	f043 0301 	orr.w	r3, r3, #1
 8003746:	6213      	str	r3, [r2, #32]
 8003748:	e02d      	b.n	80037a6 <HAL_RCC_OscConfig+0x36e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x334>
 8003752:	4b6a      	ldr	r3, [pc, #424]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4a69      	ldr	r2, [pc, #420]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003758:	f023 0301 	bic.w	r3, r3, #1
 800375c:	6213      	str	r3, [r2, #32]
 800375e:	4b67      	ldr	r3, [pc, #412]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4a66      	ldr	r2, [pc, #408]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003764:	f023 0304 	bic.w	r3, r3, #4
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	e01c      	b.n	80037a6 <HAL_RCC_OscConfig+0x36e>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b05      	cmp	r3, #5
 8003772:	d10c      	bne.n	800378e <HAL_RCC_OscConfig+0x356>
 8003774:	4b61      	ldr	r3, [pc, #388]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003776:	6a1b      	ldr	r3, [r3, #32]
 8003778:	4a60      	ldr	r2, [pc, #384]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800377a:	f043 0304 	orr.w	r3, r3, #4
 800377e:	6213      	str	r3, [r2, #32]
 8003780:	4b5e      	ldr	r3, [pc, #376]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003782:	6a1b      	ldr	r3, [r3, #32]
 8003784:	4a5d      	ldr	r2, [pc, #372]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003786:	f043 0301 	orr.w	r3, r3, #1
 800378a:	6213      	str	r3, [r2, #32]
 800378c:	e00b      	b.n	80037a6 <HAL_RCC_OscConfig+0x36e>
 800378e:	4b5b      	ldr	r3, [pc, #364]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4a5a      	ldr	r2, [pc, #360]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6213      	str	r3, [r2, #32]
 800379a:	4b58      	ldr	r3, [pc, #352]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	4a57      	ldr	r2, [pc, #348]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d015      	beq.n	80037da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ae:	f7ff f933 	bl	8002a18 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037b4:	e00a      	b.n	80037cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b6:	f7ff f92f 	bl	8002a18 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d901      	bls.n	80037cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e0b1      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037cc:	4b4b      	ldr	r3, [pc, #300]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d0ee      	beq.n	80037b6 <HAL_RCC_OscConfig+0x37e>
 80037d8:	e014      	b.n	8003804 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037da:	f7ff f91d 	bl	8002a18 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037e0:	e00a      	b.n	80037f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e2:	f7ff f919 	bl	8002a18 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e09b      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f8:	4b40      	ldr	r3, [pc, #256]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1ee      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003804:	7dfb      	ldrb	r3, [r7, #23]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d105      	bne.n	8003816 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800380a:	4b3c      	ldr	r3, [pc, #240]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	4a3b      	ldr	r2, [pc, #236]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003814:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8087 	beq.w	800392e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003820:	4b36      	ldr	r3, [pc, #216]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f003 030c 	and.w	r3, r3, #12
 8003828:	2b08      	cmp	r3, #8
 800382a:	d061      	beq.n	80038f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d146      	bne.n	80038c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b33      	ldr	r3, [pc, #204]	@ (8003904 <HAL_RCC_OscConfig+0x4cc>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7ff f8ed 	bl	8002a18 <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003842:	f7ff f8e9 	bl	8002a18 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e06d      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003854:	4b29      	ldr	r3, [pc, #164]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a1b      	ldr	r3, [r3, #32]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003868:	d108      	bne.n	800387c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800386a:	4b24      	ldr	r3, [pc, #144]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4921      	ldr	r1, [pc, #132]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003878:	4313      	orrs	r3, r2
 800387a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800387c:	4b1f      	ldr	r3, [pc, #124]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a19      	ldr	r1, [r3, #32]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388c:	430b      	orrs	r3, r1
 800388e:	491b      	ldr	r1, [pc, #108]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003894:	4b1b      	ldr	r3, [pc, #108]	@ (8003904 <HAL_RCC_OscConfig+0x4cc>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800389a:	f7ff f8bd 	bl	8002a18 <HAL_GetTick>
 800389e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038a0:	e008      	b.n	80038b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a2:	f7ff f8b9 	bl	8002a18 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e03d      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80038b4:	4b11      	ldr	r3, [pc, #68]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0f0      	beq.n	80038a2 <HAL_RCC_OscConfig+0x46a>
 80038c0:	e035      	b.n	800392e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <HAL_RCC_OscConfig+0x4cc>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038c8:	f7ff f8a6 	bl	8002a18 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7ff f8a2 	bl	8002a18 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e026      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038e2:	4b06      	ldr	r3, [pc, #24]	@ (80038fc <HAL_RCC_OscConfig+0x4c4>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1f0      	bne.n	80038d0 <HAL_RCC_OscConfig+0x498>
 80038ee:	e01e      	b.n	800392e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e019      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
 80038fc:	40021000 	.word	0x40021000
 8003900:	40007000 	.word	0x40007000
 8003904:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003908:	4b0b      	ldr	r3, [pc, #44]	@ (8003938 <HAL_RCC_OscConfig+0x500>)
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a1b      	ldr	r3, [r3, #32]
 8003918:	429a      	cmp	r2, r3
 800391a:	d106      	bne.n	800392a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	429a      	cmp	r2, r3
 8003928:	d001      	beq.n	800392e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000

0800393c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d101      	bne.n	8003950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0d0      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003950:	4b6a      	ldr	r3, [pc, #424]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	683a      	ldr	r2, [r7, #0]
 800395a:	429a      	cmp	r2, r3
 800395c:	d910      	bls.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800395e:	4b67      	ldr	r3, [pc, #412]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f023 0207 	bic.w	r2, r3, #7
 8003966:	4965      	ldr	r1, [pc, #404]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	4313      	orrs	r3, r2
 800396c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800396e:	4b63      	ldr	r3, [pc, #396]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0307 	and.w	r3, r3, #7
 8003976:	683a      	ldr	r2, [r7, #0]
 8003978:	429a      	cmp	r2, r3
 800397a:	d001      	beq.n	8003980 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b8      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0302 	and.w	r3, r3, #2
 8003988:	2b00      	cmp	r3, #0
 800398a:	d020      	beq.n	80039ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0304 	and.w	r3, r3, #4
 8003994:	2b00      	cmp	r3, #0
 8003996:	d005      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003998:	4b59      	ldr	r3, [pc, #356]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	4a58      	ldr	r2, [pc, #352]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80039a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0308 	and.w	r3, r3, #8
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b0:	4b53      	ldr	r3, [pc, #332]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	4a52      	ldr	r2, [pc, #328]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80039ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039bc:	4b50      	ldr	r3, [pc, #320]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	494d      	ldr	r1, [pc, #308]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	4313      	orrs	r3, r2
 80039cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0301 	and.w	r3, r3, #1
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d040      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039e2:	4b47      	ldr	r3, [pc, #284]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e07f      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d107      	bne.n	8003a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fa:	4b41      	ldr	r3, [pc, #260]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d109      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e073      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e06b      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a1a:	4b39      	ldr	r3, [pc, #228]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f023 0203 	bic.w	r2, r3, #3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4936      	ldr	r1, [pc, #216]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a2c:	f7fe fff4 	bl	8002a18 <HAL_GetTick>
 8003a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a34:	f7fe fff0 	bl	8002a18 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e053      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a4a:	4b2d      	ldr	r3, [pc, #180]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	f003 020c 	and.w	r2, r3, #12
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1eb      	bne.n	8003a34 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b27      	ldr	r3, [pc, #156]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0307 	and.w	r3, r3, #7
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d210      	bcs.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b24      	ldr	r3, [pc, #144]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	4922      	ldr	r1, [pc, #136]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b20      	ldr	r3, [pc, #128]	@ (8003afc <HAL_RCC_ClockConfig+0x1c0>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0307 	and.w	r3, r3, #7
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e032      	b.n	8003af2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a98:	4b19      	ldr	r3, [pc, #100]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	4916      	ldr	r1, [pc, #88]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0308 	and.w	r3, r3, #8
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ab6:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	490e      	ldr	r1, [pc, #56]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aca:	f000 f821 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8003b00 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	091b      	lsrs	r3, r3, #4
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	490a      	ldr	r1, [pc, #40]	@ (8003b04 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	5ccb      	ldrb	r3, [r1, r3]
 8003ade:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae2:	4a09      	ldr	r2, [pc, #36]	@ (8003b08 <HAL_RCC_ClockConfig+0x1cc>)
 8003ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ae6:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_ClockConfig+0x1d0>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4618      	mov	r0, r3
 8003aec:	f7fe fb02 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40022000 	.word	0x40022000
 8003b00:	40021000 	.word	0x40021000
 8003b04:	08009028 	.word	0x08009028
 8003b08:	20000000 	.word	0x20000000
 8003b0c:	20000004 	.word	0x20000004

08003b10 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	2300      	movs	r3, #0
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 030c 	and.w	r3, r3, #12
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d002      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x30>
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d003      	beq.n	8003b46 <HAL_RCC_GetSysClockFreq+0x36>
 8003b3e:	e027      	b.n	8003b90 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b40:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b42:	613b      	str	r3, [r7, #16]
      break;
 8003b44:	e027      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0c9b      	lsrs	r3, r3, #18
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	4a17      	ldr	r2, [pc, #92]	@ (8003bac <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b50:	5cd3      	ldrb	r3, [r2, r3]
 8003b52:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d010      	beq.n	8003b80 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003b5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ba4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	0c5b      	lsrs	r3, r3, #17
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	4a11      	ldr	r2, [pc, #68]	@ (8003bb0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b6a:	5cd3      	ldrb	r3, [r2, r3]
 8003b6c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b72:	fb03 f202 	mul.w	r2, r3, r2
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	e004      	b.n	8003b8a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a0c      	ldr	r2, [pc, #48]	@ (8003bb4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b84:	fb02 f303 	mul.w	r3, r2, r3
 8003b88:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	613b      	str	r3, [r7, #16]
      break;
 8003b8e:	e002      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b90:	4b05      	ldr	r3, [pc, #20]	@ (8003ba8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b92:	613b      	str	r3, [r7, #16]
      break;
 8003b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b96:	693b      	ldr	r3, [r7, #16]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	371c      	adds	r7, #28
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bc80      	pop	{r7}
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	40021000 	.word	0x40021000
 8003ba8:	007a1200 	.word	0x007a1200
 8003bac:	08009040 	.word	0x08009040
 8003bb0:	08009050 	.word	0x08009050
 8003bb4:	003d0900 	.word	0x003d0900

08003bb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bbc:	4b02      	ldr	r3, [pc, #8]	@ (8003bc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	20000000 	.word	0x20000000

08003bcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bd0:	f7ff fff2 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	4b05      	ldr	r3, [pc, #20]	@ (8003bec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	0a1b      	lsrs	r3, r3, #8
 8003bdc:	f003 0307 	and.w	r3, r3, #7
 8003be0:	4903      	ldr	r1, [pc, #12]	@ (8003bf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003be2:	5ccb      	ldrb	r3, [r1, r3]
 8003be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08009038 	.word	0x08009038

08003bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bf8:	f7ff ffde 	bl	8003bb8 <HAL_RCC_GetHCLKFreq>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	4b05      	ldr	r3, [pc, #20]	@ (8003c14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	0adb      	lsrs	r3, r3, #11
 8003c04:	f003 0307 	and.w	r3, r3, #7
 8003c08:	4903      	ldr	r1, [pc, #12]	@ (8003c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c0a:	5ccb      	ldrb	r3, [r1, r3]
 8003c0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40021000 	.word	0x40021000
 8003c18:	08009038 	.word	0x08009038

08003c1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	220f      	movs	r2, #15
 8003c2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c2c:	4b11      	ldr	r3, [pc, #68]	@ (8003c74 <HAL_RCC_GetClockConfig+0x58>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 0203 	and.w	r2, r3, #3
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c38:	4b0e      	ldr	r3, [pc, #56]	@ (8003c74 <HAL_RCC_GetClockConfig+0x58>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c44:	4b0b      	ldr	r3, [pc, #44]	@ (8003c74 <HAL_RCC_GetClockConfig+0x58>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003c50:	4b08      	ldr	r3, [pc, #32]	@ (8003c74 <HAL_RCC_GetClockConfig+0x58>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	08db      	lsrs	r3, r3, #3
 8003c56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c5e:	4b06      	ldr	r3, [pc, #24]	@ (8003c78 <HAL_RCC_GetClockConfig+0x5c>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0207 	and.w	r2, r3, #7
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bc80      	pop	{r7}
 8003c72:	4770      	bx	lr
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40022000 	.word	0x40022000

08003c7c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c84:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb0 <RCC_Delay+0x34>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a0a      	ldr	r2, [pc, #40]	@ (8003cb4 <RCC_Delay+0x38>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0a5b      	lsrs	r3, r3, #9
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	fb02 f303 	mul.w	r3, r2, r3
 8003c96:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003c98:	bf00      	nop
  }
  while (Delay --);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	1e5a      	subs	r2, r3, #1
 8003c9e:	60fa      	str	r2, [r7, #12]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1f9      	bne.n	8003c98 <RCC_Delay+0x1c>
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bc80      	pop	{r7}
 8003cae:	4770      	bx	lr
 8003cb0:	20000000 	.word	0x20000000
 8003cb4:	10624dd3 	.word	0x10624dd3

08003cb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e041      	b.n	8003d4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d106      	bne.n	8003ce4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f7fe fbae 	bl	8002440 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681a      	ldr	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3304      	adds	r3, #4
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	f000 fa74 	bl	80041e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d001      	beq.n	8003d70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e03a      	b.n	8003de6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2202      	movs	r2, #2
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0201 	orr.w	r2, r2, #1
 8003d86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a18      	ldr	r2, [pc, #96]	@ (8003df0 <HAL_TIM_Base_Start_IT+0x98>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x58>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d9a:	d009      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x58>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a14      	ldr	r2, [pc, #80]	@ (8003df4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x58>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a13      	ldr	r2, [pc, #76]	@ (8003df8 <HAL_TIM_Base_Start_IT+0xa0>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d010      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	e007      	b.n	8003de4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr
 8003df0:	40012c00 	.word	0x40012c00
 8003df4:	40000400 	.word	0x40000400
 8003df8:	40000800 	.word	0x40000800

08003dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	f003 0302 	and.w	r3, r3, #2
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d122      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d11b      	bne.n	8003e58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0202 	mvn.w	r2, #2
 8003e28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	f003 0303 	and.w	r3, r3, #3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9b4 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f9a7 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f9b6 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	f003 0304 	and.w	r3, r3, #4
 8003e62:	2b04      	cmp	r3, #4
 8003e64:	d122      	bne.n	8003eac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b04      	cmp	r3, #4
 8003e72:	d11b      	bne.n	8003eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f06f 0204 	mvn.w	r2, #4
 8003e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2202      	movs	r2, #2
 8003e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d003      	beq.n	8003e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f98a 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003e98:	e005      	b.n	8003ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f97d 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f98c 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b08      	cmp	r3, #8
 8003eb8:	d122      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f003 0308 	and.w	r3, r3, #8
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d11b      	bne.n	8003f00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f06f 0208 	mvn.w	r2, #8
 8003ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2204      	movs	r2, #4
 8003ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f960 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003eec:	e005      	b.n	8003efa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f953 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f962 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2200      	movs	r2, #0
 8003efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	691b      	ldr	r3, [r3, #16]
 8003f06:	f003 0310 	and.w	r3, r3, #16
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d122      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b10      	cmp	r3, #16
 8003f1a:	d11b      	bne.n	8003f54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f06f 0210 	mvn.w	r2, #16
 8003f24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2208      	movs	r2, #8
 8003f2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f936 	bl	80041ac <HAL_TIM_IC_CaptureCallback>
 8003f40:	e005      	b.n	8003f4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 f929 	bl	800419a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f938 	bl	80041be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d10e      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d107      	bne.n	8003f80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f06f 0201 	mvn.w	r2, #1
 8003f78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7fe f82c 	bl	8001fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	691b      	ldr	r3, [r3, #16]
 8003f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8a:	2b80      	cmp	r3, #128	@ 0x80
 8003f8c:	d10e      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f98:	2b80      	cmp	r3, #128	@ 0x80
 8003f9a:	d107      	bne.n	8003fac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 fa7b 	bl	80044a2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb6:	2b40      	cmp	r3, #64	@ 0x40
 8003fb8:	d10e      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b40      	cmp	r3, #64	@ 0x40
 8003fc6:	d107      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f8fc 	bl	80041d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0320 	and.w	r3, r3, #32
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d10e      	bne.n	8004004 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d107      	bne.n	8004004 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0220 	mvn.w	r2, #32
 8003ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa46 	bl	8004490 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004016:	2300      	movs	r3, #0
 8004018:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIM_ConfigClockSource+0x1c>
 8004024:	2302      	movs	r3, #2
 8004026:	e0b4      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x186>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004046:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800404e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68ba      	ldr	r2, [r7, #8]
 8004056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004060:	d03e      	beq.n	80040e0 <HAL_TIM_ConfigClockSource+0xd4>
 8004062:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004066:	f200 8087 	bhi.w	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 800406a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800406e:	f000 8086 	beq.w	800417e <HAL_TIM_ConfigClockSource+0x172>
 8004072:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004076:	d87f      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004078:	2b70      	cmp	r3, #112	@ 0x70
 800407a:	d01a      	beq.n	80040b2 <HAL_TIM_ConfigClockSource+0xa6>
 800407c:	2b70      	cmp	r3, #112	@ 0x70
 800407e:	d87b      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004080:	2b60      	cmp	r3, #96	@ 0x60
 8004082:	d050      	beq.n	8004126 <HAL_TIM_ConfigClockSource+0x11a>
 8004084:	2b60      	cmp	r3, #96	@ 0x60
 8004086:	d877      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004088:	2b50      	cmp	r3, #80	@ 0x50
 800408a:	d03c      	beq.n	8004106 <HAL_TIM_ConfigClockSource+0xfa>
 800408c:	2b50      	cmp	r3, #80	@ 0x50
 800408e:	d873      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004090:	2b40      	cmp	r3, #64	@ 0x40
 8004092:	d058      	beq.n	8004146 <HAL_TIM_ConfigClockSource+0x13a>
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d86f      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 8004098:	2b30      	cmp	r3, #48	@ 0x30
 800409a:	d064      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 800409c:	2b30      	cmp	r3, #48	@ 0x30
 800409e:	d86b      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d060      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d867      	bhi.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d05c      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d05a      	beq.n	8004166 <HAL_TIM_ConfigClockSource+0x15a>
 80040b0:	e062      	b.n	8004178 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040c2:	f000 f968 	bl	8004396 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80040d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68ba      	ldr	r2, [r7, #8]
 80040dc:	609a      	str	r2, [r3, #8]
      break;
 80040de:	e04f      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040f0:	f000 f951 	bl	8004396 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	689a      	ldr	r2, [r3, #8]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004102:	609a      	str	r2, [r3, #8]
      break;
 8004104:	e03c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004112:	461a      	mov	r2, r3
 8004114:	f000 f8c8 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2150      	movs	r1, #80	@ 0x50
 800411e:	4618      	mov	r0, r3
 8004120:	f000 f91f 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8004124:	e02c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004132:	461a      	mov	r2, r3
 8004134:	f000 f8e6 	bl	8004304 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2160      	movs	r1, #96	@ 0x60
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f90f 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8004144:	e01c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004152:	461a      	mov	r2, r3
 8004154:	f000 f8a8 	bl	80042a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2140      	movs	r1, #64	@ 0x40
 800415e:	4618      	mov	r0, r3
 8004160:	f000 f8ff 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8004164:	e00c      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4619      	mov	r1, r3
 8004170:	4610      	mov	r0, r2
 8004172:	f000 f8f6 	bl	8004362 <TIM_ITRx_SetConfig>
      break;
 8004176:	e003      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004178:	2301      	movs	r3, #1
 800417a:	73fb      	strb	r3, [r7, #15]
      break;
 800417c:	e000      	b.n	8004180 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800417e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419a:	b480      	push	{r7}
 800419c:	b083      	sub	sp, #12
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a2:	bf00      	nop
 80041a4:	370c      	adds	r7, #12
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr

080041be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041be:	b480      	push	{r7}
 80041c0:	b083      	sub	sp, #12
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041c6:	bf00      	nop
 80041c8:	370c      	adds	r7, #12
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bc80      	pop	{r7}
 80041ce:	4770      	bx	lr

080041d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
	...

080041e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	4a29      	ldr	r2, [pc, #164]	@ (800429c <TIM_Base_SetConfig+0xb8>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00b      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004202:	d007      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a26      	ldr	r2, [pc, #152]	@ (80042a0 <TIM_Base_SetConfig+0xbc>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d003      	beq.n	8004214 <TIM_Base_SetConfig+0x30>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a25      	ldr	r2, [pc, #148]	@ (80042a4 <TIM_Base_SetConfig+0xc0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d108      	bne.n	8004226 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <TIM_Base_SetConfig+0xb8>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <TIM_Base_SetConfig+0xbc>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0x62>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <TIM_Base_SetConfig+0xc0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a07      	ldr	r2, [pc, #28]	@ (800429c <TIM_Base_SetConfig+0xb8>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d103      	bne.n	800428c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	615a      	str	r2, [r3, #20]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr
 800429c:	40012c00 	.word	0x40012c00
 80042a0:	40000400 	.word	0x40000400
 80042a4:	40000800 	.word	0x40000800

080042a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6a1b      	ldr	r3, [r3, #32]
 80042b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f023 0201 	bic.w	r2, r3, #1
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80042d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f023 030a 	bic.w	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr

08004304 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	f023 0210 	bic.w	r2, r3, #16
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800432e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	693a      	ldr	r2, [r7, #16]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	011b      	lsls	r3, r3, #4
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4313      	orrs	r3, r2
 800434a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	693a      	ldr	r2, [r7, #16]
 8004350:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	621a      	str	r2, [r3, #32]
}
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	bc80      	pop	{r7}
 8004360:	4770      	bx	lr

08004362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004362:	b480      	push	{r7}
 8004364:	b085      	sub	sp, #20
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
 800436a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	f043 0307 	orr.w	r3, r3, #7
 8004384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	609a      	str	r2, [r3, #8]
}
 800438c:	bf00      	nop
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr

08004396 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004396:	b480      	push	{r7}
 8004398:	b087      	sub	sp, #28
 800439a:	af00      	add	r7, sp, #0
 800439c:	60f8      	str	r0, [r7, #12]
 800439e:	60b9      	str	r1, [r7, #8]
 80043a0:	607a      	str	r2, [r7, #4]
 80043a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	021a      	lsls	r2, r3, #8
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	431a      	orrs	r2, r3
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4313      	orrs	r3, r2
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	609a      	str	r2, [r3, #8]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bc80      	pop	{r7}
 80043d2:	4770      	bx	lr

080043d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d101      	bne.n	80043ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043e8:	2302      	movs	r3, #2
 80043ea:	e046      	b.n	800447a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a16      	ldr	r2, [pc, #88]	@ (8004484 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d00e      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004438:	d009      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a12      	ldr	r2, [pc, #72]	@ (8004488 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d004      	beq.n	800444e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a10      	ldr	r2, [pc, #64]	@ (800448c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d10c      	bne.n	8004468 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004454:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4313      	orrs	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3714      	adds	r7, #20
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr
 8004484:	40012c00 	.word	0x40012c00
 8004488:	40000400 	.word	0x40000400
 800448c:	40000800 	.word	0x40000800

08004490 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004490:	b480      	push	{r7}
 8004492:	b083      	sub	sp, #12
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004498:	bf00      	nop
 800449a:	370c      	adds	r7, #12
 800449c:	46bd      	mov	sp, r7
 800449e:	bc80      	pop	{r7}
 80044a0:	4770      	bx	lr

080044a2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr

080044b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b082      	sub	sp, #8
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e042      	b.n	800454c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d106      	bne.n	80044e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7fe f870 	bl	80025c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2224      	movs	r2, #36	@ 0x24
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68da      	ldr	r2, [r3, #12]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 ffeb 	bl	80054d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800450c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	695a      	ldr	r2, [r3, #20]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800451c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800452c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3708      	adds	r7, #8
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08c      	sub	sp, #48	@ 0x30
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	4613      	mov	r3, r2
 8004560:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004568:	b2db      	uxtb	r3, r3
 800456a:	2b20      	cmp	r3, #32
 800456c:	d156      	bne.n	800461c <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <HAL_UART_Transmit_DMA+0x26>
 8004574:	88fb      	ldrh	r3, [r7, #6]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e04f      	b.n	800461e <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	88fa      	ldrh	r2, [r7, #6]
 8004588:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	88fa      	ldrh	r2, [r7, #6]
 800458e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2221      	movs	r2, #33	@ 0x21
 800459a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	4a21      	ldr	r2, [pc, #132]	@ (8004628 <HAL_UART_Transmit_DMA+0xd4>)
 80045a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045aa:	4a20      	ldr	r2, [pc, #128]	@ (800462c <HAL_UART_Transmit_DMA+0xd8>)
 80045ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	4a1f      	ldr	r2, [pc, #124]	@ (8004630 <HAL_UART_Transmit_DMA+0xdc>)
 80045b4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	2200      	movs	r2, #0
 80045bc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 80045be:	f107 0308 	add.w	r3, r7, #8
 80045c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80045c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ca:	6819      	ldr	r1, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	3304      	adds	r3, #4
 80045d2:	461a      	mov	r2, r3
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	f7fe fb63 	bl	8002ca0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80045e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3314      	adds	r3, #20
 80045ea:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	e853 3f00 	ldrex	r3, [r3]
 80045f2:	617b      	str	r3, [r7, #20]
   return(result);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	3314      	adds	r3, #20
 8004602:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004604:	627a      	str	r2, [r7, #36]	@ 0x24
 8004606:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004608:	6a39      	ldr	r1, [r7, #32]
 800460a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800460c:	e841 2300 	strex	r3, r2, [r1]
 8004610:	61fb      	str	r3, [r7, #28]
   return(result);
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1e5      	bne.n	80045e4 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004618:	2300      	movs	r3, #0
 800461a:	e000      	b.n	800461e <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800461c:	2302      	movs	r3, #2
  }
}
 800461e:	4618      	mov	r0, r3
 8004620:	3730      	adds	r7, #48	@ 0x30
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	08004d6b 	.word	0x08004d6b
 800462c:	08004e05 	.word	0x08004e05
 8004630:	08004f89 	.word	0x08004f89

08004634 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b090      	sub	sp, #64	@ 0x40
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800463c:	2300      	movs	r3, #0
 800463e:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	bf14      	ite	ne
 800464e:	2301      	movne	r3, #1
 8004650:	2300      	moveq	r3, #0
 8004652:	b2db      	uxtb	r3, r3
 8004654:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800465c:	b2db      	uxtb	r3, r3
 800465e:	2b21      	cmp	r3, #33	@ 0x21
 8004660:	d128      	bne.n	80046b4 <HAL_UART_DMAStop+0x80>
 8004662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d025      	beq.n	80046b4 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3314      	adds	r3, #20
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	623b      	str	r3, [r7, #32]
   return(result);
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800467e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3314      	adds	r3, #20
 8004686:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004688:	633a      	str	r2, [r7, #48]	@ 0x30
 800468a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fe fb59 	bl	8002d60 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 fd4e 	bl	8005150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046be:	2b00      	cmp	r3, #0
 80046c0:	bf14      	ite	ne
 80046c2:	2301      	movne	r3, #1
 80046c4:	2300      	moveq	r3, #0
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2b22      	cmp	r3, #34	@ 0x22
 80046d4:	d128      	bne.n	8004728 <HAL_UART_DMAStop+0xf4>
 80046d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d025      	beq.n	8004728 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3314      	adds	r3, #20
 80046e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3314      	adds	r3, #20
 80046fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80046fc:	61fa      	str	r2, [r7, #28]
 80046fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	617b      	str	r3, [r7, #20]
   return(result);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d004      	beq.n	8004722 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800471c:	4618      	mov	r0, r3
 800471e:	f7fe fb1f 	bl	8002d60 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 fd3b 	bl	800519e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3740      	adds	r7, #64	@ 0x40
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b08c      	sub	sp, #48	@ 0x30
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	4613      	mov	r3, r2
 800473e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b20      	cmp	r3, #32
 800474a:	d14a      	bne.n	80047e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d101      	bne.n	800475c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e043      	b.n	80047e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004768:	88fb      	ldrh	r3, [r7, #6]
 800476a:	461a      	mov	r2, r3
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 fc54 	bl	800501c <UART_Start_Receive_DMA>
 8004774:	4603      	mov	r3, r0
 8004776:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800477a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800477e:	2b00      	cmp	r3, #0
 8004780:	d12c      	bne.n	80047dc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004786:	2b01      	cmp	r3, #1
 8004788:	d125      	bne.n	80047d6 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	613b      	str	r3, [r7, #16]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	330c      	adds	r3, #12
 80047a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	e853 3f00 	ldrex	r3, [r3]
 80047ae:	617b      	str	r3, [r7, #20]
   return(result);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f043 0310 	orr.w	r3, r3, #16
 80047b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	330c      	adds	r3, #12
 80047be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80047c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6a39      	ldr	r1, [r7, #32]
 80047c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047c8:	e841 2300 	strex	r3, r2, [r1]
 80047cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e5      	bne.n	80047a0 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 80047d4:	e002      	b.n	80047dc <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80047dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80047e0:	e000      	b.n	80047e4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
  }
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3730      	adds	r7, #48	@ 0x30
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b0ba      	sub	sp, #232	@ 0xe8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004812:	2300      	movs	r3, #0
 8004814:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004818:	2300      	movs	r3, #0
 800481a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800481e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800482a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800482e:	2b00      	cmp	r3, #0
 8004830:	d10f      	bne.n	8004852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <HAL_UART_IRQHandler+0x66>
 800483e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004842:	f003 0320 	and.w	r3, r3, #32
 8004846:	2b00      	cmp	r3, #0
 8004848:	d003      	beq.n	8004852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f000 fd84 	bl	8005358 <UART_Receive_IT>
      return;
 8004850:	e25b      	b.n	8004d0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 80de 	beq.w	8004a18 <HAL_UART_IRQHandler+0x22c>
 800485c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d106      	bne.n	8004876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800486c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80d1 	beq.w	8004a18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <HAL_UART_IRQHandler+0xae>
 8004882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004892:	f043 0201 	orr.w	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HAL_UART_IRQHandler+0xd2>
 80048a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d005      	beq.n	80048be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b6:	f043 0202 	orr.w	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00b      	beq.n	80048e2 <HAL_UART_IRQHandler+0xf6>
 80048ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f043 0204 	orr.w	r2, r3, #4
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e6:	f003 0308 	and.w	r3, r3, #8
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d011      	beq.n	8004912 <HAL_UART_IRQHandler+0x126>
 80048ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d105      	bne.n	8004906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490a:	f043 0208 	orr.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 81f2 	beq.w	8004d00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800491c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004920:	f003 0320 	and.w	r3, r3, #32
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_UART_IRQHandler+0x14e>
 8004928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800492c:	f003 0320 	and.w	r3, r3, #32
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fd0f 	bl	8005358 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	695b      	ldr	r3, [r3, #20]
 8004940:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d103      	bne.n	8004966 <HAL_UART_IRQHandler+0x17a>
 800495e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004962:	2b00      	cmp	r3, #0
 8004964:	d04f      	beq.n	8004a06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fc19 	bl	800519e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004976:	2b00      	cmp	r3, #0
 8004978:	d041      	beq.n	80049fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3314      	adds	r3, #20
 8004980:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004990:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004994:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	3314      	adds	r3, #20
 80049a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049b6:	e841 2300 	strex	r3, r2, [r1]
 80049ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1d9      	bne.n	800497a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d013      	beq.n	80049f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d2:	4a7e      	ldr	r2, [pc, #504]	@ (8004bcc <HAL_UART_IRQHandler+0x3e0>)
 80049d4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	4618      	mov	r0, r3
 80049dc:	f7fe f9fc 	bl	8002dd8 <HAL_DMA_Abort_IT>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80049f0:	4610      	mov	r0, r2
 80049f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049f4:	e00e      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f9ae 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049fc:	e00a      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f9aa 	bl	8004d58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a04:	e006      	b.n	8004a14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9a6 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a12:	e175      	b.n	8004d00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	bf00      	nop
    return;
 8004a16:	e173      	b.n	8004d00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	f040 814f 	bne.w	8004cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f000 8148 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a34:	f003 0310 	and.w	r3, r3, #16
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8141 	beq.w	8004cc0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60bb      	str	r3, [r7, #8]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	60bb      	str	r3, [r7, #8]
 8004a52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695b      	ldr	r3, [r3, #20]
 8004a5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80b6 	beq.w	8004bd0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 8145 	beq.w	8004d04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a82:	429a      	cmp	r2, r3
 8004a84:	f080 813e 	bcs.w	8004d04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a8e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	2b20      	cmp	r3, #32
 8004a98:	f000 8088 	beq.w	8004bac <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ab2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ab6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	330c      	adds	r3, #12
 8004ac4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ac8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004acc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ad4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004ad8:	e841 2300 	strex	r3, r2, [r1]
 8004adc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1d9      	bne.n	8004a9c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3314      	adds	r3, #20
 8004aee:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004af8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b0c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b12:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b1e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e1      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3314      	adds	r3, #20
 8004b2a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b2e:	e853 3f00 	ldrex	r3, [r3]
 8004b32:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b36:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b48:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b4a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b4e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e3      	bne.n	8004b24 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2220      	movs	r2, #32
 8004b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	330c      	adds	r3, #12
 8004b70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b7c:	f023 0310 	bic.w	r3, r3, #16
 8004b80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b8e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b90:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e3      	bne.n	8004b6a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f7fe f8da 	bl	8002d60 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f7fd f8f6 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bc8:	e09c      	b.n	8004d04 <HAL_UART_IRQHandler+0x518>
 8004bca:	bf00      	nop
 8004bcc:	08005263 	.word	0x08005263
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f000 808e 	beq.w	8004d08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004bec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8089 	beq.w	8004d08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	330c      	adds	r3, #12
 8004bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c1a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c1c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c20:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c22:	e841 2300 	strex	r3, r2, [r1]
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d1e3      	bne.n	8004bf6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3314      	adds	r3, #20
 8004c34:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	e853 3f00 	ldrex	r3, [r3]
 8004c3c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	f023 0301 	bic.w	r3, r3, #1
 8004c44:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3314      	adds	r3, #20
 8004c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c52:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1e3      	bne.n	8004c2e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2220      	movs	r2, #32
 8004c6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	330c      	adds	r3, #12
 8004c7a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f023 0310 	bic.w	r3, r3, #16
 8004c8a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	330c      	adds	r3, #12
 8004c94:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c98:	61fa      	str	r2, [r7, #28]
 8004c9a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9c:	69b9      	ldr	r1, [r7, #24]
 8004c9e:	69fa      	ldr	r2, [r7, #28]
 8004ca0:	e841 2300 	strex	r3, r2, [r1]
 8004ca4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d1e3      	bne.n	8004c74 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cb2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f7fd f87b 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cbe:	e023      	b.n	8004d08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x4f4>
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 fad6 	bl	800528a <UART_Transmit_IT>
    return;
 8004cde:	e014      	b.n	8004d0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00e      	beq.n	8004d0a <HAL_UART_IRQHandler+0x51e>
 8004cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d008      	beq.n	8004d0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 fb15 	bl	8005328 <UART_EndTransmit_IT>
    return;
 8004cfe:	e004      	b.n	8004d0a <HAL_UART_IRQHandler+0x51e>
    return;
 8004d00:	bf00      	nop
 8004d02:	e002      	b.n	8004d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d04:	bf00      	nop
 8004d06:	e000      	b.n	8004d0a <HAL_UART_IRQHandler+0x51e>
      return;
 8004d08:	bf00      	nop
  }
}
 8004d0a:	37e8      	adds	r7, #232	@ 0xe8
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}

08004d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bc80      	pop	{r7}
 8004d20:	4770      	bx	lr

08004d22 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004d2a:	bf00      	nop
 8004d2c:	370c      	adds	r7, #12
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bc80      	pop	{r7}
 8004d32:	4770      	bx	lr

08004d34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr

08004d46 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b083      	sub	sp, #12
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d4e:	bf00      	nop
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr

08004d58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bc80      	pop	{r7}
 8004d68:	4770      	bx	lr

08004d6a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b090      	sub	sp, #64	@ 0x40
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d137      	bne.n	8004df6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004d86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d88:	2200      	movs	r2, #0
 8004d8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004d8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	e853 3f00 	ldrex	r3, [r3]
 8004d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004da2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3314      	adds	r3, #20
 8004daa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004dac:	633a      	str	r2, [r7, #48]	@ 0x30
 8004dae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db4:	e841 2300 	strex	r3, r2, [r1]
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1e5      	bne.n	8004d8c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	e853 3f00 	ldrex	r3, [r3]
 8004dce:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004dd6:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	330c      	adds	r3, #12
 8004dde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004de0:	61fa      	str	r2, [r7, #28]
 8004de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de4:	69b9      	ldr	r1, [r7, #24]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	e841 2300 	strex	r3, r2, [r1]
 8004dec:	617b      	str	r3, [r7, #20]
   return(result);
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1e5      	bne.n	8004dc0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004df4:	e002      	b.n	8004dfc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004df6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004df8:	f7ff ff8a 	bl	8004d10 <HAL_UART_TxCpltCallback>
}
 8004dfc:	bf00      	nop
 8004dfe:	3740      	adds	r7, #64	@ 0x40
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff ff85 	bl	8004d22 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e18:	bf00      	nop
 8004e1a:	3710      	adds	r7, #16
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b09c      	sub	sp, #112	@ 0x70
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 0320 	and.w	r3, r3, #32
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d172      	bne.n	8004f22 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e3e:	2200      	movs	r2, #0
 8004e40:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	330c      	adds	r3, #12
 8004e48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	330c      	adds	r3, #12
 8004e60:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e6a:	e841 2300 	strex	r3, r2, [r1]
 8004e6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1e5      	bne.n	8004e42 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	3314      	adds	r3, #20
 8004e7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e80:	e853 3f00 	ldrex	r3, [r3]
 8004e84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	3314      	adds	r3, #20
 8004e94:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e96:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e9e:	e841 2300 	strex	r3, r2, [r1]
 8004ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1e5      	bne.n	8004e76 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	3314      	adds	r3, #20
 8004eb0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	e853 3f00 	ldrex	r3, [r3]
 8004eb8:	623b      	str	r3, [r7, #32]
   return(result);
 8004eba:	6a3b      	ldr	r3, [r7, #32]
 8004ebc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ec0:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ec2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	3314      	adds	r3, #20
 8004ec8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004eca:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e5      	bne.n	8004eaa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ede:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d119      	bne.n	8004f22 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	e853 3f00 	ldrex	r3, [r3]
 8004efc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f023 0310 	bic.w	r3, r3, #16
 8004f04:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f0e:	61fa      	str	r2, [r7, #28]
 8004f10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f12:	69b9      	ldr	r1, [r7, #24]
 8004f14:	69fa      	ldr	r2, [r7, #28]
 8004f16:	e841 2300 	strex	r3, r2, [r1]
 8004f1a:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d1e5      	bne.n	8004eee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f24:	2200      	movs	r2, #0
 8004f26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d106      	bne.n	8004f3e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f34:	4619      	mov	r1, r3
 8004f36:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f38:	f7fc ff3c 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f3c:	e002      	b.n	8004f44 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004f3e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f40:	f7ff fef8 	bl	8004d34 <HAL_UART_RxCpltCallback>
}
 8004f44:	bf00      	nop
 8004f46:	3770      	adds	r7, #112	@ 0x70
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d108      	bne.n	8004f7a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7fc ff1e 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f78:	e002      	b.n	8004f80 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff fee3 	bl	8004d46 <HAL_UART_RxHalfCpltCallback>
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	bf14      	ite	ne
 8004fa8:	2301      	movne	r3, #1
 8004faa:	2300      	moveq	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b21      	cmp	r3, #33	@ 0x21
 8004fba:	d108      	bne.n	8004fce <UART_DMAError+0x46>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004fc8:	68b8      	ldr	r0, [r7, #8]
 8004fca:	f000 f8c1 	bl	8005150 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf14      	ite	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	2300      	moveq	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b22      	cmp	r3, #34	@ 0x22
 8004fee:	d108      	bne.n	8005002 <UART_DMAError+0x7a>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	f000 f8ce 	bl	800519e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	f043 0210 	orr.w	r2, r3, #16
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800500e:	68b8      	ldr	r0, [r7, #8]
 8005010:	f7ff fea2 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b098      	sub	sp, #96	@ 0x60
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	4613      	mov	r3, r2
 8005028:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	88fa      	ldrh	r2, [r7, #6]
 8005034:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2222      	movs	r2, #34	@ 0x22
 8005040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005048:	4a3e      	ldr	r2, [pc, #248]	@ (8005144 <UART_Start_Receive_DMA+0x128>)
 800504a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005050:	4a3d      	ldr	r2, [pc, #244]	@ (8005148 <UART_Start_Receive_DMA+0x12c>)
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	4a3c      	ldr	r2, [pc, #240]	@ (800514c <UART_Start_Receive_DMA+0x130>)
 800505a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005060:	2200      	movs	r2, #0
 8005062:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005064:	f107 0308 	add.w	r3, r7, #8
 8005068:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	88fb      	ldrh	r3, [r7, #6]
 800507c:	f7fd fe10 	bl	8002ca0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005080:	2300      	movs	r3, #0
 8005082:	613b      	str	r3, [r7, #16]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	613b      	str	r3, [r7, #16]
 8005094:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d019      	beq.n	80050d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	330c      	adds	r3, #12
 80050a4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	330c      	adds	r3, #12
 80050bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80050c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80050c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80050cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e5      	bne.n	800509e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3314      	adds	r3, #20
 80050d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3314      	adds	r3, #20
 80050f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80050f2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80050f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80050f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3314      	adds	r3, #20
 800510c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	e853 3f00 	ldrex	r3, [r3]
 8005114:	617b      	str	r3, [r7, #20]
   return(result);
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800511c:	653b      	str	r3, [r7, #80]	@ 0x50
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3314      	adds	r3, #20
 8005124:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005126:	627a      	str	r2, [r7, #36]	@ 0x24
 8005128:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512a:	6a39      	ldr	r1, [r7, #32]
 800512c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512e:	e841 2300 	strex	r3, r2, [r1]
 8005132:	61fb      	str	r3, [r7, #28]
   return(result);
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1e5      	bne.n	8005106 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3760      	adds	r7, #96	@ 0x60
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	08004e21 	.word	0x08004e21
 8005148:	08004f4d 	.word	0x08004f4d
 800514c:	08004f89 	.word	0x08004f89

08005150 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	@ 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	e853 3f00 	ldrex	r3, [r3]
 8005166:	60bb      	str	r3, [r7, #8]
   return(result);
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	330c      	adds	r3, #12
 8005176:	69fa      	ldr	r2, [r7, #28]
 8005178:	61ba      	str	r2, [r7, #24]
 800517a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517c:	6979      	ldr	r1, [r7, #20]
 800517e:	69ba      	ldr	r2, [r7, #24]
 8005180:	e841 2300 	strex	r3, r2, [r1]
 8005184:	613b      	str	r3, [r7, #16]
   return(result);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1e5      	bne.n	8005158 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2220      	movs	r2, #32
 8005190:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005194:	bf00      	nop
 8005196:	3724      	adds	r7, #36	@ 0x24
 8005198:	46bd      	mov	sp, r7
 800519a:	bc80      	pop	{r7}
 800519c:	4770      	bx	lr

0800519e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800519e:	b480      	push	{r7}
 80051a0:	b095      	sub	sp, #84	@ 0x54
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	330c      	adds	r3, #12
 80051ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051ce:	e841 2300 	strex	r3, r2, [r1]
 80051d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d1e5      	bne.n	80051a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	3314      	adds	r3, #20
 80051e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e2:	6a3b      	ldr	r3, [r7, #32]
 80051e4:	e853 3f00 	ldrex	r3, [r3]
 80051e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f023 0301 	bic.w	r3, r3, #1
 80051f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	3314      	adds	r3, #20
 80051f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005202:	e841 2300 	strex	r3, r2, [r1]
 8005206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1e5      	bne.n	80051da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005212:	2b01      	cmp	r3, #1
 8005214:	d119      	bne.n	800524a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	330c      	adds	r3, #12
 800521c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	e853 3f00 	ldrex	r3, [r3]
 8005224:	60bb      	str	r3, [r7, #8]
   return(result);
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f023 0310 	bic.w	r3, r3, #16
 800522c:	647b      	str	r3, [r7, #68]	@ 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	330c      	adds	r3, #12
 8005234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005236:	61ba      	str	r2, [r7, #24]
 8005238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523a:	6979      	ldr	r1, [r7, #20]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	e841 2300 	strex	r3, r2, [r1]
 8005242:	613b      	str	r3, [r7, #16]
   return(result);
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d1e5      	bne.n	8005216 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2220      	movs	r2, #32
 800524e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005258:	bf00      	nop
 800525a:	3754      	adds	r7, #84	@ 0x54
 800525c:	46bd      	mov	sp, r7
 800525e:	bc80      	pop	{r7}
 8005260:	4770      	bx	lr

08005262 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005262:	b580      	push	{r7, lr}
 8005264:	b084      	sub	sp, #16
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800526e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2200      	movs	r2, #0
 8005274:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2200      	movs	r2, #0
 800527a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800527c:	68f8      	ldr	r0, [r7, #12]
 800527e:	f7ff fd6b 	bl	8004d58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005282:	bf00      	nop
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b21      	cmp	r3, #33	@ 0x21
 800529c:	d13e      	bne.n	800531c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a6:	d114      	bne.n	80052d2 <UART_Transmit_IT+0x48>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	691b      	ldr	r3, [r3, #16]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d110      	bne.n	80052d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a1b      	ldr	r3, [r3, #32]
 80052b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	881b      	ldrh	r3, [r3, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	1c9a      	adds	r2, r3, #2
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	621a      	str	r2, [r3, #32]
 80052d0:	e008      	b.n	80052e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	1c59      	adds	r1, r3, #1
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	6211      	str	r1, [r2, #32]
 80052dc:	781a      	ldrb	r2, [r3, #0]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	4619      	mov	r1, r3
 80052f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d10f      	bne.n	8005318 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68da      	ldr	r2, [r3, #12]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005306:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005316:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	e000      	b.n	800531e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800531c:	2302      	movs	r3, #2
  }
}
 800531e:	4618      	mov	r0, r3
 8005320:	3714      	adds	r7, #20
 8005322:	46bd      	mov	sp, r7
 8005324:	bc80      	pop	{r7}
 8005326:	4770      	bx	lr

08005328 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b082      	sub	sp, #8
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68da      	ldr	r2, [r3, #12]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800533e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2220      	movs	r2, #32
 8005344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f7ff fce1 	bl	8004d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b08c      	sub	sp, #48	@ 0x30
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b22      	cmp	r3, #34	@ 0x22
 800536a:	f040 80ae 	bne.w	80054ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005376:	d117      	bne.n	80053a8 <UART_Receive_IT+0x50>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d113      	bne.n	80053a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005380:	2300      	movs	r3, #0
 8005382:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005388:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	b29b      	uxth	r3, r3
 8005392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005396:	b29a      	uxth	r2, r3
 8005398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	1c9a      	adds	r2, r3, #2
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80053a6:	e026      	b.n	80053f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ba:	d007      	beq.n	80053cc <UART_Receive_IT+0x74>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10a      	bne.n	80053da <UART_Receive_IT+0x82>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d6:	701a      	strb	r2, [r3, #0]
 80053d8:	e008      	b.n	80053ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	3b01      	subs	r3, #1
 80053fe:	b29b      	uxth	r3, r3
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	4619      	mov	r1, r3
 8005404:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005406:	2b00      	cmp	r3, #0
 8005408:	d15d      	bne.n	80054c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68da      	ldr	r2, [r3, #12]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0220 	bic.w	r2, r2, #32
 8005418:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68da      	ldr	r2, [r3, #12]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005428:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f022 0201 	bic.w	r2, r2, #1
 8005438:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2220      	movs	r2, #32
 800543e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800544c:	2b01      	cmp	r3, #1
 800544e:	d135      	bne.n	80054bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	330c      	adds	r3, #12
 800545c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	e853 3f00 	ldrex	r3, [r3]
 8005464:	613b      	str	r3, [r7, #16]
   return(result);
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f023 0310 	bic.w	r3, r3, #16
 800546c:	627b      	str	r3, [r7, #36]	@ 0x24
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005476:	623a      	str	r2, [r7, #32]
 8005478:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547a:	69f9      	ldr	r1, [r7, #28]
 800547c:	6a3a      	ldr	r2, [r7, #32]
 800547e:	e841 2300 	strex	r3, r2, [r1]
 8005482:	61bb      	str	r3, [r7, #24]
   return(result);
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d1e5      	bne.n	8005456 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 0310 	and.w	r3, r3, #16
 8005494:	2b10      	cmp	r3, #16
 8005496:	d10a      	bne.n	80054ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005498:	2300      	movs	r3, #0
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	60fb      	str	r3, [r7, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f7fc fc7d 	bl	8001db4 <HAL_UARTEx_RxEventCallback>
 80054ba:	e002      	b.n	80054c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff fc39 	bl	8004d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e002      	b.n	80054cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	e000      	b.n	80054cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054ca:	2302      	movs	r3, #2
  }
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3730      	adds	r7, #48	@ 0x30
 80054d0:	46bd      	mov	sp, r7
 80054d2:	bd80      	pop	{r7, pc}

080054d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68da      	ldr	r2, [r3, #12]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	4313      	orrs	r3, r2
 8005502:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800550e:	f023 030c 	bic.w	r3, r3, #12
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	6812      	ldr	r2, [r2, #0]
 8005516:	68b9      	ldr	r1, [r7, #8]
 8005518:	430b      	orrs	r3, r1
 800551a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	699a      	ldr	r2, [r3, #24]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	430a      	orrs	r2, r1
 8005530:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2c      	ldr	r2, [pc, #176]	@ (80055e8 <UART_SetConfig+0x114>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d103      	bne.n	8005544 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7fe fb5a 	bl	8003bf4 <HAL_RCC_GetPCLK2Freq>
 8005540:	60f8      	str	r0, [r7, #12]
 8005542:	e002      	b.n	800554a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005544:	f7fe fb42 	bl	8003bcc <HAL_RCC_GetPCLK1Freq>
 8005548:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800554a:	68fa      	ldr	r2, [r7, #12]
 800554c:	4613      	mov	r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	4413      	add	r3, r2
 8005552:	009a      	lsls	r2, r3, #2
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005560:	4a22      	ldr	r2, [pc, #136]	@ (80055ec <UART_SetConfig+0x118>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	0119      	lsls	r1, r3, #4
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009a      	lsls	r2, r3, #2
 8005574:	441a      	add	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005580:	4b1a      	ldr	r3, [pc, #104]	@ (80055ec <UART_SetConfig+0x118>)
 8005582:	fba3 0302 	umull	r0, r3, r3, r2
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	2064      	movs	r0, #100	@ 0x64
 800558a:	fb00 f303 	mul.w	r3, r0, r3
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	011b      	lsls	r3, r3, #4
 8005592:	3332      	adds	r3, #50	@ 0x32
 8005594:	4a15      	ldr	r2, [pc, #84]	@ (80055ec <UART_SetConfig+0x118>)
 8005596:	fba2 2303 	umull	r2, r3, r2, r3
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a0:	4419      	add	r1, r3
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	4613      	mov	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	4413      	add	r3, r2
 80055aa:	009a      	lsls	r2, r3, #2
 80055ac:	441a      	add	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80055b8:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <UART_SetConfig+0x118>)
 80055ba:	fba3 0302 	umull	r0, r3, r3, r2
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2064      	movs	r0, #100	@ 0x64
 80055c2:	fb00 f303 	mul.w	r3, r0, r3
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	3332      	adds	r3, #50	@ 0x32
 80055cc:	4a07      	ldr	r2, [pc, #28]	@ (80055ec <UART_SetConfig+0x118>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	f003 020f 	and.w	r2, r3, #15
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	440a      	add	r2, r1
 80055de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80055e0:	bf00      	nop
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40013800 	.word	0x40013800
 80055ec:	51eb851f 	.word	0x51eb851f

080055f0 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055f6:	f3ef 8305 	mrs	r3, IPSR
 80055fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80055fc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d10f      	bne.n	8005622 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005602:	f3ef 8310 	mrs	r3, PRIMASK
 8005606:	607b      	str	r3, [r7, #4]
  return(result);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d109      	bne.n	8005622 <osKernelInitialize+0x32>
 800560e:	4b10      	ldr	r3, [pc, #64]	@ (8005650 <osKernelInitialize+0x60>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d109      	bne.n	800562a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005616:	f3ef 8311 	mrs	r3, BASEPRI
 800561a:	603b      	str	r3, [r7, #0]
  return(result);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005622:	f06f 0305 	mvn.w	r3, #5
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e00c      	b.n	8005644 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800562a:	4b09      	ldr	r3, [pc, #36]	@ (8005650 <osKernelInitialize+0x60>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005632:	4b07      	ldr	r3, [pc, #28]	@ (8005650 <osKernelInitialize+0x60>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
 800563c:	e002      	b.n	8005644 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800563e:	f04f 33ff 	mov.w	r3, #4294967295
 8005642:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005644:	68fb      	ldr	r3, [r7, #12]
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	bc80      	pop	{r7}
 800564e:	4770      	bx	lr
 8005650:	2000067c 	.word	0x2000067c

08005654 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800565a:	f3ef 8305 	mrs	r3, IPSR
 800565e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005660:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005666:	f3ef 8310 	mrs	r3, PRIMASK
 800566a:	607b      	str	r3, [r7, #4]
  return(result);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d109      	bne.n	8005686 <osKernelStart+0x32>
 8005672:	4b11      	ldr	r3, [pc, #68]	@ (80056b8 <osKernelStart+0x64>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b02      	cmp	r3, #2
 8005678:	d109      	bne.n	800568e <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800567a:	f3ef 8311 	mrs	r3, BASEPRI
 800567e:	603b      	str	r3, [r7, #0]
  return(result);
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d003      	beq.n	800568e <osKernelStart+0x3a>
    stat = osErrorISR;
 8005686:	f06f 0305 	mvn.w	r3, #5
 800568a:	60fb      	str	r3, [r7, #12]
 800568c:	e00e      	b.n	80056ac <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800568e:	4b0a      	ldr	r3, [pc, #40]	@ (80056b8 <osKernelStart+0x64>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	2b01      	cmp	r3, #1
 8005694:	d107      	bne.n	80056a6 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005696:	4b08      	ldr	r3, [pc, #32]	@ (80056b8 <osKernelStart+0x64>)
 8005698:	2202      	movs	r2, #2
 800569a:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 800569c:	f001 fd1e 	bl	80070dc <vTaskStartScheduler>
      stat = osOK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e002      	b.n	80056ac <osKernelStart+0x58>
    } else {
      stat = osError;
 80056a6:	f04f 33ff 	mov.w	r3, #4294967295
 80056aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80056ac:	68fb      	ldr	r3, [r7, #12]
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	2000067c 	.word	0x2000067c

080056bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b092      	sub	sp, #72	@ 0x48
 80056c0:	af04      	add	r7, sp, #16
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80056c8:	2300      	movs	r3, #0
 80056ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056cc:	f3ef 8305 	mrs	r3, IPSR
 80056d0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	f040 8094 	bne.w	8005802 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056da:	f3ef 8310 	mrs	r3, PRIMASK
 80056de:	623b      	str	r3, [r7, #32]
  return(result);
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f040 808d 	bne.w	8005802 <osThreadNew+0x146>
 80056e8:	4b48      	ldr	r3, [pc, #288]	@ (800580c <osThreadNew+0x150>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d106      	bne.n	80056fe <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056f0:	f3ef 8311 	mrs	r3, BASEPRI
 80056f4:	61fb      	str	r3, [r7, #28]
  return(result);
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f040 8082 	bne.w	8005802 <osThreadNew+0x146>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d07e      	beq.n	8005802 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005704:	2380      	movs	r3, #128	@ 0x80
 8005706:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005708:	2318      	movs	r3, #24
 800570a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 800570c:	2300      	movs	r3, #0
 800570e:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005710:	f107 031b 	add.w	r3, r7, #27
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8005716:	f04f 33ff 	mov.w	r3, #4294967295
 800571a:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d045      	beq.n	80057ae <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d002      	beq.n	8005730 <osThreadNew+0x74>
        name = attr->name;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	699b      	ldr	r3, [r3, #24]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800573e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d008      	beq.n	8005756 <osThreadNew+0x9a>
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005746:	2b38      	cmp	r3, #56	@ 0x38
 8005748:	d805      	bhi.n	8005756 <osThreadNew+0x9a>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d001      	beq.n	800575a <osThreadNew+0x9e>
        return (NULL);
 8005756:	2300      	movs	r3, #0
 8005758:	e054      	b.n	8005804 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d003      	beq.n	800576a <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	089b      	lsrs	r3, r3, #2
 8005768:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d00e      	beq.n	8005790 <osThreadNew+0xd4>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	2b5b      	cmp	r3, #91	@ 0x5b
 8005778:	d90a      	bls.n	8005790 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800577e:	2b00      	cmp	r3, #0
 8005780:	d006      	beq.n	8005790 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d002      	beq.n	8005790 <osThreadNew+0xd4>
        mem = 1;
 800578a:	2301      	movs	r3, #1
 800578c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800578e:	e010      	b.n	80057b2 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d10c      	bne.n	80057b2 <osThreadNew+0xf6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <osThreadNew+0xf6>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d104      	bne.n	80057b2 <osThreadNew+0xf6>
          mem = 0;
 80057a8:	2300      	movs	r3, #0
 80057aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057ac:	e001      	b.n	80057b2 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80057ae:	2300      	movs	r3, #0
 80057b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 80057b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d110      	bne.n	80057da <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057c0:	9202      	str	r2, [sp, #8]
 80057c2:	9301      	str	r3, [sp, #4]
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	9300      	str	r3, [sp, #0]
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057cc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f001 fab2 	bl	8006d38 <xTaskCreateStatic>
 80057d4:	4603      	mov	r3, r0
 80057d6:	617b      	str	r3, [r7, #20]
 80057d8:	e013      	b.n	8005802 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80057da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d110      	bne.n	8005802 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	f107 0314 	add.w	r3, r7, #20
 80057e8:	9301      	str	r3, [sp, #4]
 80057ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f001 faff 	bl	8006df6 <xTaskCreate>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d001      	beq.n	8005802 <osThreadNew+0x146>
          hTask = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005802:	697b      	ldr	r3, [r7, #20]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3738      	adds	r7, #56	@ 0x38
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	2000067c 	.word	0x2000067c

08005810 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005818:	f3ef 8305 	mrs	r3, IPSR
 800581c:	613b      	str	r3, [r7, #16]
  return(result);
 800581e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10f      	bne.n	8005844 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005824:	f3ef 8310 	mrs	r3, PRIMASK
 8005828:	60fb      	str	r3, [r7, #12]
  return(result);
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d109      	bne.n	8005844 <osDelay+0x34>
 8005830:	4b0d      	ldr	r3, [pc, #52]	@ (8005868 <osDelay+0x58>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b02      	cmp	r3, #2
 8005836:	d109      	bne.n	800584c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005838:	f3ef 8311 	mrs	r3, BASEPRI
 800583c:	60bb      	str	r3, [r7, #8]
  return(result);
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <osDelay+0x3c>
    stat = osErrorISR;
 8005844:	f06f 0305 	mvn.w	r3, #5
 8005848:	617b      	str	r3, [r7, #20]
 800584a:	e007      	b.n	800585c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <osDelay+0x4c>
      vTaskDelay(ticks);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f001 fc0a 	bl	8007070 <vTaskDelay>
    }
  }

  return (stat);
 800585c:	697b      	ldr	r3, [r7, #20]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	2000067c 	.word	0x2000067c

0800586c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800586c:	b580      	push	{r7, lr}
 800586e:	b08c      	sub	sp, #48	@ 0x30
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005878:	2300      	movs	r3, #0
 800587a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800587c:	f3ef 8305 	mrs	r3, IPSR
 8005880:	61bb      	str	r3, [r7, #24]
  return(result);
 8005882:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005884:	2b00      	cmp	r3, #0
 8005886:	f040 8086 	bne.w	8005996 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800588a:	f3ef 8310 	mrs	r3, PRIMASK
 800588e:	617b      	str	r3, [r7, #20]
  return(result);
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d17f      	bne.n	8005996 <osSemaphoreNew+0x12a>
 8005896:	4b42      	ldr	r3, [pc, #264]	@ (80059a0 <osSemaphoreNew+0x134>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d105      	bne.n	80058aa <osSemaphoreNew+0x3e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800589e:	f3ef 8311 	mrs	r3, BASEPRI
 80058a2:	613b      	str	r3, [r7, #16]
  return(result);
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d175      	bne.n	8005996 <osSemaphoreNew+0x12a>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d072      	beq.n	8005996 <osSemaphoreNew+0x12a>
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d86e      	bhi.n	8005996 <osSemaphoreNew+0x12a>
    mem = -1;
 80058b8:	f04f 33ff 	mov.w	r3, #4294967295
 80058bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d006      	beq.n	80058da <osSemaphoreNew+0x6e>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	2b4f      	cmp	r3, #79	@ 0x4f
 80058d2:	d902      	bls.n	80058da <osSemaphoreNew+0x6e>
        mem = 1;
 80058d4:	2301      	movs	r3, #1
 80058d6:	623b      	str	r3, [r7, #32]
 80058d8:	e00c      	b.n	80058f4 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689b      	ldr	r3, [r3, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d108      	bne.n	80058f4 <osSemaphoreNew+0x88>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d104      	bne.n	80058f4 <osSemaphoreNew+0x88>
          mem = 0;
 80058ea:	2300      	movs	r3, #0
 80058ec:	623b      	str	r3, [r7, #32]
 80058ee:	e001      	b.n	80058f4 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80058f4:	6a3b      	ldr	r3, [r7, #32]
 80058f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058fa:	d04c      	beq.n	8005996 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d128      	bne.n	8005954 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	2b01      	cmp	r3, #1
 8005906:	d10a      	bne.n	800591e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	2203      	movs	r2, #3
 800590e:	9200      	str	r2, [sp, #0]
 8005910:	2200      	movs	r2, #0
 8005912:	2100      	movs	r1, #0
 8005914:	2001      	movs	r0, #1
 8005916:	f000 fa4f 	bl	8005db8 <xQueueGenericCreateStatic>
 800591a:	6278      	str	r0, [r7, #36]	@ 0x24
 800591c:	e005      	b.n	800592a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800591e:	2203      	movs	r2, #3
 8005920:	2100      	movs	r1, #0
 8005922:	2001      	movs	r0, #1
 8005924:	f000 fac4 	bl	8005eb0 <xQueueGenericCreate>
 8005928:	6278      	str	r0, [r7, #36]	@ 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800592a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d022      	beq.n	8005976 <osSemaphoreNew+0x10a>
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d01f      	beq.n	8005976 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005936:	2300      	movs	r3, #0
 8005938:	2200      	movs	r2, #0
 800593a:	2100      	movs	r1, #0
 800593c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800593e:	f000 fb87 	bl	8006050 <xQueueGenericSend>
 8005942:	4603      	mov	r3, r0
 8005944:	2b01      	cmp	r3, #1
 8005946:	d016      	beq.n	8005976 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8005948:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800594a:	f001 f823 	bl	8006994 <vQueueDelete>
            hSemaphore = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	627b      	str	r3, [r7, #36]	@ 0x24
 8005952:	e010      	b.n	8005976 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8005954:	6a3b      	ldr	r3, [r7, #32]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d108      	bne.n	800596c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	461a      	mov	r2, r3
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 fb06 	bl	8005f74 <xQueueCreateCountingSemaphoreStatic>
 8005968:	6278      	str	r0, [r7, #36]	@ 0x24
 800596a:	e004      	b.n	8005976 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800596c:	68b9      	ldr	r1, [r7, #8]
 800596e:	68f8      	ldr	r0, [r7, #12]
 8005970:	f000 fb39 	bl	8005fe6 <xQueueCreateCountingSemaphore>
 8005974:	6278      	str	r0, [r7, #36]	@ 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00c      	beq.n	8005996 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <osSemaphoreNew+0x11e>
          name = attr->name;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	61fb      	str	r3, [r7, #28]
 8005988:	e001      	b.n	800598e <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800598e:	69f9      	ldr	r1, [r7, #28]
 8005990:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005992:	f001 f94b 	bl	8006c2c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	@ 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	2000067c 	.word	0x2000067c

080059a4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b088      	sub	sp, #32
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80059b6:	69bb      	ldr	r3, [r7, #24]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d103      	bne.n	80059c4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80059bc:	f06f 0303 	mvn.w	r3, #3
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	e04b      	b.n	8005a5c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c4:	f3ef 8305 	mrs	r3, IPSR
 80059c8:	617b      	str	r3, [r7, #20]
  return(result);
 80059ca:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d10f      	bne.n	80059f0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059d0:	f3ef 8310 	mrs	r3, PRIMASK
 80059d4:	613b      	str	r3, [r7, #16]
  return(result);
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d109      	bne.n	80059f0 <osSemaphoreAcquire+0x4c>
 80059dc:	4b22      	ldr	r3, [pc, #136]	@ (8005a68 <osSemaphoreAcquire+0xc4>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b02      	cmp	r3, #2
 80059e2:	d128      	bne.n	8005a36 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80059e4:	f3ef 8311 	mrs	r3, BASEPRI
 80059e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d022      	beq.n	8005a36 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d003      	beq.n	80059fe <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80059f6:	f06f 0303 	mvn.w	r3, #3
 80059fa:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80059fc:	e02d      	b.n	8005a5a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005a02:	f107 0308 	add.w	r3, r7, #8
 8005a06:	461a      	mov	r2, r3
 8005a08:	2100      	movs	r1, #0
 8005a0a:	69b8      	ldr	r0, [r7, #24]
 8005a0c:	f000 ff40 	bl	8006890 <xQueueReceiveFromISR>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d003      	beq.n	8005a1e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8005a16:	f06f 0302 	mvn.w	r3, #2
 8005a1a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8005a1c:	e01d      	b.n	8005a5a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01a      	beq.n	8005a5a <osSemaphoreAcquire+0xb6>
 8005a24:	4b11      	ldr	r3, [pc, #68]	@ (8005a6c <osSemaphoreAcquire+0xc8>)
 8005a26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8005a34:	e011      	b.n	8005a5a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	69b8      	ldr	r0, [r7, #24]
 8005a3a:	f000 fe19 	bl	8006670 <xQueueSemaphoreTake>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d00b      	beq.n	8005a5c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8005a4a:	f06f 0301 	mvn.w	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	e004      	b.n	8005a5c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8005a52:	f06f 0302 	mvn.w	r3, #2
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	e000      	b.n	8005a5c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8005a5a:	bf00      	nop
      }
    }
  }

  return (stat);
 8005a5c:	69fb      	ldr	r3, [r7, #28]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3720      	adds	r7, #32
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2000067c 	.word	0x2000067c
 8005a6c:	e000ed04 	.word	0xe000ed04

08005a70 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005a80:	69bb      	ldr	r3, [r7, #24]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d103      	bne.n	8005a8e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005a86:	f06f 0303 	mvn.w	r3, #3
 8005a8a:	61fb      	str	r3, [r7, #28]
 8005a8c:	e03e      	b.n	8005b0c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a8e:	f3ef 8305 	mrs	r3, IPSR
 8005a92:	617b      	str	r3, [r7, #20]
  return(result);
 8005a94:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10f      	bne.n	8005aba <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9e:	613b      	str	r3, [r7, #16]
  return(result);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d109      	bne.n	8005aba <osSemaphoreRelease+0x4a>
 8005aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8005b18 <osSemaphoreRelease+0xa8>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	d120      	bne.n	8005af0 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005aae:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab2:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01a      	beq.n	8005af0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005abe:	f107 0308 	add.w	r3, r7, #8
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	69b8      	ldr	r0, [r7, #24]
 8005ac6:	f000 fc60 	bl	800638a <xQueueGiveFromISR>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d003      	beq.n	8005ad8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005ad0:	f06f 0302 	mvn.w	r3, #2
 8005ad4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005ad6:	e018      	b.n	8005b0a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d015      	beq.n	8005b0a <osSemaphoreRelease+0x9a>
 8005ade:	4b0f      	ldr	r3, [pc, #60]	@ (8005b1c <osSemaphoreRelease+0xac>)
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005aee:	e00c      	b.n	8005b0a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005af0:	2300      	movs	r3, #0
 8005af2:	2200      	movs	r2, #0
 8005af4:	2100      	movs	r1, #0
 8005af6:	69b8      	ldr	r0, [r7, #24]
 8005af8:	f000 faaa 	bl	8006050 <xQueueGenericSend>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d004      	beq.n	8005b0c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005b02:	f06f 0302 	mvn.w	r3, #2
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e000      	b.n	8005b0c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005b0a:	bf00      	nop
    }
  }

  return (stat);
 8005b0c:	69fb      	ldr	r3, [r7, #28]
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3720      	adds	r7, #32
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2000067c 	.word	0x2000067c
 8005b1c:	e000ed04 	.word	0xe000ed04

08005b20 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	60f8      	str	r0, [r7, #12]
 8005b28:	60b9      	str	r1, [r7, #8]
 8005b2a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	4a06      	ldr	r2, [pc, #24]	@ (8005b48 <vApplicationGetIdleTaskMemory+0x28>)
 8005b30:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	4a05      	ldr	r2, [pc, #20]	@ (8005b4c <vApplicationGetIdleTaskMemory+0x2c>)
 8005b36:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2280      	movs	r2, #128	@ 0x80
 8005b3c:	601a      	str	r2, [r3, #0]
}
 8005b3e:	bf00      	nop
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bc80      	pop	{r7}
 8005b46:	4770      	bx	lr
 8005b48:	20000680 	.word	0x20000680
 8005b4c:	200006dc 	.word	0x200006dc

08005b50 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4a07      	ldr	r2, [pc, #28]	@ (8005b7c <vApplicationGetTimerTaskMemory+0x2c>)
 8005b60:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	4a06      	ldr	r2, [pc, #24]	@ (8005b80 <vApplicationGetTimerTaskMemory+0x30>)
 8005b66:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b6e:	601a      	str	r2, [r3, #0]
}
 8005b70:	bf00      	nop
 8005b72:	3714      	adds	r7, #20
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bc80      	pop	{r7}
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	200008dc 	.word	0x200008dc
 8005b80:	20000938 	.word	0x20000938

08005b84 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	f103 0208 	add.w	r2, r3, #8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f04f 32ff 	mov.w	r2, #4294967295
 8005b9c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f103 0208 	add.w	r2, r3, #8
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f103 0208 	add.w	r2, r3, #8
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bc80      	pop	{r7}
 8005bc0:	4770      	bx	lr

08005bc2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005bd0:	bf00      	nop
 8005bd2:	370c      	adds	r7, #12
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bc80      	pop	{r7}
 8005bd8:	4770      	bx	lr

08005bda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
 8005be2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	689a      	ldr	r2, [r3, #8]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	1c5a      	adds	r2, r3, #1
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	601a      	str	r2, [r3, #0]
}
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bc80      	pop	{r7}
 8005c1e:	4770      	bx	lr

08005c20 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c36:	d103      	bne.n	8005c40 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e00c      	b.n	8005c5a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	3308      	adds	r3, #8
 8005c44:	60fb      	str	r3, [r7, #12]
 8005c46:	e002      	b.n	8005c4e <vListInsert+0x2e>
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68ba      	ldr	r2, [r7, #8]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d2f6      	bcs.n	8005c48 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	683a      	ldr	r2, [r7, #0]
 8005c68:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	601a      	str	r2, [r3, #0]
}
 8005c86:	bf00      	nop
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bc80      	pop	{r7}
 8005c8e:	4770      	bx	lr

08005c90 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6892      	ldr	r2, [r2, #8]
 8005ca6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6852      	ldr	r2, [r2, #4]
 8005cb0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d103      	bne.n	8005cc4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	689a      	ldr	r2, [r3, #8]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	1e5a      	subs	r2, r3, #1
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr
	...

08005ce4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005d10:	f002 fc34 	bl	800857c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d1c:	68f9      	ldr	r1, [r7, #12]
 8005d1e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d20:	fb01 f303 	mul.w	r3, r1, r3
 8005d24:	441a      	add	r2, r3
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d40:	3b01      	subs	r3, #1
 8005d42:	68f9      	ldr	r1, [r7, #12]
 8005d44:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005d46:	fb01 f303 	mul.w	r3, r1, r3
 8005d4a:	441a      	add	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	22ff      	movs	r2, #255	@ 0xff
 8005d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	22ff      	movs	r2, #255	@ 0xff
 8005d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d114      	bne.n	8005d90 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01a      	beq.n	8005da4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	3310      	adds	r3, #16
 8005d72:	4618      	mov	r0, r3
 8005d74:	f001 fc44 	bl	8007600 <xTaskRemoveFromEventList>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d012      	beq.n	8005da4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005db4 <xQueueGenericReset+0xd0>)
 8005d80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	f3bf 8f4f 	dsb	sy
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	e009      	b.n	8005da4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	3310      	adds	r3, #16
 8005d94:	4618      	mov	r0, r3
 8005d96:	f7ff fef5 	bl	8005b84 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3324      	adds	r3, #36	@ 0x24
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7ff fef0 	bl	8005b84 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005da4:	f002 fc1a 	bl	80085dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005da8:	2301      	movs	r3, #1
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	e000ed04 	.word	0xe000ed04

08005db8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b08e      	sub	sp, #56	@ 0x38
 8005dbc:	af02      	add	r7, sp, #8
 8005dbe:	60f8      	str	r0, [r7, #12]
 8005dc0:	60b9      	str	r1, [r7, #8]
 8005dc2:	607a      	str	r2, [r7, #4]
 8005dc4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10b      	bne.n	8005de4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dde:	bf00      	nop
 8005de0:	bf00      	nop
 8005de2:	e7fd      	b.n	8005de0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dee:	f383 8811 	msr	BASEPRI, r3
 8005df2:	f3bf 8f6f 	isb	sy
 8005df6:	f3bf 8f4f 	dsb	sy
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	e7fd      	b.n	8005dfe <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d002      	beq.n	8005e0e <xQueueGenericCreateStatic+0x56>
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d001      	beq.n	8005e12 <xQueueGenericCreateStatic+0x5a>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e000      	b.n	8005e14 <xQueueGenericCreateStatic+0x5c>
 8005e12:	2300      	movs	r3, #0
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d10b      	bne.n	8005e30 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1c:	f383 8811 	msr	BASEPRI, r3
 8005e20:	f3bf 8f6f 	isb	sy
 8005e24:	f3bf 8f4f 	dsb	sy
 8005e28:	623b      	str	r3, [r7, #32]
}
 8005e2a:	bf00      	nop
 8005e2c:	bf00      	nop
 8005e2e:	e7fd      	b.n	8005e2c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d102      	bne.n	8005e3c <xQueueGenericCreateStatic+0x84>
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d101      	bne.n	8005e40 <xQueueGenericCreateStatic+0x88>
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e000      	b.n	8005e42 <xQueueGenericCreateStatic+0x8a>
 8005e40:	2300      	movs	r3, #0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10b      	bne.n	8005e5e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	61fb      	str	r3, [r7, #28]
}
 8005e58:	bf00      	nop
 8005e5a:	bf00      	nop
 8005e5c:	e7fd      	b.n	8005e5a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005e5e:	2350      	movs	r3, #80	@ 0x50
 8005e60:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b50      	cmp	r3, #80	@ 0x50
 8005e66:	d00b      	beq.n	8005e80 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	61bb      	str	r3, [r7, #24]
}
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
 8005e7e:	e7fd      	b.n	8005e7c <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00d      	beq.n	8005ea6 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e92:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f844 	bl	8005f2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005ea6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3730      	adds	r7, #48	@ 0x30
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b08a      	sub	sp, #40	@ 0x28
 8005eb4:	af02      	add	r7, sp, #8
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10b      	bne.n	8005edc <xQueueGenericCreate+0x2c>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	613b      	str	r3, [r7, #16]
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
 8005ee6:	e004      	b.n	8005ef2 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	68ba      	ldr	r2, [r7, #8]
 8005eec:	fb02 f303 	mul.w	r3, r2, r3
 8005ef0:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	3350      	adds	r3, #80	@ 0x50
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f002 fc42 	bl	8008780 <pvPortMalloc>
 8005efc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00f      	beq.n	8005f24 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	3350      	adds	r3, #80	@ 0x50
 8005f08:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f12:	79fa      	ldrb	r2, [r7, #7]
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	9300      	str	r3, [sp, #0]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	697a      	ldr	r2, [r7, #20]
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f000 f805 	bl	8005f2e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8005f24:	69bb      	ldr	r3, [r7, #24]
	}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3720      	adds	r7, #32
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	60f8      	str	r0, [r7, #12]
 8005f36:	60b9      	str	r1, [r7, #8]
 8005f38:	607a      	str	r2, [r7, #4]
 8005f3a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	e002      	b.n	8005f50 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	687a      	ldr	r2, [r7, #4]
 8005f4e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	68fa      	ldr	r2, [r7, #12]
 8005f54:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	68ba      	ldr	r2, [r7, #8]
 8005f5a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005f5c:	2101      	movs	r1, #1
 8005f5e:	69b8      	ldr	r0, [r7, #24]
 8005f60:	f7ff fec0 	bl	8005ce4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	78fa      	ldrb	r2, [r7, #3]
 8005f68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b08a      	sub	sp, #40	@ 0x28
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d10b      	bne.n	8005f9e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	61bb      	str	r3, [r7, #24]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005f9e:	68ba      	ldr	r2, [r7, #8]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d90b      	bls.n	8005fbe <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8005fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005faa:	f383 8811 	msr	BASEPRI, r3
 8005fae:	f3bf 8f6f 	isb	sy
 8005fb2:	f3bf 8f4f 	dsb	sy
 8005fb6:	617b      	str	r3, [r7, #20]
}
 8005fb8:	bf00      	nop
 8005fba:	bf00      	nop
 8005fbc:	e7fd      	b.n	8005fba <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	9300      	str	r3, [sp, #0]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff fef5 	bl	8005db8 <xQueueGenericCreateStatic>
 8005fce:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005fdc:	69fb      	ldr	r3, [r7, #28]
	}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3720      	adds	r7, #32
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
 8005fee:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10b      	bne.n	800600e <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8005ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ffa:	f383 8811 	msr	BASEPRI, r3
 8005ffe:	f3bf 8f6f 	isb	sy
 8006002:	f3bf 8f4f 	dsb	sy
 8006006:	613b      	str	r3, [r7, #16]
}
 8006008:	bf00      	nop
 800600a:	bf00      	nop
 800600c:	e7fd      	b.n	800600a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800600e:	683a      	ldr	r2, [r7, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d90b      	bls.n	800602e <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	60fb      	str	r3, [r7, #12]
}
 8006028:	bf00      	nop
 800602a:	bf00      	nop
 800602c:	e7fd      	b.n	800602a <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800602e:	2202      	movs	r2, #2
 8006030:	2100      	movs	r1, #0
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7ff ff3c 	bl	8005eb0 <xQueueGenericCreate>
 8006038:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	683a      	ldr	r2, [r7, #0]
 8006044:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006046:	697b      	ldr	r3, [r7, #20]
	}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08e      	sub	sp, #56	@ 0x38
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800605e:	2300      	movs	r3, #0
 8006060:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10b      	bne.n	8006084 <xQueueGenericSend+0x34>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <xQueueGenericSend+0x42>
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueGenericSend+0x46>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGenericSend+0x48>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10b      	bne.n	80060b4 <xQueueGenericSend+0x64>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
 80060b2:	e7fd      	b.n	80060b0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d103      	bne.n	80060c2 <xQueueGenericSend+0x72>
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060be:	2b01      	cmp	r3, #1
 80060c0:	d101      	bne.n	80060c6 <xQueueGenericSend+0x76>
 80060c2:	2301      	movs	r3, #1
 80060c4:	e000      	b.n	80060c8 <xQueueGenericSend+0x78>
 80060c6:	2300      	movs	r3, #0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10b      	bne.n	80060e4 <xQueueGenericSend+0x94>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	623b      	str	r3, [r7, #32]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e4:	f001 fc50 	bl	8007988 <xTaskGetSchedulerState>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <xQueueGenericSend+0xa4>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <xQueueGenericSend+0xa8>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <xQueueGenericSend+0xaa>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <xQueueGenericSend+0xc6>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	61fb      	str	r3, [r7, #28]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006116:	f002 fa31 	bl	800857c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800611e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006122:	429a      	cmp	r2, r3
 8006124:	d302      	bcc.n	800612c <xQueueGenericSend+0xdc>
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	2b02      	cmp	r3, #2
 800612a:	d129      	bne.n	8006180 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800612c:	683a      	ldr	r2, [r7, #0]
 800612e:	68b9      	ldr	r1, [r7, #8]
 8006130:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006132:	f000 fc6a 	bl	8006a0a <prvCopyDataToQueue>
 8006136:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800613c:	2b00      	cmp	r3, #0
 800613e:	d010      	beq.n	8006162 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006142:	3324      	adds	r3, #36	@ 0x24
 8006144:	4618      	mov	r0, r3
 8006146:	f001 fa5b 	bl	8007600 <xTaskRemoveFromEventList>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d013      	beq.n	8006178 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006150:	4b3f      	ldr	r3, [pc, #252]	@ (8006250 <xQueueGenericSend+0x200>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	e00a      	b.n	8006178 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006168:	4b39      	ldr	r3, [pc, #228]	@ (8006250 <xQueueGenericSend+0x200>)
 800616a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616e:	601a      	str	r2, [r3, #0]
 8006170:	f3bf 8f4f 	dsb	sy
 8006174:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006178:	f002 fa30 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 800617c:	2301      	movs	r3, #1
 800617e:	e063      	b.n	8006248 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d103      	bne.n	800618e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006186:	f002 fa29 	bl	80085dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800618a:	2300      	movs	r3, #0
 800618c:	e05c      	b.n	8006248 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800618e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006194:	f107 0314 	add.w	r3, r7, #20
 8006198:	4618      	mov	r0, r3
 800619a:	f001 fa95 	bl	80076c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800619e:	2301      	movs	r3, #1
 80061a0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061a2:	f002 fa1b 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061a6:	f001 f801 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061aa:	f002 f9e7 	bl	800857c <vPortEnterCritical>
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b4:	b25b      	sxtb	r3, r3
 80061b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ba:	d103      	bne.n	80061c4 <xQueueGenericSend+0x174>
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061ca:	b25b      	sxtb	r3, r3
 80061cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061d0:	d103      	bne.n	80061da <xQueueGenericSend+0x18a>
 80061d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d4:	2200      	movs	r2, #0
 80061d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061da:	f002 f9ff 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061de:	1d3a      	adds	r2, r7, #4
 80061e0:	f107 0314 	add.w	r3, r7, #20
 80061e4:	4611      	mov	r1, r2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f001 fa84 	bl	80076f4 <xTaskCheckForTimeOut>
 80061ec:	4603      	mov	r3, r0
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d124      	bne.n	800623c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80061f4:	f000 fd01 	bl	8006bfa <prvIsQueueFull>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d018      	beq.n	8006230 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80061fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006200:	3310      	adds	r3, #16
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	4611      	mov	r1, r2
 8006206:	4618      	mov	r0, r3
 8006208:	f001 f9a8 	bl	800755c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800620c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800620e:	f000 fc8c 	bl	8006b2a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006212:	f000 ffd9 	bl	80071c8 <xTaskResumeAll>
 8006216:	4603      	mov	r3, r0
 8006218:	2b00      	cmp	r3, #0
 800621a:	f47f af7c 	bne.w	8006116 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800621e:	4b0c      	ldr	r3, [pc, #48]	@ (8006250 <xQueueGenericSend+0x200>)
 8006220:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006224:	601a      	str	r2, [r3, #0]
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	f3bf 8f6f 	isb	sy
 800622e:	e772      	b.n	8006116 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006232:	f000 fc7a 	bl	8006b2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006236:	f000 ffc7 	bl	80071c8 <xTaskResumeAll>
 800623a:	e76c      	b.n	8006116 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800623c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800623e:	f000 fc74 	bl	8006b2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006242:	f000 ffc1 	bl	80071c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006246:	2300      	movs	r3, #0
		}
	}
}
 8006248:	4618      	mov	r0, r3
 800624a:	3738      	adds	r7, #56	@ 0x38
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08e      	sub	sp, #56	@ 0x38
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d10b      	bne.n	8006284 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800626c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006270:	f383 8811 	msr	BASEPRI, r3
 8006274:	f3bf 8f6f 	isb	sy
 8006278:	f3bf 8f4f 	dsb	sy
 800627c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800627e:	bf00      	nop
 8006280:	bf00      	nop
 8006282:	e7fd      	b.n	8006280 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d103      	bne.n	8006292 <xQueueGenericSendFromISR+0x3e>
 800628a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <xQueueGenericSendFromISR+0x42>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <xQueueGenericSendFromISR+0x44>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10b      	bne.n	80062b4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	623b      	str	r3, [r7, #32]
}
 80062ae:	bf00      	nop
 80062b0:	bf00      	nop
 80062b2:	e7fd      	b.n	80062b0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d103      	bne.n	80062c2 <xQueueGenericSendFromISR+0x6e>
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <xQueueGenericSendFromISR+0x72>
 80062c2:	2301      	movs	r3, #1
 80062c4:	e000      	b.n	80062c8 <xQueueGenericSendFromISR+0x74>
 80062c6:	2300      	movs	r3, #0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10b      	bne.n	80062e4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	61fb      	str	r3, [r7, #28]
}
 80062de:	bf00      	nop
 80062e0:	bf00      	nop
 80062e2:	e7fd      	b.n	80062e0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062e4:	f002 fa0c 	bl	8008700 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062e8:	f3ef 8211 	mrs	r2, BASEPRI
 80062ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	61ba      	str	r2, [r7, #24]
 80062fe:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006300:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006302:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006306:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800630c:	429a      	cmp	r2, r3
 800630e:	d302      	bcc.n	8006316 <xQueueGenericSendFromISR+0xc2>
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	2b02      	cmp	r3, #2
 8006314:	d12c      	bne.n	8006370 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800631c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006320:	683a      	ldr	r2, [r7, #0]
 8006322:	68b9      	ldr	r1, [r7, #8]
 8006324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006326:	f000 fb70 	bl	8006a0a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800632a:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006332:	d112      	bne.n	800635a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006334:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006336:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006338:	2b00      	cmp	r3, #0
 800633a:	d016      	beq.n	800636a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800633c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800633e:	3324      	adds	r3, #36	@ 0x24
 8006340:	4618      	mov	r0, r3
 8006342:	f001 f95d 	bl	8007600 <xTaskRemoveFromEventList>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d00e      	beq.n	800636a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00b      	beq.n	800636a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e007      	b.n	800636a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800635a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800635e:	3301      	adds	r3, #1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	b25a      	sxtb	r2, r3
 8006364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006366:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800636a:	2301      	movs	r3, #1
 800636c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800636e:	e001      	b.n	8006374 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006370:	2300      	movs	r3, #0
 8006372:	637b      	str	r3, [r7, #52]	@ 0x34
 8006374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006376:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800637e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006382:	4618      	mov	r0, r3
 8006384:	3738      	adds	r7, #56	@ 0x38
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b08e      	sub	sp, #56	@ 0x38
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	623b      	str	r3, [r7, #32]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80063b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	61fb      	str	r3, [r7, #28]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80063d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <xQueueGiveFromISR+0x5c>
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d101      	bne.n	80063ea <xQueueGiveFromISR+0x60>
 80063e6:	2301      	movs	r3, #1
 80063e8:	e000      	b.n	80063ec <xQueueGiveFromISR+0x62>
 80063ea:	2300      	movs	r3, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10b      	bne.n	8006408 <xQueueGiveFromISR+0x7e>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	61bb      	str	r3, [r7, #24]
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	e7fd      	b.n	8006404 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006408:	f002 f97a 	bl	8008700 <vPortValidateInterruptPriority>
	__asm volatile
 800640c:	f3ef 8211 	mrs	r2, BASEPRI
 8006410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006414:	f383 8811 	msr	BASEPRI, r3
 8006418:	f3bf 8f6f 	isb	sy
 800641c:	f3bf 8f4f 	dsb	sy
 8006420:	617a      	str	r2, [r7, #20]
 8006422:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006424:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006426:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642c:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800642e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006432:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006434:	429a      	cmp	r2, r3
 8006436:	d22b      	bcs.n	8006490 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800643e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006448:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800644a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800644e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006452:	d112      	bne.n	800647a <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006458:	2b00      	cmp	r3, #0
 800645a:	d016      	beq.n	800648a <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	3324      	adds	r3, #36	@ 0x24
 8006460:	4618      	mov	r0, r3
 8006462:	f001 f8cd 	bl	8007600 <xTaskRemoveFromEventList>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00e      	beq.n	800648a <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	e007      	b.n	800648a <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800647a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800647e:	3301      	adds	r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	b25a      	sxtb	r2, r3
 8006484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800648a:	2301      	movs	r3, #1
 800648c:	637b      	str	r3, [r7, #52]	@ 0x34
 800648e:	e001      	b.n	8006494 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006490:	2300      	movs	r3, #0
 8006492:	637b      	str	r3, [r7, #52]	@ 0x34
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f383 8811 	msr	BASEPRI, r3
}
 800649e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3738      	adds	r7, #56	@ 0x38
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
	...

080064ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b08c      	sub	sp, #48	@ 0x30
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10b      	bne.n	80064de <xQueueReceive+0x32>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	623b      	str	r3, [r7, #32]
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d103      	bne.n	80064ec <xQueueReceive+0x40>
 80064e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d101      	bne.n	80064f0 <xQueueReceive+0x44>
 80064ec:	2301      	movs	r3, #1
 80064ee:	e000      	b.n	80064f2 <xQueueReceive+0x46>
 80064f0:	2300      	movs	r3, #0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <xQueueReceive+0x62>
	__asm volatile
 80064f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fa:	f383 8811 	msr	BASEPRI, r3
 80064fe:	f3bf 8f6f 	isb	sy
 8006502:	f3bf 8f4f 	dsb	sy
 8006506:	61fb      	str	r3, [r7, #28]
}
 8006508:	bf00      	nop
 800650a:	bf00      	nop
 800650c:	e7fd      	b.n	800650a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800650e:	f001 fa3b 	bl	8007988 <xTaskGetSchedulerState>
 8006512:	4603      	mov	r3, r0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d102      	bne.n	800651e <xQueueReceive+0x72>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <xQueueReceive+0x76>
 800651e:	2301      	movs	r3, #1
 8006520:	e000      	b.n	8006524 <xQueueReceive+0x78>
 8006522:	2300      	movs	r3, #0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10b      	bne.n	8006540 <xQueueReceive+0x94>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	61bb      	str	r3, [r7, #24]
}
 800653a:	bf00      	nop
 800653c:	bf00      	nop
 800653e:	e7fd      	b.n	800653c <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006540:	f002 f81c 	bl	800857c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006548:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800654a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01f      	beq.n	8006590 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006550:	68b9      	ldr	r1, [r7, #8]
 8006552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006554:	f000 fac3 	bl	8006ade <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655a:	1e5a      	subs	r2, r3, #1
 800655c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800655e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00f      	beq.n	8006588 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800656a:	3310      	adds	r3, #16
 800656c:	4618      	mov	r0, r3
 800656e:	f001 f847 	bl	8007600 <xTaskRemoveFromEventList>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d007      	beq.n	8006588 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006578:	4b3c      	ldr	r3, [pc, #240]	@ (800666c <xQueueReceive+0x1c0>)
 800657a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800657e:	601a      	str	r2, [r3, #0]
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006588:	f002 f828 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 800658c:	2301      	movs	r3, #1
 800658e:	e069      	b.n	8006664 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d103      	bne.n	800659e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006596:	f002 f821 	bl	80085dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800659a:	2300      	movs	r3, #0
 800659c:	e062      	b.n	8006664 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800659e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d106      	bne.n	80065b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065a4:	f107 0310 	add.w	r3, r7, #16
 80065a8:	4618      	mov	r0, r3
 80065aa:	f001 f88d 	bl	80076c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ae:	2301      	movs	r3, #1
 80065b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065b2:	f002 f813 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065b6:	f000 fdf9 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065ba:	f001 ffdf 	bl	800857c <vPortEnterCritical>
 80065be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065c4:	b25b      	sxtb	r3, r3
 80065c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ca:	d103      	bne.n	80065d4 <xQueueReceive+0x128>
 80065cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065da:	b25b      	sxtb	r3, r3
 80065dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e0:	d103      	bne.n	80065ea <xQueueReceive+0x13e>
 80065e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ea:	f001 fff7 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065ee:	1d3a      	adds	r2, r7, #4
 80065f0:	f107 0310 	add.w	r3, r7, #16
 80065f4:	4611      	mov	r1, r2
 80065f6:	4618      	mov	r0, r3
 80065f8:	f001 f87c 	bl	80076f4 <xTaskCheckForTimeOut>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d123      	bne.n	800664a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006604:	f000 fae3 	bl	8006bce <prvIsQueueEmpty>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d017      	beq.n	800663e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800660e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006610:	3324      	adds	r3, #36	@ 0x24
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	4611      	mov	r1, r2
 8006616:	4618      	mov	r0, r3
 8006618:	f000 ffa0 	bl	800755c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800661c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800661e:	f000 fa84 	bl	8006b2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006622:	f000 fdd1 	bl	80071c8 <xTaskResumeAll>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d189      	bne.n	8006540 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800662c:	4b0f      	ldr	r3, [pc, #60]	@ (800666c <xQueueReceive+0x1c0>)
 800662e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006632:	601a      	str	r2, [r3, #0]
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	e780      	b.n	8006540 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800663e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006640:	f000 fa73 	bl	8006b2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006644:	f000 fdc0 	bl	80071c8 <xTaskResumeAll>
 8006648:	e77a      	b.n	8006540 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800664a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800664c:	f000 fa6d 	bl	8006b2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006650:	f000 fdba 	bl	80071c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006654:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006656:	f000 faba 	bl	8006bce <prvIsQueueEmpty>
 800665a:	4603      	mov	r3, r0
 800665c:	2b00      	cmp	r3, #0
 800665e:	f43f af6f 	beq.w	8006540 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006662:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006664:	4618      	mov	r0, r3
 8006666:	3730      	adds	r7, #48	@ 0x30
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b08e      	sub	sp, #56	@ 0x38
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800667a:	2300      	movs	r3, #0
 800667c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006682:	2300      	movs	r3, #0
 8006684:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006688:	2b00      	cmp	r3, #0
 800668a:	d10b      	bne.n	80066a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800668c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006690:	f383 8811 	msr	BASEPRI, r3
 8006694:	f3bf 8f6f 	isb	sy
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	623b      	str	r3, [r7, #32]
}
 800669e:	bf00      	nop
 80066a0:	bf00      	nop
 80066a2:	e7fd      	b.n	80066a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80066a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00b      	beq.n	80066c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	61fb      	str	r3, [r7, #28]
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066c4:	f001 f960 	bl	8007988 <xTaskGetSchedulerState>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d102      	bne.n	80066d4 <xQueueSemaphoreTake+0x64>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d101      	bne.n	80066d8 <xQueueSemaphoreTake+0x68>
 80066d4:	2301      	movs	r3, #1
 80066d6:	e000      	b.n	80066da <xQueueSemaphoreTake+0x6a>
 80066d8:	2300      	movs	r3, #0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d10b      	bne.n	80066f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	61bb      	str	r3, [r7, #24]
}
 80066f0:	bf00      	nop
 80066f2:	bf00      	nop
 80066f4:	e7fd      	b.n	80066f2 <xQueueSemaphoreTake+0x82>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80066f6:	f001 ff41 	bl	800857c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80066fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d024      	beq.n	8006750 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	1e5a      	subs	r2, r3, #1
 800670a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800670c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800670e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8006716:	f001 fabb 	bl	8007c90 <pvTaskIncrementMutexHeldCount>
 800671a:	4602      	mov	r2, r0
 800671c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800671e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006722:	691b      	ldr	r3, [r3, #16]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00f      	beq.n	8006748 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800672a:	3310      	adds	r3, #16
 800672c:	4618      	mov	r0, r3
 800672e:	f000 ff67 	bl	8007600 <xTaskRemoveFromEventList>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d007      	beq.n	8006748 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006738:	4b54      	ldr	r3, [pc, #336]	@ (800688c <xQueueSemaphoreTake+0x21c>)
 800673a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006748:	f001 ff48 	bl	80085dc <vPortExitCritical>
				return pdPASS;
 800674c:	2301      	movs	r3, #1
 800674e:	e098      	b.n	8006882 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d112      	bne.n	800677c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800675c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006760:	f383 8811 	msr	BASEPRI, r3
 8006764:	f3bf 8f6f 	isb	sy
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	617b      	str	r3, [r7, #20]
}
 800676e:	bf00      	nop
 8006770:	bf00      	nop
 8006772:	e7fd      	b.n	8006770 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006774:	f001 ff32 	bl	80085dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006778:	2300      	movs	r3, #0
 800677a:	e082      	b.n	8006882 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800677c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006782:	f107 030c 	add.w	r3, r7, #12
 8006786:	4618      	mov	r0, r3
 8006788:	f000 ff9e 	bl	80076c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006790:	f001 ff24 	bl	80085dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006794:	f000 fd0a 	bl	80071ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006798:	f001 fef0 	bl	800857c <vPortEnterCritical>
 800679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d103      	bne.n	80067b2 <xQueueSemaphoreTake+0x142>
 80067aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067b8:	b25b      	sxtb	r3, r3
 80067ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067be:	d103      	bne.n	80067c8 <xQueueSemaphoreTake+0x158>
 80067c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067c8:	f001 ff08 	bl	80085dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067cc:	463a      	mov	r2, r7
 80067ce:	f107 030c 	add.w	r3, r7, #12
 80067d2:	4611      	mov	r1, r2
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 ff8d 	bl	80076f4 <xTaskCheckForTimeOut>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d132      	bne.n	8006846 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80067e2:	f000 f9f4 	bl	8006bce <prvIsQueueEmpty>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d026      	beq.n	800683a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80067ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d109      	bne.n	8006808 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80067f4:	f001 fec2 	bl	800857c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80067f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f8e1 	bl	80079c4 <xTaskPriorityInherit>
 8006802:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006804:	f001 feea 	bl	80085dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800680a:	3324      	adds	r3, #36	@ 0x24
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	4611      	mov	r1, r2
 8006810:	4618      	mov	r0, r3
 8006812:	f000 fea3 	bl	800755c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006816:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006818:	f000 f987 	bl	8006b2a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800681c:	f000 fcd4 	bl	80071c8 <xTaskResumeAll>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	f47f af67 	bne.w	80066f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006828:	4b18      	ldr	r3, [pc, #96]	@ (800688c <xQueueSemaphoreTake+0x21c>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	e75d      	b.n	80066f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800683a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800683c:	f000 f975 	bl	8006b2a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006840:	f000 fcc2 	bl	80071c8 <xTaskResumeAll>
 8006844:	e757      	b.n	80066f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006846:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006848:	f000 f96f 	bl	8006b2a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800684c:	f000 fcbc 	bl	80071c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006850:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006852:	f000 f9bc 	bl	8006bce <prvIsQueueEmpty>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	f43f af4c 	beq.w	80066f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00d      	beq.n	8006880 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006864:	f001 fe8a 	bl	800857c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006868:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800686a:	f000 f8b7 	bl	80069dc <prvGetDisinheritPriorityAfterTimeout>
 800686e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006876:	4618      	mov	r0, r3
 8006878:	f001 f982 	bl	8007b80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800687c:	f001 feae 	bl	80085dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006880:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006882:	4618      	mov	r0, r3
 8006884:	3738      	adds	r7, #56	@ 0x38
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	e000ed04 	.word	0xe000ed04

08006890 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b08e      	sub	sp, #56	@ 0x38
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80068a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10b      	bne.n	80068be <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	623b      	str	r3, [r7, #32]
}
 80068b8:	bf00      	nop
 80068ba:	bf00      	nop
 80068bc:	e7fd      	b.n	80068ba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d103      	bne.n	80068cc <xQueueReceiveFromISR+0x3c>
 80068c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <xQueueReceiveFromISR+0x40>
 80068cc:	2301      	movs	r3, #1
 80068ce:	e000      	b.n	80068d2 <xQueueReceiveFromISR+0x42>
 80068d0:	2300      	movs	r3, #0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d10b      	bne.n	80068ee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80068d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068da:	f383 8811 	msr	BASEPRI, r3
 80068de:	f3bf 8f6f 	isb	sy
 80068e2:	f3bf 8f4f 	dsb	sy
 80068e6:	61fb      	str	r3, [r7, #28]
}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	e7fd      	b.n	80068ea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80068ee:	f001 ff07 	bl	8008700 <vPortValidateInterruptPriority>
	__asm volatile
 80068f2:	f3ef 8211 	mrs	r2, BASEPRI
 80068f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068fa:	f383 8811 	msr	BASEPRI, r3
 80068fe:	f3bf 8f6f 	isb	sy
 8006902:	f3bf 8f4f 	dsb	sy
 8006906:	61ba      	str	r2, [r7, #24]
 8006908:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800690a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800690c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006916:	2b00      	cmp	r3, #0
 8006918:	d02f      	beq.n	800697a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006920:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006928:	f000 f8d9 	bl	8006ade <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800692c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692e:	1e5a      	subs	r2, r3, #1
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006934:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d112      	bne.n	8006964 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800693e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d016      	beq.n	8006974 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	3310      	adds	r3, #16
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fe58 	bl	8007600 <xTaskRemoveFromEventList>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00e      	beq.n	8006974 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00b      	beq.n	8006974 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2201      	movs	r2, #1
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	e007      	b.n	8006974 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006964:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006968:	3301      	adds	r3, #1
 800696a:	b2db      	uxtb	r3, r3
 800696c:	b25a      	sxtb	r2, r3
 800696e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006970:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006974:	2301      	movs	r3, #1
 8006976:	637b      	str	r3, [r7, #52]	@ 0x34
 8006978:	e001      	b.n	800697e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800697a:	2300      	movs	r3, #0
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
 800697e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006980:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	f383 8811 	msr	BASEPRI, r3
}
 8006988:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800698a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800698c:	4618      	mov	r0, r3
 800698e:	3738      	adds	r7, #56	@ 0x38
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b084      	sub	sp, #16
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10b      	bne.n	80069be <vQueueDelete+0x2a>
	__asm volatile
 80069a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	60bb      	str	r3, [r7, #8]
}
 80069b8:	bf00      	nop
 80069ba:	bf00      	nop
 80069bc:	e7fd      	b.n	80069ba <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	f000 f95c 	bl	8006c7c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 ff9e 	bl	8008910 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80069d4:	bf00      	nop
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}

080069dc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80069dc:	b480      	push	{r7}
 80069de:	b085      	sub	sp, #20
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d006      	beq.n	80069fa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	e001      	b.n	80069fe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80069fa:	2300      	movs	r3, #0
 80069fc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80069fe:	68fb      	ldr	r3, [r7, #12]
	}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b086      	sub	sp, #24
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a16:	2300      	movs	r3, #0
 8006a18:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a1e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d10d      	bne.n	8006a44 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d14d      	bne.n	8006acc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	4618      	mov	r0, r3
 8006a36:	f001 f833 	bl	8007aa0 <xTaskPriorityDisinherit>
 8006a3a:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	605a      	str	r2, [r3, #4]
 8006a42:	e043      	b.n	8006acc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d119      	bne.n	8006a7e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6898      	ldr	r0, [r3, #8]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a52:	461a      	mov	r2, r3
 8006a54:	68b9      	ldr	r1, [r7, #8]
 8006a56:	f002 f89d 	bl	8008b94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689a      	ldr	r2, [r3, #8]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	441a      	add	r2, r3
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d32b      	bcc.n	8006acc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	e026      	b.n	8006acc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	68d8      	ldr	r0, [r3, #12]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a86:	461a      	mov	r2, r3
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	f002 f883 	bl	8008b94 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	68da      	ldr	r2, [r3, #12]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a96:	425b      	negs	r3, r3
 8006a98:	441a      	add	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	68da      	ldr	r2, [r3, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d207      	bcs.n	8006aba <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	685a      	ldr	r2, [r3, #4]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab2:	425b      	negs	r3, r3
 8006ab4:	441a      	add	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d105      	bne.n	8006acc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006ad4:	697b      	ldr	r3, [r7, #20]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b082      	sub	sp, #8
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
 8006ae6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d018      	beq.n	8006b22 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af8:	441a      	add	r2, r3
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d303      	bcc.n	8006b12 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68d9      	ldr	r1, [r3, #12]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6838      	ldr	r0, [r7, #0]
 8006b1e:	f002 f839 	bl	8008b94 <memcpy>
	}
}
 8006b22:	bf00      	nop
 8006b24:	3708      	adds	r7, #8
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b084      	sub	sp, #16
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b32:	f001 fd23 	bl	800857c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b3c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b3e:	e011      	b.n	8006b64 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d012      	beq.n	8006b6e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	3324      	adds	r3, #36	@ 0x24
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f000 fd57 	bl	8007600 <xTaskRemoveFromEventList>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b58:	f000 fe30 	bl	80077bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	3b01      	subs	r3, #1
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	dce9      	bgt.n	8006b40 <prvUnlockQueue+0x16>
 8006b6c:	e000      	b.n	8006b70 <prvUnlockQueue+0x46>
					break;
 8006b6e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	22ff      	movs	r2, #255	@ 0xff
 8006b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006b78:	f001 fd30 	bl	80085dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006b7c:	f001 fcfe 	bl	800857c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006b86:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006b88:	e011      	b.n	8006bae <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d012      	beq.n	8006bb8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3310      	adds	r3, #16
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fd32 	bl	8007600 <xTaskRemoveFromEventList>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ba2:	f000 fe0b 	bl	80077bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ba6:	7bbb      	ldrb	r3, [r7, #14]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dce9      	bgt.n	8006b8a <prvUnlockQueue+0x60>
 8006bb6:	e000      	b.n	8006bba <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bb8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	22ff      	movs	r2, #255	@ 0xff
 8006bbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006bc2:	f001 fd0b 	bl	80085dc <vPortExitCritical>
}
 8006bc6:	bf00      	nop
 8006bc8:	3710      	adds	r7, #16
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b084      	sub	sp, #16
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006bd6:	f001 fcd1 	bl	800857c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d102      	bne.n	8006be8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006be2:	2301      	movs	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e001      	b.n	8006bec <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006be8:	2300      	movs	r3, #0
 8006bea:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006bec:	f001 fcf6 	bl	80085dc <vPortExitCritical>

	return xReturn;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c02:	f001 fcbb 	bl	800857c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d102      	bne.n	8006c18 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c12:	2301      	movs	r3, #1
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	e001      	b.n	8006c1c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c1c:	f001 fcde 	bl	80085dc <vPortExitCritical>

	return xReturn;
 8006c20:	68fb      	ldr	r3, [r7, #12]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c36:	2300      	movs	r3, #0
 8006c38:	60fb      	str	r3, [r7, #12]
 8006c3a:	e014      	b.n	8006c66 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c3c:	4a0e      	ldr	r2, [pc, #56]	@ (8006c78 <vQueueAddToRegistry+0x4c>)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10b      	bne.n	8006c60 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c48:	490b      	ldr	r1, [pc, #44]	@ (8006c78 <vQueueAddToRegistry+0x4c>)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	683a      	ldr	r2, [r7, #0]
 8006c4e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c52:	4a09      	ldr	r2, [pc, #36]	@ (8006c78 <vQueueAddToRegistry+0x4c>)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	00db      	lsls	r3, r3, #3
 8006c58:	4413      	add	r3, r2
 8006c5a:	687a      	ldr	r2, [r7, #4]
 8006c5c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c5e:	e006      	b.n	8006c6e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	3301      	adds	r3, #1
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2b07      	cmp	r3, #7
 8006c6a:	d9e7      	bls.n	8006c3c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006c6c:	bf00      	nop
 8006c6e:	bf00      	nop
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bc80      	pop	{r7}
 8006c76:	4770      	bx	lr
 8006c78:	20000d38 	.word	0x20000d38

08006c7c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	e016      	b.n	8006cb8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8006c8a:	4a10      	ldr	r2, [pc, #64]	@ (8006ccc <vQueueUnregisterQueue+0x50>)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	4413      	add	r3, r2
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d10b      	bne.n	8006cb2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8006c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8006ccc <vQueueUnregisterQueue+0x50>)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8006ca4:	4a09      	ldr	r2, [pc, #36]	@ (8006ccc <vQueueUnregisterQueue+0x50>)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	00db      	lsls	r3, r3, #3
 8006caa:	4413      	add	r3, r2
 8006cac:	2200      	movs	r2, #0
 8006cae:	605a      	str	r2, [r3, #4]
				break;
 8006cb0:	e006      	b.n	8006cc0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3301      	adds	r3, #1
 8006cb6:	60fb      	str	r3, [r7, #12]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b07      	cmp	r3, #7
 8006cbc:	d9e5      	bls.n	8006c8a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	3714      	adds	r7, #20
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bc80      	pop	{r7}
 8006cc8:	4770      	bx	lr
 8006cca:	bf00      	nop
 8006ccc:	20000d38 	.word	0x20000d38

08006cd0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ce0:	f001 fc4c 	bl	800857c <vPortEnterCritical>
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cea:	b25b      	sxtb	r3, r3
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d103      	bne.n	8006cfa <vQueueWaitForMessageRestricted+0x2a>
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d00:	b25b      	sxtb	r3, r3
 8006d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d06:	d103      	bne.n	8006d10 <vQueueWaitForMessageRestricted+0x40>
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d10:	f001 fc64 	bl	80085dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d106      	bne.n	8006d2a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	3324      	adds	r3, #36	@ 0x24
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	4618      	mov	r0, r3
 8006d26:	f000 fc3f 	bl	80075a8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d2a:	6978      	ldr	r0, [r7, #20]
 8006d2c:	f7ff fefd 	bl	8006b2a <prvUnlockQueue>
	}
 8006d30:	bf00      	nop
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b08e      	sub	sp, #56	@ 0x38
 8006d3c:	af04      	add	r7, sp, #16
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
 8006d44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10b      	bne.n	8006d64 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d50:	f383 8811 	msr	BASEPRI, r3
 8006d54:	f3bf 8f6f 	isb	sy
 8006d58:	f3bf 8f4f 	dsb	sy
 8006d5c:	623b      	str	r3, [r7, #32]
}
 8006d5e:	bf00      	nop
 8006d60:	bf00      	nop
 8006d62:	e7fd      	b.n	8006d60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10b      	bne.n	8006d82 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	61fb      	str	r3, [r7, #28]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d82:	235c      	movs	r3, #92	@ 0x5c
 8006d84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	2b5c      	cmp	r3, #92	@ 0x5c
 8006d8a:	d00b      	beq.n	8006da4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	61bb      	str	r3, [r7, #24]
}
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d01e      	beq.n	8006de8 <xTaskCreateStatic+0xb0>
 8006daa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01b      	beq.n	8006de8 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db2:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006db8:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dbc:	2202      	movs	r2, #2
 8006dbe:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	9303      	str	r3, [sp, #12]
 8006dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dc8:	9302      	str	r3, [sp, #8]
 8006dca:	f107 0314 	add.w	r3, r7, #20
 8006dce:	9301      	str	r3, [sp, #4]
 8006dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f000 f850 	bl	8006e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006de0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006de2:	f000 f8d5 	bl	8006f90 <prvAddNewTaskToReadyList>
 8006de6:	e001      	b.n	8006dec <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8006de8:	2300      	movs	r3, #0
 8006dea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006dec:	697b      	ldr	r3, [r7, #20]
	}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3728      	adds	r7, #40	@ 0x28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b08c      	sub	sp, #48	@ 0x30
 8006dfa:	af04      	add	r7, sp, #16
 8006dfc:	60f8      	str	r0, [r7, #12]
 8006dfe:	60b9      	str	r1, [r7, #8]
 8006e00:	603b      	str	r3, [r7, #0]
 8006e02:	4613      	mov	r3, r2
 8006e04:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e06:	88fb      	ldrh	r3, [r7, #6]
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f001 fcb8 	bl	8008780 <pvPortMalloc>
 8006e10:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00e      	beq.n	8006e36 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006e18:	205c      	movs	r0, #92	@ 0x5c
 8006e1a:	f001 fcb1 	bl	8008780 <pvPortMalloc>
 8006e1e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	697a      	ldr	r2, [r7, #20]
 8006e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e2c:	e005      	b.n	8006e3a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e2e:	6978      	ldr	r0, [r7, #20]
 8006e30:	f001 fd6e 	bl	8008910 <vPortFree>
 8006e34:	e001      	b.n	8006e3a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e3a:	69fb      	ldr	r3, [r7, #28]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d017      	beq.n	8006e70 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e48:	88fa      	ldrh	r2, [r7, #6]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	9303      	str	r3, [sp, #12]
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	9302      	str	r3, [sp, #8]
 8006e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e54:	9301      	str	r3, [sp, #4]
 8006e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e58:	9300      	str	r3, [sp, #0]
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	68b9      	ldr	r1, [r7, #8]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f000 f80e 	bl	8006e80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e64:	69f8      	ldr	r0, [r7, #28]
 8006e66:	f000 f893 	bl	8006f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	61bb      	str	r3, [r7, #24]
 8006e6e:	e002      	b.n	8006e76 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e70:	f04f 33ff 	mov.w	r3, #4294967295
 8006e74:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e76:	69bb      	ldr	r3, [r7, #24]
	}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
 8006e8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	461a      	mov	r2, r3
 8006e98:	21a5      	movs	r1, #165	@ 0xa5
 8006e9a:	f001 fe4f 	bl	8008b3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	4413      	add	r3, r2
 8006eae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	f023 0307 	bic.w	r3, r3, #7
 8006eb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d00b      	beq.n	8006eda <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	617b      	str	r3, [r7, #20]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	e012      	b.n	8006f06 <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	7819      	ldrb	r1, [r3, #0]
 8006ee8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	4413      	add	r3, r2
 8006eee:	3334      	adds	r3, #52	@ 0x34
 8006ef0:	460a      	mov	r2, r1
 8006ef2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	4413      	add	r3, r2
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d006      	beq.n	8006f0e <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	3301      	adds	r3, #1
 8006f04:	61fb      	str	r3, [r7, #28]
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	2b0f      	cmp	r3, #15
 8006f0a:	d9e9      	bls.n	8006ee0 <prvInitialiseNewTask+0x60>
 8006f0c:	e000      	b.n	8006f10 <prvInitialiseNewTask+0x90>
		{
			break;
 8006f0e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f12:	2200      	movs	r2, #0
 8006f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1a:	2b37      	cmp	r3, #55	@ 0x37
 8006f1c:	d901      	bls.n	8006f22 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f1e:	2337      	movs	r3, #55	@ 0x37
 8006f20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	2200      	movs	r2, #0
 8006f32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	3304      	adds	r3, #4
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f7fe fe42 	bl	8005bc2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f40:	3318      	adds	r3, #24
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fe fe3d 	bl	8005bc2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f60:	2200      	movs	r2, #0
 8006f62:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f66:	2200      	movs	r2, #0
 8006f68:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f6c:	683a      	ldr	r2, [r7, #0]
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	69b8      	ldr	r0, [r7, #24]
 8006f72:	f001 fa15 	bl	80083a0 <pxPortInitialiseStack>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f7a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f88:	bf00      	nop
 8006f8a:	3720      	adds	r7, #32
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f98:	f001 faf0 	bl	800857c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007054 <prvAddNewTaskToReadyList+0xc4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	4a2c      	ldr	r2, [pc, #176]	@ (8007054 <prvAddNewTaskToReadyList+0xc4>)
 8006fa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d109      	bne.n	8006fc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fae:	4a2a      	ldr	r2, [pc, #168]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fb4:	4b27      	ldr	r3, [pc, #156]	@ (8007054 <prvAddNewTaskToReadyList+0xc4>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d110      	bne.n	8006fde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006fbc:	f000 fc22 	bl	8007804 <prvInitialiseTaskLists>
 8006fc0:	e00d      	b.n	8006fde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006fc2:	4b26      	ldr	r3, [pc, #152]	@ (800705c <prvAddNewTaskToReadyList+0xcc>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d109      	bne.n	8006fde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006fca:	4b23      	ldr	r3, [pc, #140]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d802      	bhi.n	8006fde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006fde:	4b20      	ldr	r3, [pc, #128]	@ (8007060 <prvAddNewTaskToReadyList+0xd0>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	4a1e      	ldr	r2, [pc, #120]	@ (8007060 <prvAddNewTaskToReadyList+0xd0>)
 8006fe6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8007060 <prvAddNewTaskToReadyList+0xd0>)
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8007064 <prvAddNewTaskToReadyList+0xd4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d903      	bls.n	8007004 <prvAddNewTaskToReadyList+0x74>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <prvAddNewTaskToReadyList+0xd4>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4a15      	ldr	r2, [pc, #84]	@ (8007068 <prvAddNewTaskToReadyList+0xd8>)
 8007012:	441a      	add	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7fe fddd 	bl	8005bda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007020:	f001 fadc 	bl	80085dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007024:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <prvAddNewTaskToReadyList+0xcc>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00e      	beq.n	800704a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800702c:	4b0a      	ldr	r3, [pc, #40]	@ (8007058 <prvAddNewTaskToReadyList+0xc8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	429a      	cmp	r2, r3
 8007038:	d207      	bcs.n	800704a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800703a:	4b0c      	ldr	r3, [pc, #48]	@ (800706c <prvAddNewTaskToReadyList+0xdc>)
 800703c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800704a:	bf00      	nop
 800704c:	3708      	adds	r7, #8
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}
 8007052:	bf00      	nop
 8007054:	2000124c 	.word	0x2000124c
 8007058:	20000d78 	.word	0x20000d78
 800705c:	20001258 	.word	0x20001258
 8007060:	20001268 	.word	0x20001268
 8007064:	20001254 	.word	0x20001254
 8007068:	20000d7c 	.word	0x20000d7c
 800706c:	e000ed04 	.word	0xe000ed04

08007070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007078:	2300      	movs	r3, #0
 800707a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d018      	beq.n	80070b4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007082:	4b14      	ldr	r3, [pc, #80]	@ (80070d4 <vTaskDelay+0x64>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00b      	beq.n	80070a2 <vTaskDelay+0x32>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	60bb      	str	r3, [r7, #8]
}
 800709c:	bf00      	nop
 800709e:	bf00      	nop
 80070a0:	e7fd      	b.n	800709e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80070a2:	f000 f883 	bl	80071ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070a6:	2100      	movs	r1, #0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fe05 	bl	8007cb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070ae:	f000 f88b 	bl	80071c8 <xTaskResumeAll>
 80070b2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d107      	bne.n	80070ca <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80070ba:	4b07      	ldr	r3, [pc, #28]	@ (80070d8 <vTaskDelay+0x68>)
 80070bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070c0:	601a      	str	r2, [r3, #0]
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80070ca:	bf00      	nop
 80070cc:	3710      	adds	r7, #16
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20001274 	.word	0x20001274
 80070d8:	e000ed04 	.word	0xe000ed04

080070dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b08a      	sub	sp, #40	@ 0x28
 80070e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80070e2:	2300      	movs	r3, #0
 80070e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80070e6:	2300      	movs	r3, #0
 80070e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80070ea:	463a      	mov	r2, r7
 80070ec:	1d39      	adds	r1, r7, #4
 80070ee:	f107 0308 	add.w	r3, r7, #8
 80070f2:	4618      	mov	r0, r3
 80070f4:	f7fe fd14 	bl	8005b20 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68ba      	ldr	r2, [r7, #8]
 80070fe:	9202      	str	r2, [sp, #8]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	2300      	movs	r3, #0
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	460a      	mov	r2, r1
 800710a:	4922      	ldr	r1, [pc, #136]	@ (8007194 <vTaskStartScheduler+0xb8>)
 800710c:	4822      	ldr	r0, [pc, #136]	@ (8007198 <vTaskStartScheduler+0xbc>)
 800710e:	f7ff fe13 	bl	8006d38 <xTaskCreateStatic>
 8007112:	4603      	mov	r3, r0
 8007114:	4a21      	ldr	r2, [pc, #132]	@ (800719c <vTaskStartScheduler+0xc0>)
 8007116:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007118:	4b20      	ldr	r3, [pc, #128]	@ (800719c <vTaskStartScheduler+0xc0>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d002      	beq.n	8007126 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007120:	2301      	movs	r3, #1
 8007122:	617b      	str	r3, [r7, #20]
 8007124:	e001      	b.n	800712a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007126:	2300      	movs	r3, #0
 8007128:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d102      	bne.n	8007136 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007130:	f000 fe16 	bl	8007d60 <xTimerCreateTimerTask>
 8007134:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d116      	bne.n	800716a <vTaskStartScheduler+0x8e>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	613b      	str	r3, [r7, #16]
}
 800714e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007150:	4b13      	ldr	r3, [pc, #76]	@ (80071a0 <vTaskStartScheduler+0xc4>)
 8007152:	f04f 32ff 	mov.w	r2, #4294967295
 8007156:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007158:	4b12      	ldr	r3, [pc, #72]	@ (80071a4 <vTaskStartScheduler+0xc8>)
 800715a:	2201      	movs	r2, #1
 800715c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800715e:	4b12      	ldr	r3, [pc, #72]	@ (80071a8 <vTaskStartScheduler+0xcc>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007164:	f001 f998 	bl	8008498 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007168:	e00f      	b.n	800718a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007170:	d10b      	bne.n	800718a <vTaskStartScheduler+0xae>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60fb      	str	r3, [r7, #12]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <vTaskStartScheduler+0xaa>
}
 800718a:	bf00      	nop
 800718c:	3718      	adds	r7, #24
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}
 8007192:	bf00      	nop
 8007194:	08008d0c 	.word	0x08008d0c
 8007198:	080077d5 	.word	0x080077d5
 800719c:	20001270 	.word	0x20001270
 80071a0:	2000126c 	.word	0x2000126c
 80071a4:	20001258 	.word	0x20001258
 80071a8:	20001250 	.word	0x20001250

080071ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80071ac:	b480      	push	{r7}
 80071ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80071b0:	4b04      	ldr	r3, [pc, #16]	@ (80071c4 <vTaskSuspendAll+0x18>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	3301      	adds	r3, #1
 80071b6:	4a03      	ldr	r2, [pc, #12]	@ (80071c4 <vTaskSuspendAll+0x18>)
 80071b8:	6013      	str	r3, [r2, #0]
}
 80071ba:	bf00      	nop
 80071bc:	46bd      	mov	sp, r7
 80071be:	bc80      	pop	{r7}
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20001274 	.word	0x20001274

080071c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80071d6:	4b42      	ldr	r3, [pc, #264]	@ (80072e0 <xTaskResumeAll+0x118>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10b      	bne.n	80071f6 <xTaskResumeAll+0x2e>
	__asm volatile
 80071de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e2:	f383 8811 	msr	BASEPRI, r3
 80071e6:	f3bf 8f6f 	isb	sy
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	603b      	str	r3, [r7, #0]
}
 80071f0:	bf00      	nop
 80071f2:	bf00      	nop
 80071f4:	e7fd      	b.n	80071f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80071f6:	f001 f9c1 	bl	800857c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80071fa:	4b39      	ldr	r3, [pc, #228]	@ (80072e0 <xTaskResumeAll+0x118>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	3b01      	subs	r3, #1
 8007200:	4a37      	ldr	r2, [pc, #220]	@ (80072e0 <xTaskResumeAll+0x118>)
 8007202:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007204:	4b36      	ldr	r3, [pc, #216]	@ (80072e0 <xTaskResumeAll+0x118>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d162      	bne.n	80072d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800720c:	4b35      	ldr	r3, [pc, #212]	@ (80072e4 <xTaskResumeAll+0x11c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d05e      	beq.n	80072d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007214:	e02f      	b.n	8007276 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007216:	4b34      	ldr	r3, [pc, #208]	@ (80072e8 <xTaskResumeAll+0x120>)
 8007218:	68db      	ldr	r3, [r3, #12]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	3318      	adds	r3, #24
 8007222:	4618      	mov	r0, r3
 8007224:	f7fe fd34 	bl	8005c90 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3304      	adds	r3, #4
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fd2f 	bl	8005c90 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007236:	4b2d      	ldr	r3, [pc, #180]	@ (80072ec <xTaskResumeAll+0x124>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	429a      	cmp	r2, r3
 800723c:	d903      	bls.n	8007246 <xTaskResumeAll+0x7e>
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007242:	4a2a      	ldr	r2, [pc, #168]	@ (80072ec <xTaskResumeAll+0x124>)
 8007244:	6013      	str	r3, [r2, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800724a:	4613      	mov	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4a27      	ldr	r2, [pc, #156]	@ (80072f0 <xTaskResumeAll+0x128>)
 8007254:	441a      	add	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	3304      	adds	r3, #4
 800725a:	4619      	mov	r1, r3
 800725c:	4610      	mov	r0, r2
 800725e:	f7fe fcbc 	bl	8005bda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007266:	4b23      	ldr	r3, [pc, #140]	@ (80072f4 <xTaskResumeAll+0x12c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800726c:	429a      	cmp	r2, r3
 800726e:	d302      	bcc.n	8007276 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007270:	4b21      	ldr	r3, [pc, #132]	@ (80072f8 <xTaskResumeAll+0x130>)
 8007272:	2201      	movs	r2, #1
 8007274:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007276:	4b1c      	ldr	r3, [pc, #112]	@ (80072e8 <xTaskResumeAll+0x120>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2b00      	cmp	r3, #0
 800727c:	d1cb      	bne.n	8007216 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007284:	f000 fb5c 	bl	8007940 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007288:	4b1c      	ldr	r3, [pc, #112]	@ (80072fc <xTaskResumeAll+0x134>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d010      	beq.n	80072b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007294:	f000 f844 	bl	8007320 <xTaskIncrementTick>
 8007298:	4603      	mov	r3, r0
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800729e:	4b16      	ldr	r3, [pc, #88]	@ (80072f8 <xTaskResumeAll+0x130>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f1      	bne.n	8007294 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80072b0:	4b12      	ldr	r3, [pc, #72]	@ (80072fc <xTaskResumeAll+0x134>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80072b6:	4b10      	ldr	r3, [pc, #64]	@ (80072f8 <xTaskResumeAll+0x130>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80072be:	2301      	movs	r3, #1
 80072c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80072c2:	4b0f      	ldr	r3, [pc, #60]	@ (8007300 <xTaskResumeAll+0x138>)
 80072c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072c8:	601a      	str	r2, [r3, #0]
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072d2:	f001 f983 	bl	80085dc <vPortExitCritical>

	return xAlreadyYielded;
 80072d6:	68bb      	ldr	r3, [r7, #8]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20001274 	.word	0x20001274
 80072e4:	2000124c 	.word	0x2000124c
 80072e8:	2000120c 	.word	0x2000120c
 80072ec:	20001254 	.word	0x20001254
 80072f0:	20000d7c 	.word	0x20000d7c
 80072f4:	20000d78 	.word	0x20000d78
 80072f8:	20001260 	.word	0x20001260
 80072fc:	2000125c 	.word	0x2000125c
 8007300:	e000ed04 	.word	0xe000ed04

08007304 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800730a:	4b04      	ldr	r3, [pc, #16]	@ (800731c <xTaskGetTickCount+0x18>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007310:	687b      	ldr	r3, [r7, #4]
}
 8007312:	4618      	mov	r0, r3
 8007314:	370c      	adds	r7, #12
 8007316:	46bd      	mov	sp, r7
 8007318:	bc80      	pop	{r7}
 800731a:	4770      	bx	lr
 800731c:	20001250 	.word	0x20001250

08007320 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b086      	sub	sp, #24
 8007324:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800732a:	4b52      	ldr	r3, [pc, #328]	@ (8007474 <xTaskIncrementTick+0x154>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	f040 808f 	bne.w	8007452 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007334:	4b50      	ldr	r3, [pc, #320]	@ (8007478 <xTaskIncrementTick+0x158>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	3301      	adds	r3, #1
 800733a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800733c:	4a4e      	ldr	r2, [pc, #312]	@ (8007478 <xTaskIncrementTick+0x158>)
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d121      	bne.n	800738c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007348:	4b4c      	ldr	r3, [pc, #304]	@ (800747c <xTaskIncrementTick+0x15c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d00b      	beq.n	800736a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007356:	f383 8811 	msr	BASEPRI, r3
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	f3bf 8f4f 	dsb	sy
 8007362:	603b      	str	r3, [r7, #0]
}
 8007364:	bf00      	nop
 8007366:	bf00      	nop
 8007368:	e7fd      	b.n	8007366 <xTaskIncrementTick+0x46>
 800736a:	4b44      	ldr	r3, [pc, #272]	@ (800747c <xTaskIncrementTick+0x15c>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	4b43      	ldr	r3, [pc, #268]	@ (8007480 <xTaskIncrementTick+0x160>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a41      	ldr	r2, [pc, #260]	@ (800747c <xTaskIncrementTick+0x15c>)
 8007376:	6013      	str	r3, [r2, #0]
 8007378:	4a41      	ldr	r2, [pc, #260]	@ (8007480 <xTaskIncrementTick+0x160>)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6013      	str	r3, [r2, #0]
 800737e:	4b41      	ldr	r3, [pc, #260]	@ (8007484 <xTaskIncrementTick+0x164>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	4a3f      	ldr	r2, [pc, #252]	@ (8007484 <xTaskIncrementTick+0x164>)
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	f000 fada 	bl	8007940 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800738c:	4b3e      	ldr	r3, [pc, #248]	@ (8007488 <xTaskIncrementTick+0x168>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	429a      	cmp	r2, r3
 8007394:	d34e      	bcc.n	8007434 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007396:	4b39      	ldr	r3, [pc, #228]	@ (800747c <xTaskIncrementTick+0x15c>)
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d101      	bne.n	80073a4 <xTaskIncrementTick+0x84>
 80073a0:	2301      	movs	r3, #1
 80073a2:	e000      	b.n	80073a6 <xTaskIncrementTick+0x86>
 80073a4:	2300      	movs	r3, #0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d004      	beq.n	80073b4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073aa:	4b37      	ldr	r3, [pc, #220]	@ (8007488 <xTaskIncrementTick+0x168>)
 80073ac:	f04f 32ff 	mov.w	r2, #4294967295
 80073b0:	601a      	str	r2, [r3, #0]
					break;
 80073b2:	e03f      	b.n	8007434 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80073b4:	4b31      	ldr	r3, [pc, #196]	@ (800747c <xTaskIncrementTick+0x15c>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80073c4:	693a      	ldr	r2, [r7, #16]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d203      	bcs.n	80073d4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80073cc:	4a2e      	ldr	r2, [pc, #184]	@ (8007488 <xTaskIncrementTick+0x168>)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6013      	str	r3, [r2, #0]
						break;
 80073d2:	e02f      	b.n	8007434 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	3304      	adds	r3, #4
 80073d8:	4618      	mov	r0, r3
 80073da:	f7fe fc59 	bl	8005c90 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	3318      	adds	r3, #24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fc50 	bl	8005c90 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073f4:	4b25      	ldr	r3, [pc, #148]	@ (800748c <xTaskIncrementTick+0x16c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	429a      	cmp	r2, r3
 80073fa:	d903      	bls.n	8007404 <xTaskIncrementTick+0xe4>
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007400:	4a22      	ldr	r2, [pc, #136]	@ (800748c <xTaskIncrementTick+0x16c>)
 8007402:	6013      	str	r3, [r2, #0]
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007408:	4613      	mov	r3, r2
 800740a:	009b      	lsls	r3, r3, #2
 800740c:	4413      	add	r3, r2
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4a1f      	ldr	r2, [pc, #124]	@ (8007490 <xTaskIncrementTick+0x170>)
 8007412:	441a      	add	r2, r3
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	3304      	adds	r3, #4
 8007418:	4619      	mov	r1, r3
 800741a:	4610      	mov	r0, r2
 800741c:	f7fe fbdd 	bl	8005bda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007424:	4b1b      	ldr	r3, [pc, #108]	@ (8007494 <xTaskIncrementTick+0x174>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800742a:	429a      	cmp	r2, r3
 800742c:	d3b3      	bcc.n	8007396 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800742e:	2301      	movs	r3, #1
 8007430:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007432:	e7b0      	b.n	8007396 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007434:	4b17      	ldr	r3, [pc, #92]	@ (8007494 <xTaskIncrementTick+0x174>)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743a:	4915      	ldr	r1, [pc, #84]	@ (8007490 <xTaskIncrementTick+0x170>)
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d907      	bls.n	800745c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	617b      	str	r3, [r7, #20]
 8007450:	e004      	b.n	800745c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007452:	4b11      	ldr	r3, [pc, #68]	@ (8007498 <xTaskIncrementTick+0x178>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	3301      	adds	r3, #1
 8007458:	4a0f      	ldr	r2, [pc, #60]	@ (8007498 <xTaskIncrementTick+0x178>)
 800745a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800745c:	4b0f      	ldr	r3, [pc, #60]	@ (800749c <xTaskIncrementTick+0x17c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d001      	beq.n	8007468 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8007464:	2301      	movs	r3, #1
 8007466:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007468:	697b      	ldr	r3, [r7, #20]
}
 800746a:	4618      	mov	r0, r3
 800746c:	3718      	adds	r7, #24
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
 8007472:	bf00      	nop
 8007474:	20001274 	.word	0x20001274
 8007478:	20001250 	.word	0x20001250
 800747c:	20001204 	.word	0x20001204
 8007480:	20001208 	.word	0x20001208
 8007484:	20001264 	.word	0x20001264
 8007488:	2000126c 	.word	0x2000126c
 800748c:	20001254 	.word	0x20001254
 8007490:	20000d7c 	.word	0x20000d7c
 8007494:	20000d78 	.word	0x20000d78
 8007498:	2000125c 	.word	0x2000125c
 800749c:	20001260 	.word	0x20001260

080074a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074a6:	4b28      	ldr	r3, [pc, #160]	@ (8007548 <vTaskSwitchContext+0xa8>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d003      	beq.n	80074b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80074ae:	4b27      	ldr	r3, [pc, #156]	@ (800754c <vTaskSwitchContext+0xac>)
 80074b0:	2201      	movs	r2, #1
 80074b2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80074b4:	e042      	b.n	800753c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80074b6:	4b25      	ldr	r3, [pc, #148]	@ (800754c <vTaskSwitchContext+0xac>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80074bc:	4b24      	ldr	r3, [pc, #144]	@ (8007550 <vTaskSwitchContext+0xb0>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	e011      	b.n	80074e8 <vTaskSwitchContext+0x48>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10b      	bne.n	80074e2 <vTaskSwitchContext+0x42>
	__asm volatile
 80074ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ce:	f383 8811 	msr	BASEPRI, r3
 80074d2:	f3bf 8f6f 	isb	sy
 80074d6:	f3bf 8f4f 	dsb	sy
 80074da:	607b      	str	r3, [r7, #4]
}
 80074dc:	bf00      	nop
 80074de:	bf00      	nop
 80074e0:	e7fd      	b.n	80074de <vTaskSwitchContext+0x3e>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	3b01      	subs	r3, #1
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	491a      	ldr	r1, [pc, #104]	@ (8007554 <vTaskSwitchContext+0xb4>)
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4613      	mov	r3, r2
 80074ee:	009b      	lsls	r3, r3, #2
 80074f0:	4413      	add	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	440b      	add	r3, r1
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d0e3      	beq.n	80074c4 <vTaskSwitchContext+0x24>
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4613      	mov	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4a13      	ldr	r2, [pc, #76]	@ (8007554 <vTaskSwitchContext+0xb4>)
 8007508:	4413      	add	r3, r2
 800750a:	60bb      	str	r3, [r7, #8]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	685a      	ldr	r2, [r3, #4]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	605a      	str	r2, [r3, #4]
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	685a      	ldr	r2, [r3, #4]
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	3308      	adds	r3, #8
 800751e:	429a      	cmp	r2, r3
 8007520:	d104      	bne.n	800752c <vTaskSwitchContext+0x8c>
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	685a      	ldr	r2, [r3, #4]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	605a      	str	r2, [r3, #4]
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	68db      	ldr	r3, [r3, #12]
 8007532:	4a09      	ldr	r2, [pc, #36]	@ (8007558 <vTaskSwitchContext+0xb8>)
 8007534:	6013      	str	r3, [r2, #0]
 8007536:	4a06      	ldr	r2, [pc, #24]	@ (8007550 <vTaskSwitchContext+0xb0>)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6013      	str	r3, [r2, #0]
}
 800753c:	bf00      	nop
 800753e:	3714      	adds	r7, #20
 8007540:	46bd      	mov	sp, r7
 8007542:	bc80      	pop	{r7}
 8007544:	4770      	bx	lr
 8007546:	bf00      	nop
 8007548:	20001274 	.word	0x20001274
 800754c:	20001260 	.word	0x20001260
 8007550:	20001254 	.word	0x20001254
 8007554:	20000d7c 	.word	0x20000d7c
 8007558:	20000d78 	.word	0x20000d78

0800755c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d10b      	bne.n	8007584 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800756c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007570:	f383 8811 	msr	BASEPRI, r3
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	f3bf 8f4f 	dsb	sy
 800757c:	60fb      	str	r3, [r7, #12]
}
 800757e:	bf00      	nop
 8007580:	bf00      	nop
 8007582:	e7fd      	b.n	8007580 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007584:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <vTaskPlaceOnEventList+0x48>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3318      	adds	r3, #24
 800758a:	4619      	mov	r1, r3
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f7fe fb47 	bl	8005c20 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007592:	2101      	movs	r1, #1
 8007594:	6838      	ldr	r0, [r7, #0]
 8007596:	f000 fb8f 	bl	8007cb8 <prvAddCurrentTaskToDelayedList>
}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000d78 	.word	0x20000d78

080075a8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d10b      	bne.n	80075d2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	617b      	str	r3, [r7, #20]
}
 80075cc:	bf00      	nop
 80075ce:	bf00      	nop
 80075d0:	e7fd      	b.n	80075ce <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075d2:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <vTaskPlaceOnEventListRestricted+0x54>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	3318      	adds	r3, #24
 80075d8:	4619      	mov	r1, r3
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	f7fe fafd 	bl	8005bda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d002      	beq.n	80075ec <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80075e6:	f04f 33ff 	mov.w	r3, #4294967295
 80075ea:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80075ec:	6879      	ldr	r1, [r7, #4]
 80075ee:	68b8      	ldr	r0, [r7, #8]
 80075f0:	f000 fb62 	bl	8007cb8 <prvAddCurrentTaskToDelayedList>
	}
 80075f4:	bf00      	nop
 80075f6:	3718      	adds	r7, #24
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	20000d78 	.word	0x20000d78

08007600 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	68db      	ldr	r3, [r3, #12]
 800760e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d10b      	bne.n	800762e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	60fb      	str	r3, [r7, #12]
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	e7fd      	b.n	800762a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	3318      	adds	r3, #24
 8007632:	4618      	mov	r0, r3
 8007634:	f7fe fb2c 	bl	8005c90 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007638:	4b1d      	ldr	r3, [pc, #116]	@ (80076b0 <xTaskRemoveFromEventList+0xb0>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11d      	bne.n	800767c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	3304      	adds	r3, #4
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fb23 	bl	8005c90 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800764e:	4b19      	ldr	r3, [pc, #100]	@ (80076b4 <xTaskRemoveFromEventList+0xb4>)
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	429a      	cmp	r2, r3
 8007654:	d903      	bls.n	800765e <xTaskRemoveFromEventList+0x5e>
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765a:	4a16      	ldr	r2, [pc, #88]	@ (80076b4 <xTaskRemoveFromEventList+0xb4>)
 800765c:	6013      	str	r3, [r2, #0]
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007662:	4613      	mov	r3, r2
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4a13      	ldr	r2, [pc, #76]	@ (80076b8 <xTaskRemoveFromEventList+0xb8>)
 800766c:	441a      	add	r2, r3
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3304      	adds	r3, #4
 8007672:	4619      	mov	r1, r3
 8007674:	4610      	mov	r0, r2
 8007676:	f7fe fab0 	bl	8005bda <vListInsertEnd>
 800767a:	e005      	b.n	8007688 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	3318      	adds	r3, #24
 8007680:	4619      	mov	r1, r3
 8007682:	480e      	ldr	r0, [pc, #56]	@ (80076bc <xTaskRemoveFromEventList+0xbc>)
 8007684:	f7fe faa9 	bl	8005bda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800768c:	4b0c      	ldr	r3, [pc, #48]	@ (80076c0 <xTaskRemoveFromEventList+0xc0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007692:	429a      	cmp	r2, r3
 8007694:	d905      	bls.n	80076a2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007696:	2301      	movs	r3, #1
 8007698:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800769a:	4b0a      	ldr	r3, [pc, #40]	@ (80076c4 <xTaskRemoveFromEventList+0xc4>)
 800769c:	2201      	movs	r2, #1
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	e001      	b.n	80076a6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80076a2:	2300      	movs	r3, #0
 80076a4:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80076a6:	697b      	ldr	r3, [r7, #20]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}
 80076b0:	20001274 	.word	0x20001274
 80076b4:	20001254 	.word	0x20001254
 80076b8:	20000d7c 	.word	0x20000d7c
 80076bc:	2000120c 	.word	0x2000120c
 80076c0:	20000d78 	.word	0x20000d78
 80076c4:	20001260 	.word	0x20001260

080076c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80076d0:	4b06      	ldr	r3, [pc, #24]	@ (80076ec <vTaskInternalSetTimeOutState+0x24>)
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80076d8:	4b05      	ldr	r3, [pc, #20]	@ (80076f0 <vTaskInternalSetTimeOutState+0x28>)
 80076da:	681a      	ldr	r2, [r3, #0]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	605a      	str	r2, [r3, #4]
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bc80      	pop	{r7}
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	20001264 	.word	0x20001264
 80076f0:	20001250 	.word	0x20001250

080076f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	613b      	str	r3, [r7, #16]
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	e7fd      	b.n	8007718 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10b      	bne.n	800773a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007726:	f383 8811 	msr	BASEPRI, r3
 800772a:	f3bf 8f6f 	isb	sy
 800772e:	f3bf 8f4f 	dsb	sy
 8007732:	60fb      	str	r3, [r7, #12]
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	e7fd      	b.n	8007736 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800773a:	f000 ff1f 	bl	800857c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800773e:	4b1d      	ldr	r3, [pc, #116]	@ (80077b4 <xTaskCheckForTimeOut+0xc0>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007756:	d102      	bne.n	800775e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007758:	2300      	movs	r3, #0
 800775a:	61fb      	str	r3, [r7, #28]
 800775c:	e023      	b.n	80077a6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	4b15      	ldr	r3, [pc, #84]	@ (80077b8 <xTaskCheckForTimeOut+0xc4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	429a      	cmp	r2, r3
 8007768:	d007      	beq.n	800777a <xTaskCheckForTimeOut+0x86>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	69ba      	ldr	r2, [r7, #24]
 8007770:	429a      	cmp	r2, r3
 8007772:	d302      	bcc.n	800777a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007774:	2301      	movs	r3, #1
 8007776:	61fb      	str	r3, [r7, #28]
 8007778:	e015      	b.n	80077a6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800777a:	683b      	ldr	r3, [r7, #0]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	429a      	cmp	r2, r3
 8007782:	d20b      	bcs.n	800779c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	1ad2      	subs	r2, r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f7ff ff99 	bl	80076c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007796:	2300      	movs	r3, #0
 8007798:	61fb      	str	r3, [r7, #28]
 800779a:	e004      	b.n	80077a6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2200      	movs	r2, #0
 80077a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80077a2:	2301      	movs	r3, #1
 80077a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80077a6:	f000 ff19 	bl	80085dc <vPortExitCritical>

	return xReturn;
 80077aa:	69fb      	ldr	r3, [r7, #28]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3720      	adds	r7, #32
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}
 80077b4:	20001250 	.word	0x20001250
 80077b8:	20001264 	.word	0x20001264

080077bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80077bc:	b480      	push	{r7}
 80077be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80077c0:	4b03      	ldr	r3, [pc, #12]	@ (80077d0 <vTaskMissedYield+0x14>)
 80077c2:	2201      	movs	r2, #1
 80077c4:	601a      	str	r2, [r3, #0]
}
 80077c6:	bf00      	nop
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bc80      	pop	{r7}
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	20001260 	.word	0x20001260

080077d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80077dc:	f000 f852 	bl	8007884 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80077e0:	4b06      	ldr	r3, [pc, #24]	@ (80077fc <prvIdleTask+0x28>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d9f9      	bls.n	80077dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80077e8:	4b05      	ldr	r3, [pc, #20]	@ (8007800 <prvIdleTask+0x2c>)
 80077ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077ee:	601a      	str	r2, [r3, #0]
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80077f8:	e7f0      	b.n	80077dc <prvIdleTask+0x8>
 80077fa:	bf00      	nop
 80077fc:	20000d7c 	.word	0x20000d7c
 8007800:	e000ed04 	.word	0xe000ed04

08007804 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800780a:	2300      	movs	r3, #0
 800780c:	607b      	str	r3, [r7, #4]
 800780e:	e00c      	b.n	800782a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	009b      	lsls	r3, r3, #2
 8007816:	4413      	add	r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	4a12      	ldr	r2, [pc, #72]	@ (8007864 <prvInitialiseTaskLists+0x60>)
 800781c:	4413      	add	r3, r2
 800781e:	4618      	mov	r0, r3
 8007820:	f7fe f9b0 	bl	8005b84 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3301      	adds	r3, #1
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b37      	cmp	r3, #55	@ 0x37
 800782e:	d9ef      	bls.n	8007810 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007830:	480d      	ldr	r0, [pc, #52]	@ (8007868 <prvInitialiseTaskLists+0x64>)
 8007832:	f7fe f9a7 	bl	8005b84 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007836:	480d      	ldr	r0, [pc, #52]	@ (800786c <prvInitialiseTaskLists+0x68>)
 8007838:	f7fe f9a4 	bl	8005b84 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800783c:	480c      	ldr	r0, [pc, #48]	@ (8007870 <prvInitialiseTaskLists+0x6c>)
 800783e:	f7fe f9a1 	bl	8005b84 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007842:	480c      	ldr	r0, [pc, #48]	@ (8007874 <prvInitialiseTaskLists+0x70>)
 8007844:	f7fe f99e 	bl	8005b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007848:	480b      	ldr	r0, [pc, #44]	@ (8007878 <prvInitialiseTaskLists+0x74>)
 800784a:	f7fe f99b 	bl	8005b84 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800784e:	4b0b      	ldr	r3, [pc, #44]	@ (800787c <prvInitialiseTaskLists+0x78>)
 8007850:	4a05      	ldr	r2, [pc, #20]	@ (8007868 <prvInitialiseTaskLists+0x64>)
 8007852:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007854:	4b0a      	ldr	r3, [pc, #40]	@ (8007880 <prvInitialiseTaskLists+0x7c>)
 8007856:	4a05      	ldr	r2, [pc, #20]	@ (800786c <prvInitialiseTaskLists+0x68>)
 8007858:	601a      	str	r2, [r3, #0]
}
 800785a:	bf00      	nop
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	20000d7c 	.word	0x20000d7c
 8007868:	200011dc 	.word	0x200011dc
 800786c:	200011f0 	.word	0x200011f0
 8007870:	2000120c 	.word	0x2000120c
 8007874:	20001220 	.word	0x20001220
 8007878:	20001238 	.word	0x20001238
 800787c:	20001204 	.word	0x20001204
 8007880:	20001208 	.word	0x20001208

08007884 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800788a:	e019      	b.n	80078c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800788c:	f000 fe76 	bl	800857c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007890:	4b10      	ldr	r3, [pc, #64]	@ (80078d4 <prvCheckTasksWaitingTermination+0x50>)
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	68db      	ldr	r3, [r3, #12]
 8007896:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	3304      	adds	r3, #4
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe f9f7 	bl	8005c90 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80078a2:	4b0d      	ldr	r3, [pc, #52]	@ (80078d8 <prvCheckTasksWaitingTermination+0x54>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3b01      	subs	r3, #1
 80078a8:	4a0b      	ldr	r2, [pc, #44]	@ (80078d8 <prvCheckTasksWaitingTermination+0x54>)
 80078aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80078ac:	4b0b      	ldr	r3, [pc, #44]	@ (80078dc <prvCheckTasksWaitingTermination+0x58>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	3b01      	subs	r3, #1
 80078b2:	4a0a      	ldr	r2, [pc, #40]	@ (80078dc <prvCheckTasksWaitingTermination+0x58>)
 80078b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80078b6:	f000 fe91 	bl	80085dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f810 	bl	80078e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80078c0:	4b06      	ldr	r3, [pc, #24]	@ (80078dc <prvCheckTasksWaitingTermination+0x58>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d1e1      	bne.n	800788c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80078c8:	bf00      	nop
 80078ca:	bf00      	nop
 80078cc:	3708      	adds	r7, #8
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	bf00      	nop
 80078d4:	20001220 	.word	0x20001220
 80078d8:	2000124c 	.word	0x2000124c
 80078dc:	20001234 	.word	0x20001234

080078e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d108      	bne.n	8007904 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078f6:	4618      	mov	r0, r3
 80078f8:	f001 f80a 	bl	8008910 <vPortFree>
				vPortFree( pxTCB );
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f807 	bl	8008910 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007902:	e019      	b.n	8007938 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800790a:	2b01      	cmp	r3, #1
 800790c:	d103      	bne.n	8007916 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 fffe 	bl	8008910 <vPortFree>
	}
 8007914:	e010      	b.n	8007938 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800791c:	2b02      	cmp	r3, #2
 800791e:	d00b      	beq.n	8007938 <prvDeleteTCB+0x58>
	__asm volatile
 8007920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	60fb      	str	r3, [r7, #12]
}
 8007932:	bf00      	nop
 8007934:	bf00      	nop
 8007936:	e7fd      	b.n	8007934 <prvDeleteTCB+0x54>
	}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007946:	4b0e      	ldr	r3, [pc, #56]	@ (8007980 <prvResetNextTaskUnblockTime+0x40>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d101      	bne.n	8007954 <prvResetNextTaskUnblockTime+0x14>
 8007950:	2301      	movs	r3, #1
 8007952:	e000      	b.n	8007956 <prvResetNextTaskUnblockTime+0x16>
 8007954:	2300      	movs	r3, #0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d004      	beq.n	8007964 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800795a:	4b0a      	ldr	r3, [pc, #40]	@ (8007984 <prvResetNextTaskUnblockTime+0x44>)
 800795c:	f04f 32ff 	mov.w	r2, #4294967295
 8007960:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007962:	e008      	b.n	8007976 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007964:	4b06      	ldr	r3, [pc, #24]	@ (8007980 <prvResetNextTaskUnblockTime+0x40>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	4a04      	ldr	r2, [pc, #16]	@ (8007984 <prvResetNextTaskUnblockTime+0x44>)
 8007974:	6013      	str	r3, [r2, #0]
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr
 8007980:	20001204 	.word	0x20001204
 8007984:	2000126c 	.word	0x2000126c

08007988 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800798e:	4b0b      	ldr	r3, [pc, #44]	@ (80079bc <xTaskGetSchedulerState+0x34>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d102      	bne.n	800799c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007996:	2301      	movs	r3, #1
 8007998:	607b      	str	r3, [r7, #4]
 800799a:	e008      	b.n	80079ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800799c:	4b08      	ldr	r3, [pc, #32]	@ (80079c0 <xTaskGetSchedulerState+0x38>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d102      	bne.n	80079aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80079a4:	2302      	movs	r3, #2
 80079a6:	607b      	str	r3, [r7, #4]
 80079a8:	e001      	b.n	80079ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80079aa:	2300      	movs	r3, #0
 80079ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80079ae:	687b      	ldr	r3, [r7, #4]
	}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bc80      	pop	{r7}
 80079b8:	4770      	bx	lr
 80079ba:	bf00      	nop
 80079bc:	20001258 	.word	0x20001258
 80079c0:	20001274 	.word	0x20001274

080079c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80079d0:	2300      	movs	r3, #0
 80079d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d056      	beq.n	8007a88 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079de:	4b2d      	ldr	r3, [pc, #180]	@ (8007a94 <xTaskPriorityInherit+0xd0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e4:	429a      	cmp	r2, r3
 80079e6:	d246      	bcs.n	8007a76 <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	db06      	blt.n	80079fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079f0:	4b28      	ldr	r3, [pc, #160]	@ (8007a94 <xTaskPriorityInherit+0xd0>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6959      	ldr	r1, [r3, #20]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a06:	4613      	mov	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	4413      	add	r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	4a22      	ldr	r2, [pc, #136]	@ (8007a98 <xTaskPriorityInherit+0xd4>)
 8007a10:	4413      	add	r3, r2
 8007a12:	4299      	cmp	r1, r3
 8007a14:	d101      	bne.n	8007a1a <xTaskPriorityInherit+0x56>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <xTaskPriorityInherit+0x58>
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d022      	beq.n	8007a66 <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe f933 	bl	8005c90 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a2a:	4b1a      	ldr	r3, [pc, #104]	@ (8007a94 <xTaskPriorityInherit+0xd0>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a38:	4b18      	ldr	r3, [pc, #96]	@ (8007a9c <xTaskPriorityInherit+0xd8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	429a      	cmp	r2, r3
 8007a3e:	d903      	bls.n	8007a48 <xTaskPriorityInherit+0x84>
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a44:	4a15      	ldr	r2, [pc, #84]	@ (8007a9c <xTaskPriorityInherit+0xd8>)
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a4c:	4613      	mov	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	4413      	add	r3, r2
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	4a10      	ldr	r2, [pc, #64]	@ (8007a98 <xTaskPriorityInherit+0xd4>)
 8007a56:	441a      	add	r2, r3
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	4610      	mov	r0, r2
 8007a60:	f7fe f8bb 	bl	8005bda <vListInsertEnd>
 8007a64:	e004      	b.n	8007a70 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007a66:	4b0b      	ldr	r3, [pc, #44]	@ (8007a94 <xTaskPriorityInherit+0xd0>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007a70:	2301      	movs	r3, #1
 8007a72:	60fb      	str	r3, [r7, #12]
 8007a74:	e008      	b.n	8007a88 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007a7a:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <xTaskPriorityInherit+0xd0>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d201      	bcs.n	8007a88 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a88:	68fb      	ldr	r3, [r7, #12]
	}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000d78 	.word	0x20000d78
 8007a98:	20000d7c 	.word	0x20000d7c
 8007a9c:	20001254 	.word	0x20001254

08007aa0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b086      	sub	sp, #24
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d058      	beq.n	8007b68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007ab6:	4b2f      	ldr	r3, [pc, #188]	@ (8007b74 <xTaskPriorityDisinherit+0xd4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d00b      	beq.n	8007ad8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ac4:	f383 8811 	msr	BASEPRI, r3
 8007ac8:	f3bf 8f6f 	isb	sy
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	60fb      	str	r3, [r7, #12]
}
 8007ad2:	bf00      	nop
 8007ad4:	bf00      	nop
 8007ad6:	e7fd      	b.n	8007ad4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	60bb      	str	r3, [r7, #8]
}
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007afc:	1e5a      	subs	r2, r3, #1
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d02c      	beq.n	8007b68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d128      	bne.n	8007b68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f7fe f8b8 	bl	8005c90 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b38:	4b0f      	ldr	r3, [pc, #60]	@ (8007b78 <xTaskPriorityDisinherit+0xd8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d903      	bls.n	8007b48 <xTaskPriorityDisinherit+0xa8>
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b44:	4a0c      	ldr	r2, [pc, #48]	@ (8007b78 <xTaskPriorityDisinherit+0xd8>)
 8007b46:	6013      	str	r3, [r2, #0]
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b4c:	4613      	mov	r3, r2
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4a09      	ldr	r2, [pc, #36]	@ (8007b7c <xTaskPriorityDisinherit+0xdc>)
 8007b56:	441a      	add	r2, r3
 8007b58:	693b      	ldr	r3, [r7, #16]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4610      	mov	r0, r2
 8007b60:	f7fe f83b 	bl	8005bda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b64:	2301      	movs	r3, #1
 8007b66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b68:	697b      	ldr	r3, [r7, #20]
	}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	20000d78 	.word	0x20000d78
 8007b78:	20001254 	.word	0x20001254
 8007b7c:	20000d7c 	.word	0x20000d7c

08007b80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b088      	sub	sp, #32
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d071      	beq.n	8007c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007b98:	69bb      	ldr	r3, [r7, #24]
 8007b9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d10b      	bne.n	8007bb8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba4:	f383 8811 	msr	BASEPRI, r3
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	f3bf 8f4f 	dsb	sy
 8007bb0:	60fb      	str	r3, [r7, #12]
}
 8007bb2:	bf00      	nop
 8007bb4:	bf00      	nop
 8007bb6:	e7fd      	b.n	8007bb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bbc:	683a      	ldr	r2, [r7, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d902      	bls.n	8007bc8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	61fb      	str	r3, [r7, #28]
 8007bc6:	e002      	b.n	8007bce <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bcc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d051      	beq.n	8007c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007bd8:	69bb      	ldr	r3, [r7, #24]
 8007bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007bdc:	697a      	ldr	r2, [r7, #20]
 8007bde:	429a      	cmp	r2, r3
 8007be0:	d14c      	bne.n	8007c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007be2:	4b28      	ldr	r3, [pc, #160]	@ (8007c84 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	69ba      	ldr	r2, [r7, #24]
 8007be8:	429a      	cmp	r2, r3
 8007bea:	d10b      	bne.n	8007c04 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf0:	f383 8811 	msr	BASEPRI, r3
 8007bf4:	f3bf 8f6f 	isb	sy
 8007bf8:	f3bf 8f4f 	dsb	sy
 8007bfc:	60bb      	str	r3, [r7, #8]
}
 8007bfe:	bf00      	nop
 8007c00:	bf00      	nop
 8007c02:	e7fd      	b.n	8007c00 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007c04:	69bb      	ldr	r3, [r7, #24]
 8007c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c08:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c10:	69bb      	ldr	r3, [r7, #24]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	db04      	blt.n	8007c22 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007c1e:	69bb      	ldr	r3, [r7, #24]
 8007c20:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007c22:	69bb      	ldr	r3, [r7, #24]
 8007c24:	6959      	ldr	r1, [r3, #20]
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4613      	mov	r3, r2
 8007c2a:	009b      	lsls	r3, r3, #2
 8007c2c:	4413      	add	r3, r2
 8007c2e:	009b      	lsls	r3, r3, #2
 8007c30:	4a15      	ldr	r2, [pc, #84]	@ (8007c88 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007c32:	4413      	add	r3, r2
 8007c34:	4299      	cmp	r1, r3
 8007c36:	d101      	bne.n	8007c3c <vTaskPriorityDisinheritAfterTimeout+0xbc>
 8007c38:	2301      	movs	r3, #1
 8007c3a:	e000      	b.n	8007c3e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d01c      	beq.n	8007c7c <vTaskPriorityDisinheritAfterTimeout+0xfc>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c42:	69bb      	ldr	r3, [r7, #24]
 8007c44:	3304      	adds	r3, #4
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fe f822 	bl	8005c90 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007c4c:	69bb      	ldr	r3, [r7, #24]
 8007c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c50:	4b0e      	ldr	r3, [pc, #56]	@ (8007c8c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d903      	bls.n	8007c60 <vTaskPriorityDisinheritAfterTimeout+0xe0>
 8007c58:	69bb      	ldr	r3, [r7, #24]
 8007c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c8c <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8007c5e:	6013      	str	r3, [r2, #0]
 8007c60:	69bb      	ldr	r3, [r7, #24]
 8007c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4a06      	ldr	r2, [pc, #24]	@ (8007c88 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8007c6e:	441a      	add	r2, r3
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	3304      	adds	r3, #4
 8007c74:	4619      	mov	r1, r3
 8007c76:	4610      	mov	r0, r2
 8007c78:	f7fd ffaf 	bl	8005bda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c7c:	bf00      	nop
 8007c7e:	3720      	adds	r7, #32
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	20000d78 	.word	0x20000d78
 8007c88:	20000d7c 	.word	0x20000d7c
 8007c8c:	20001254 	.word	0x20001254

08007c90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8007c90:	b480      	push	{r7}
 8007c92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007c94:	4b07      	ldr	r3, [pc, #28]	@ (8007cb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d004      	beq.n	8007ca6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007ca6:	4b03      	ldr	r3, [pc, #12]	@ (8007cb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
	}
 8007caa:	4618      	mov	r0, r3
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bc80      	pop	{r7}
 8007cb0:	4770      	bx	lr
 8007cb2:	bf00      	nop
 8007cb4:	20000d78 	.word	0x20000d78

08007cb8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007cc2:	4b21      	ldr	r3, [pc, #132]	@ (8007d48 <prvAddCurrentTaskToDelayedList+0x90>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cc8:	4b20      	ldr	r3, [pc, #128]	@ (8007d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3304      	adds	r3, #4
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fd ffde 	bl	8005c90 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cda:	d10a      	bne.n	8007cf2 <prvAddCurrentTaskToDelayedList+0x3a>
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d007      	beq.n	8007cf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8007d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3304      	adds	r3, #4
 8007ce8:	4619      	mov	r1, r3
 8007cea:	4819      	ldr	r0, [pc, #100]	@ (8007d50 <prvAddCurrentTaskToDelayedList+0x98>)
 8007cec:	f7fd ff75 	bl	8005bda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007cf0:	e026      	b.n	8007d40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007cf2:	68fa      	ldr	r2, [r7, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007cfa:	4b14      	ldr	r3, [pc, #80]	@ (8007d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68ba      	ldr	r2, [r7, #8]
 8007d00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d209      	bcs.n	8007d1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d0a:	4b12      	ldr	r3, [pc, #72]	@ (8007d54 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007d0c:	681a      	ldr	r2, [r3, #0]
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8007d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3304      	adds	r3, #4
 8007d14:	4619      	mov	r1, r3
 8007d16:	4610      	mov	r0, r2
 8007d18:	f7fd ff82 	bl	8005c20 <vListInsert>
}
 8007d1c:	e010      	b.n	8007d40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8007d58 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	4b0a      	ldr	r3, [pc, #40]	@ (8007d4c <prvAddCurrentTaskToDelayedList+0x94>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	f7fd ff78 	bl	8005c20 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007d30:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d202      	bcs.n	8007d40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007d3a:	4a08      	ldr	r2, [pc, #32]	@ (8007d5c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	6013      	str	r3, [r2, #0]
}
 8007d40:	bf00      	nop
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	20001250 	.word	0x20001250
 8007d4c:	20000d78 	.word	0x20000d78
 8007d50:	20001238 	.word	0x20001238
 8007d54:	20001208 	.word	0x20001208
 8007d58:	20001204 	.word	0x20001204
 8007d5c:	2000126c 	.word	0x2000126c

08007d60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b08a      	sub	sp, #40	@ 0x28
 8007d64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007d6a:	f000 fad9 	bl	8008320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007d6e:	4b1d      	ldr	r3, [pc, #116]	@ (8007de4 <xTimerCreateTimerTask+0x84>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d021      	beq.n	8007dba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007d7e:	1d3a      	adds	r2, r7, #4
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	f107 030c 	add.w	r3, r7, #12
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fd fee1 	bl	8005b50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007d8e:	6879      	ldr	r1, [r7, #4]
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	9202      	str	r2, [sp, #8]
 8007d96:	9301      	str	r3, [sp, #4]
 8007d98:	2302      	movs	r3, #2
 8007d9a:	9300      	str	r3, [sp, #0]
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	460a      	mov	r2, r1
 8007da0:	4911      	ldr	r1, [pc, #68]	@ (8007de8 <xTimerCreateTimerTask+0x88>)
 8007da2:	4812      	ldr	r0, [pc, #72]	@ (8007dec <xTimerCreateTimerTask+0x8c>)
 8007da4:	f7fe ffc8 	bl	8006d38 <xTaskCreateStatic>
 8007da8:	4603      	mov	r3, r0
 8007daa:	4a11      	ldr	r2, [pc, #68]	@ (8007df0 <xTimerCreateTimerTask+0x90>)
 8007dac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007dae:	4b10      	ldr	r3, [pc, #64]	@ (8007df0 <xTimerCreateTimerTask+0x90>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007db6:	2301      	movs	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d10b      	bne.n	8007dd8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc4:	f383 8811 	msr	BASEPRI, r3
 8007dc8:	f3bf 8f6f 	isb	sy
 8007dcc:	f3bf 8f4f 	dsb	sy
 8007dd0:	613b      	str	r3, [r7, #16]
}
 8007dd2:	bf00      	nop
 8007dd4:	bf00      	nop
 8007dd6:	e7fd      	b.n	8007dd4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007dd8:	697b      	ldr	r3, [r7, #20]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3718      	adds	r7, #24
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	200012a8 	.word	0x200012a8
 8007de8:	08008d14 	.word	0x08008d14
 8007dec:	08007f15 	.word	0x08007f15
 8007df0:	200012ac 	.word	0x200012ac

08007df4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b08a      	sub	sp, #40	@ 0x28
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	60f8      	str	r0, [r7, #12]
 8007dfc:	60b9      	str	r1, [r7, #8]
 8007dfe:	607a      	str	r2, [r7, #4]
 8007e00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10b      	bne.n	8007e24 <xTimerGenericCommand+0x30>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	623b      	str	r3, [r7, #32]
}
 8007e1e:	bf00      	nop
 8007e20:	bf00      	nop
 8007e22:	e7fd      	b.n	8007e20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007e24:	4b19      	ldr	r3, [pc, #100]	@ (8007e8c <xTimerGenericCommand+0x98>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d02a      	beq.n	8007e82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	dc18      	bgt.n	8007e70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007e3e:	f7ff fda3 	bl	8007988 <xTaskGetSchedulerState>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d109      	bne.n	8007e5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007e48:	4b10      	ldr	r3, [pc, #64]	@ (8007e8c <xTimerGenericCommand+0x98>)
 8007e4a:	6818      	ldr	r0, [r3, #0]
 8007e4c:	f107 0110 	add.w	r1, r7, #16
 8007e50:	2300      	movs	r3, #0
 8007e52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e54:	f7fe f8fc 	bl	8006050 <xQueueGenericSend>
 8007e58:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e5a:	e012      	b.n	8007e82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007e8c <xTimerGenericCommand+0x98>)
 8007e5e:	6818      	ldr	r0, [r3, #0]
 8007e60:	f107 0110 	add.w	r1, r7, #16
 8007e64:	2300      	movs	r3, #0
 8007e66:	2200      	movs	r2, #0
 8007e68:	f7fe f8f2 	bl	8006050 <xQueueGenericSend>
 8007e6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007e6e:	e008      	b.n	8007e82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e70:	4b06      	ldr	r3, [pc, #24]	@ (8007e8c <xTimerGenericCommand+0x98>)
 8007e72:	6818      	ldr	r0, [r3, #0]
 8007e74:	f107 0110 	add.w	r1, r7, #16
 8007e78:	2300      	movs	r3, #0
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	f7fe f9ea 	bl	8006254 <xQueueGenericSendFromISR>
 8007e80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3728      	adds	r7, #40	@ 0x28
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}
 8007e8c:	200012a8 	.word	0x200012a8

08007e90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f10 <prvProcessExpiredTimer+0x80>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	3304      	adds	r3, #4
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f7fd fef1 	bl	8005c90 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	2b01      	cmp	r3, #1
 8007eb4:	d123      	bne.n	8007efe <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	18d1      	adds	r1, r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	683a      	ldr	r2, [r7, #0]
 8007ec2:	6978      	ldr	r0, [r7, #20]
 8007ec4:	f000 f8cc 	bl	8008060 <prvInsertTimerInActiveList>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d017      	beq.n	8007efe <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ece:	2300      	movs	r3, #0
 8007ed0:	9300      	str	r3, [sp, #0]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	2100      	movs	r1, #0
 8007ed8:	6978      	ldr	r0, [r7, #20]
 8007eda:	f7ff ff8b 	bl	8007df4 <xTimerGenericCommand>
 8007ede:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10b      	bne.n	8007efe <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	60fb      	str	r3, [r7, #12]
}
 8007ef8:	bf00      	nop
 8007efa:	bf00      	nop
 8007efc:	e7fd      	b.n	8007efa <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f02:	6978      	ldr	r0, [r7, #20]
 8007f04:	4798      	blx	r3
}
 8007f06:	bf00      	nop
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
 8007f0e:	bf00      	nop
 8007f10:	200012a0 	.word	0x200012a0

08007f14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f1c:	f107 0308 	add.w	r3, r7, #8
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 f859 	bl	8007fd8 <prvGetNextExpireTime>
 8007f26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007f28:	68bb      	ldr	r3, [r7, #8]
 8007f2a:	4619      	mov	r1, r3
 8007f2c:	68f8      	ldr	r0, [r7, #12]
 8007f2e:	f000 f805 	bl	8007f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007f32:	f000 f8d7 	bl	80080e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007f36:	bf00      	nop
 8007f38:	e7f0      	b.n	8007f1c <prvTimerTask+0x8>
	...

08007f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007f46:	f7ff f931 	bl	80071ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f4a:	f107 0308 	add.w	r3, r7, #8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 f866 	bl	8008020 <prvSampleTimeNow>
 8007f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d130      	bne.n	8007fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <prvProcessTimerOrBlockTask+0x3c>
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d806      	bhi.n	8007f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007f6a:	f7ff f92d 	bl	80071c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007f6e:	68f9      	ldr	r1, [r7, #12]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f7ff ff8d 	bl	8007e90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007f76:	e024      	b.n	8007fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d008      	beq.n	8007f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007f7e:	4b13      	ldr	r3, [pc, #76]	@ (8007fcc <prvProcessTimerOrBlockTask+0x90>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	bf0c      	ite	eq
 8007f88:	2301      	moveq	r3, #1
 8007f8a:	2300      	movne	r3, #0
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007f90:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd0 <prvProcessTimerOrBlockTask+0x94>)
 8007f92:	6818      	ldr	r0, [r3, #0]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	1ad3      	subs	r3, r2, r3
 8007f9a:	683a      	ldr	r2, [r7, #0]
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	f7fe fe97 	bl	8006cd0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007fa2:	f7ff f911 	bl	80071c8 <xTaskResumeAll>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007fac:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <prvProcessTimerOrBlockTask+0x98>)
 8007fae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	f3bf 8f4f 	dsb	sy
 8007fb8:	f3bf 8f6f 	isb	sy
}
 8007fbc:	e001      	b.n	8007fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007fbe:	f7ff f903 	bl	80071c8 <xTaskResumeAll>
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	200012a4 	.word	0x200012a4
 8007fd0:	200012a8 	.word	0x200012a8
 8007fd4:	e000ed04 	.word	0xe000ed04

08007fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800801c <prvGetNextExpireTime+0x44>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	bf0c      	ite	eq
 8007fea:	2301      	moveq	r3, #1
 8007fec:	2300      	movne	r3, #0
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	461a      	mov	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d105      	bne.n	800800a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ffe:	4b07      	ldr	r3, [pc, #28]	@ (800801c <prvGetNextExpireTime+0x44>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68db      	ldr	r3, [r3, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	60fb      	str	r3, [r7, #12]
 8008008:	e001      	b.n	800800e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800800a:	2300      	movs	r3, #0
 800800c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800800e:	68fb      	ldr	r3, [r7, #12]
}
 8008010:	4618      	mov	r0, r3
 8008012:	3714      	adds	r7, #20
 8008014:	46bd      	mov	sp, r7
 8008016:	bc80      	pop	{r7}
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	200012a0 	.word	0x200012a0

08008020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008028:	f7ff f96c 	bl	8007304 <xTaskGetTickCount>
 800802c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800802e:	4b0b      	ldr	r3, [pc, #44]	@ (800805c <prvSampleTimeNow+0x3c>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68fa      	ldr	r2, [r7, #12]
 8008034:	429a      	cmp	r2, r3
 8008036:	d205      	bcs.n	8008044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008038:	f000 f910 	bl	800825c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	e002      	b.n	800804a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800804a:	4a04      	ldr	r2, [pc, #16]	@ (800805c <prvSampleTimeNow+0x3c>)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008050:	68fb      	ldr	r3, [r7, #12]
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	200012b0 	.word	0x200012b0

08008060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
 800806c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800806e:	2300      	movs	r3, #0
 8008070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	68ba      	ldr	r2, [r7, #8]
 8008076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800807e:	68ba      	ldr	r2, [r7, #8]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	429a      	cmp	r2, r3
 8008084:	d812      	bhi.n	80080ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	1ad2      	subs	r2, r2, r3
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	699b      	ldr	r3, [r3, #24]
 8008090:	429a      	cmp	r2, r3
 8008092:	d302      	bcc.n	800809a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008094:	2301      	movs	r3, #1
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e01b      	b.n	80080d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800809a:	4b10      	ldr	r3, [pc, #64]	@ (80080dc <prvInsertTimerInActiveList+0x7c>)
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	3304      	adds	r3, #4
 80080a2:	4619      	mov	r1, r3
 80080a4:	4610      	mov	r0, r2
 80080a6:	f7fd fdbb 	bl	8005c20 <vListInsert>
 80080aa:	e012      	b.n	80080d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80080ac:	687a      	ldr	r2, [r7, #4]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	429a      	cmp	r2, r3
 80080b2:	d206      	bcs.n	80080c2 <prvInsertTimerInActiveList+0x62>
 80080b4:	68ba      	ldr	r2, [r7, #8]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d302      	bcc.n	80080c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80080bc:	2301      	movs	r3, #1
 80080be:	617b      	str	r3, [r7, #20]
 80080c0:	e007      	b.n	80080d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80080c2:	4b07      	ldr	r3, [pc, #28]	@ (80080e0 <prvInsertTimerInActiveList+0x80>)
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	3304      	adds	r3, #4
 80080ca:	4619      	mov	r1, r3
 80080cc:	4610      	mov	r0, r2
 80080ce:	f7fd fda7 	bl	8005c20 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80080d2:	697b      	ldr	r3, [r7, #20]
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3718      	adds	r7, #24
 80080d8:	46bd      	mov	sp, r7
 80080da:	bd80      	pop	{r7, pc}
 80080dc:	200012a4 	.word	0x200012a4
 80080e0:	200012a0 	.word	0x200012a0

080080e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b08e      	sub	sp, #56	@ 0x38
 80080e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080ea:	e0a5      	b.n	8008238 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	da19      	bge.n	8008126 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80080f2:	1d3b      	adds	r3, r7, #4
 80080f4:	3304      	adds	r3, #4
 80080f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80080f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d10b      	bne.n	8008116 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	61fb      	str	r3, [r7, #28]
}
 8008110:	bf00      	nop
 8008112:	bf00      	nop
 8008114:	e7fd      	b.n	8008112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800811c:	6850      	ldr	r0, [r2, #4]
 800811e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008120:	6892      	ldr	r2, [r2, #8]
 8008122:	4611      	mov	r1, r2
 8008124:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	f2c0 8085 	blt.w	8008238 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008134:	695b      	ldr	r3, [r3, #20]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d004      	beq.n	8008144 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800813a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800813c:	3304      	adds	r3, #4
 800813e:	4618      	mov	r0, r3
 8008140:	f7fd fda6 	bl	8005c90 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008144:	463b      	mov	r3, r7
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff ff6a 	bl	8008020 <prvSampleTimeNow>
 800814c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2b09      	cmp	r3, #9
 8008152:	d86c      	bhi.n	800822e <prvProcessReceivedCommands+0x14a>
 8008154:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <prvProcessReceivedCommands+0x78>)
 8008156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815a:	bf00      	nop
 800815c:	08008185 	.word	0x08008185
 8008160:	08008185 	.word	0x08008185
 8008164:	08008185 	.word	0x08008185
 8008168:	0800822f 	.word	0x0800822f
 800816c:	080081e3 	.word	0x080081e3
 8008170:	0800821d 	.word	0x0800821d
 8008174:	08008185 	.word	0x08008185
 8008178:	08008185 	.word	0x08008185
 800817c:	0800822f 	.word	0x0800822f
 8008180:	080081e3 	.word	0x080081e3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008184:	68ba      	ldr	r2, [r7, #8]
 8008186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008188:	699b      	ldr	r3, [r3, #24]
 800818a:	18d1      	adds	r1, r2, r3
 800818c:	68bb      	ldr	r3, [r7, #8]
 800818e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008192:	f7ff ff65 	bl	8008060 <prvInsertTimerInActiveList>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d04a      	beq.n	8008232 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800819c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800819e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081a2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80081a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081a6:	69db      	ldr	r3, [r3, #28]
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d142      	bne.n	8008232 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80081ac:	68ba      	ldr	r2, [r7, #8]
 80081ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081b0:	699b      	ldr	r3, [r3, #24]
 80081b2:	441a      	add	r2, r3
 80081b4:	2300      	movs	r3, #0
 80081b6:	9300      	str	r3, [sp, #0]
 80081b8:	2300      	movs	r3, #0
 80081ba:	2100      	movs	r1, #0
 80081bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80081be:	f7ff fe19 	bl	8007df4 <xTimerGenericCommand>
 80081c2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80081c4:	6a3b      	ldr	r3, [r7, #32]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d133      	bne.n	8008232 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 80081ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ce:	f383 8811 	msr	BASEPRI, r3
 80081d2:	f3bf 8f6f 	isb	sy
 80081d6:	f3bf 8f4f 	dsb	sy
 80081da:	61bb      	str	r3, [r7, #24]
}
 80081dc:	bf00      	nop
 80081de:	bf00      	nop
 80081e0:	e7fd      	b.n	80081de <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80081e2:	68ba      	ldr	r2, [r7, #8]
 80081e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80081e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ea:	699b      	ldr	r3, [r3, #24]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d10b      	bne.n	8008208 <prvProcessReceivedCommands+0x124>
	__asm volatile
 80081f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f4:	f383 8811 	msr	BASEPRI, r3
 80081f8:	f3bf 8f6f 	isb	sy
 80081fc:	f3bf 8f4f 	dsb	sy
 8008200:	617b      	str	r3, [r7, #20]
}
 8008202:	bf00      	nop
 8008204:	bf00      	nop
 8008206:	e7fd      	b.n	8008204 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800820a:	699a      	ldr	r2, [r3, #24]
 800820c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820e:	18d1      	adds	r1, r2, r3
 8008210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008214:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008216:	f7ff ff23 	bl	8008060 <prvInsertTimerInActiveList>
					break;
 800821a:	e00d      	b.n	8008238 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800821c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8008222:	2b00      	cmp	r3, #0
 8008224:	d107      	bne.n	8008236 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8008226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008228:	f000 fb72 	bl	8008910 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800822c:	e003      	b.n	8008236 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 800822e:	bf00      	nop
 8008230:	e002      	b.n	8008238 <prvProcessReceivedCommands+0x154>
					break;
 8008232:	bf00      	nop
 8008234:	e000      	b.n	8008238 <prvProcessReceivedCommands+0x154>
					break;
 8008236:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008238:	4b07      	ldr	r3, [pc, #28]	@ (8008258 <prvProcessReceivedCommands+0x174>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	1d39      	adds	r1, r7, #4
 800823e:	2200      	movs	r2, #0
 8008240:	4618      	mov	r0, r3
 8008242:	f7fe f933 	bl	80064ac <xQueueReceive>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	f47f af4f 	bne.w	80080ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800824e:	bf00      	nop
 8008250:	bf00      	nop
 8008252:	3730      	adds	r7, #48	@ 0x30
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	200012a8 	.word	0x200012a8

0800825c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008262:	e046      	b.n	80082f2 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008264:	4b2c      	ldr	r3, [pc, #176]	@ (8008318 <prvSwitchTimerLists+0xbc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800826e:	4b2a      	ldr	r3, [pc, #168]	@ (8008318 <prvSwitchTimerLists+0xbc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	68db      	ldr	r3, [r3, #12]
 8008276:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3304      	adds	r3, #4
 800827c:	4618      	mov	r0, r3
 800827e:	f7fd fd07 	bl	8005c90 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	2b01      	cmp	r3, #1
 8008290:	d12f      	bne.n	80082f2 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	699b      	ldr	r3, [r3, #24]
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4413      	add	r3, r2
 800829a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800829c:	68ba      	ldr	r2, [r7, #8]
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d90e      	bls.n	80082c2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082b0:	4b19      	ldr	r3, [pc, #100]	@ (8008318 <prvSwitchTimerLists+0xbc>)
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7fd fcb0 	bl	8005c20 <vListInsert>
 80082c0:	e017      	b.n	80082f2 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80082c2:	2300      	movs	r3, #0
 80082c4:	9300      	str	r3, [sp, #0]
 80082c6:	2300      	movs	r3, #0
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	2100      	movs	r1, #0
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f7ff fd91 	bl	8007df4 <xTimerGenericCommand>
 80082d2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d10b      	bne.n	80082f2 <prvSwitchTimerLists+0x96>
	__asm volatile
 80082da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082de:	f383 8811 	msr	BASEPRI, r3
 80082e2:	f3bf 8f6f 	isb	sy
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	603b      	str	r3, [r7, #0]
}
 80082ec:	bf00      	nop
 80082ee:	bf00      	nop
 80082f0:	e7fd      	b.n	80082ee <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80082f2:	4b09      	ldr	r3, [pc, #36]	@ (8008318 <prvSwitchTimerLists+0xbc>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1b3      	bne.n	8008264 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80082fc:	4b06      	ldr	r3, [pc, #24]	@ (8008318 <prvSwitchTimerLists+0xbc>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008302:	4b06      	ldr	r3, [pc, #24]	@ (800831c <prvSwitchTimerLists+0xc0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a04      	ldr	r2, [pc, #16]	@ (8008318 <prvSwitchTimerLists+0xbc>)
 8008308:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800830a:	4a04      	ldr	r2, [pc, #16]	@ (800831c <prvSwitchTimerLists+0xc0>)
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	6013      	str	r3, [r2, #0]
}
 8008310:	bf00      	nop
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	200012a0 	.word	0x200012a0
 800831c:	200012a4 	.word	0x200012a4

08008320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008326:	f000 f929 	bl	800857c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800832a:	4b15      	ldr	r3, [pc, #84]	@ (8008380 <prvCheckForValidListAndQueue+0x60>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d120      	bne.n	8008374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008332:	4814      	ldr	r0, [pc, #80]	@ (8008384 <prvCheckForValidListAndQueue+0x64>)
 8008334:	f7fd fc26 	bl	8005b84 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008338:	4813      	ldr	r0, [pc, #76]	@ (8008388 <prvCheckForValidListAndQueue+0x68>)
 800833a:	f7fd fc23 	bl	8005b84 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800833e:	4b13      	ldr	r3, [pc, #76]	@ (800838c <prvCheckForValidListAndQueue+0x6c>)
 8008340:	4a10      	ldr	r2, [pc, #64]	@ (8008384 <prvCheckForValidListAndQueue+0x64>)
 8008342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008344:	4b12      	ldr	r3, [pc, #72]	@ (8008390 <prvCheckForValidListAndQueue+0x70>)
 8008346:	4a10      	ldr	r2, [pc, #64]	@ (8008388 <prvCheckForValidListAndQueue+0x68>)
 8008348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800834a:	2300      	movs	r3, #0
 800834c:	9300      	str	r3, [sp, #0]
 800834e:	4b11      	ldr	r3, [pc, #68]	@ (8008394 <prvCheckForValidListAndQueue+0x74>)
 8008350:	4a11      	ldr	r2, [pc, #68]	@ (8008398 <prvCheckForValidListAndQueue+0x78>)
 8008352:	2110      	movs	r1, #16
 8008354:	200a      	movs	r0, #10
 8008356:	f7fd fd2f 	bl	8005db8 <xQueueGenericCreateStatic>
 800835a:	4603      	mov	r3, r0
 800835c:	4a08      	ldr	r2, [pc, #32]	@ (8008380 <prvCheckForValidListAndQueue+0x60>)
 800835e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008360:	4b07      	ldr	r3, [pc, #28]	@ (8008380 <prvCheckForValidListAndQueue+0x60>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d005      	beq.n	8008374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008368:	4b05      	ldr	r3, [pc, #20]	@ (8008380 <prvCheckForValidListAndQueue+0x60>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	490b      	ldr	r1, [pc, #44]	@ (800839c <prvCheckForValidListAndQueue+0x7c>)
 800836e:	4618      	mov	r0, r3
 8008370:	f7fe fc5c 	bl	8006c2c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008374:	f000 f932 	bl	80085dc <vPortExitCritical>
}
 8008378:	bf00      	nop
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	200012a8 	.word	0x200012a8
 8008384:	20001278 	.word	0x20001278
 8008388:	2000128c 	.word	0x2000128c
 800838c:	200012a0 	.word	0x200012a0
 8008390:	200012a4 	.word	0x200012a4
 8008394:	20001354 	.word	0x20001354
 8008398:	200012b4 	.word	0x200012b4
 800839c:	08008d1c 	.word	0x08008d1c

080083a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80083a0:	b480      	push	{r7}
 80083a2:	b085      	sub	sp, #20
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	3b04      	subs	r3, #4
 80083b0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80083b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	3b04      	subs	r3, #4
 80083be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f023 0201 	bic.w	r2, r3, #1
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	3b04      	subs	r3, #4
 80083ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80083d0:	4a08      	ldr	r2, [pc, #32]	@ (80083f4 <pxPortInitialiseStack+0x54>)
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	3b14      	subs	r3, #20
 80083da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80083dc:	687a      	ldr	r2, [r7, #4]
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	3b20      	subs	r3, #32
 80083e6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80083e8:	68fb      	ldr	r3, [r7, #12]
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3714      	adds	r7, #20
 80083ee:	46bd      	mov	sp, r7
 80083f0:	bc80      	pop	{r7}
 80083f2:	4770      	bx	lr
 80083f4:	080083f9 	.word	0x080083f9

080083f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80083fe:	2300      	movs	r3, #0
 8008400:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008402:	4b12      	ldr	r3, [pc, #72]	@ (800844c <prvTaskExitError+0x54>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840a:	d00b      	beq.n	8008424 <prvTaskExitError+0x2c>
	__asm volatile
 800840c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008410:	f383 8811 	msr	BASEPRI, r3
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	f3bf 8f4f 	dsb	sy
 800841c:	60fb      	str	r3, [r7, #12]
}
 800841e:	bf00      	nop
 8008420:	bf00      	nop
 8008422:	e7fd      	b.n	8008420 <prvTaskExitError+0x28>
	__asm volatile
 8008424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	60bb      	str	r3, [r7, #8]
}
 8008436:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008438:	bf00      	nop
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0fc      	beq.n	800843a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008440:	bf00      	nop
 8008442:	bf00      	nop
 8008444:	3714      	adds	r7, #20
 8008446:	46bd      	mov	sp, r7
 8008448:	bc80      	pop	{r7}
 800844a:	4770      	bx	lr
 800844c:	2000000c 	.word	0x2000000c

08008450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008450:	4b07      	ldr	r3, [pc, #28]	@ (8008470 <pxCurrentTCBConst2>)
 8008452:	6819      	ldr	r1, [r3, #0]
 8008454:	6808      	ldr	r0, [r1, #0]
 8008456:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800845a:	f380 8809 	msr	PSP, r0
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f04f 0000 	mov.w	r0, #0
 8008466:	f380 8811 	msr	BASEPRI, r0
 800846a:	f04e 0e0d 	orr.w	lr, lr, #13
 800846e:	4770      	bx	lr

08008470 <pxCurrentTCBConst2>:
 8008470:	20000d78 	.word	0x20000d78
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008478:	4806      	ldr	r0, [pc, #24]	@ (8008494 <prvPortStartFirstTask+0x1c>)
 800847a:	6800      	ldr	r0, [r0, #0]
 800847c:	6800      	ldr	r0, [r0, #0]
 800847e:	f380 8808 	msr	MSP, r0
 8008482:	b662      	cpsie	i
 8008484:	b661      	cpsie	f
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	f3bf 8f6f 	isb	sy
 800848e:	df00      	svc	0
 8008490:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008492:	bf00      	nop
 8008494:	e000ed08 	.word	0xe000ed08

08008498 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800849e:	4b32      	ldr	r3, [pc, #200]	@ (8008568 <xPortStartScheduler+0xd0>)
 80084a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	22ff      	movs	r2, #255	@ 0xff
 80084ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	b2db      	uxtb	r3, r3
 80084b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80084b8:	78fb      	ldrb	r3, [r7, #3]
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80084c0:	b2da      	uxtb	r2, r3
 80084c2:	4b2a      	ldr	r3, [pc, #168]	@ (800856c <xPortStartScheduler+0xd4>)
 80084c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80084c6:	4b2a      	ldr	r3, [pc, #168]	@ (8008570 <xPortStartScheduler+0xd8>)
 80084c8:	2207      	movs	r2, #7
 80084ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084cc:	e009      	b.n	80084e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80084ce:	4b28      	ldr	r3, [pc, #160]	@ (8008570 <xPortStartScheduler+0xd8>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3b01      	subs	r3, #1
 80084d4:	4a26      	ldr	r2, [pc, #152]	@ (8008570 <xPortStartScheduler+0xd8>)
 80084d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80084d8:	78fb      	ldrb	r3, [r7, #3]
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	005b      	lsls	r3, r3, #1
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80084ea:	2b80      	cmp	r3, #128	@ 0x80
 80084ec:	d0ef      	beq.n	80084ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80084ee:	4b20      	ldr	r3, [pc, #128]	@ (8008570 <xPortStartScheduler+0xd8>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f1c3 0307 	rsb	r3, r3, #7
 80084f6:	2b04      	cmp	r3, #4
 80084f8:	d00b      	beq.n	8008512 <xPortStartScheduler+0x7a>
	__asm volatile
 80084fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fe:	f383 8811 	msr	BASEPRI, r3
 8008502:	f3bf 8f6f 	isb	sy
 8008506:	f3bf 8f4f 	dsb	sy
 800850a:	60bb      	str	r3, [r7, #8]
}
 800850c:	bf00      	nop
 800850e:	bf00      	nop
 8008510:	e7fd      	b.n	800850e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008512:	4b17      	ldr	r3, [pc, #92]	@ (8008570 <xPortStartScheduler+0xd8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	021b      	lsls	r3, r3, #8
 8008518:	4a15      	ldr	r2, [pc, #84]	@ (8008570 <xPortStartScheduler+0xd8>)
 800851a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800851c:	4b14      	ldr	r3, [pc, #80]	@ (8008570 <xPortStartScheduler+0xd8>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008524:	4a12      	ldr	r2, [pc, #72]	@ (8008570 <xPortStartScheduler+0xd8>)
 8008526:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	b2da      	uxtb	r2, r3
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008530:	4b10      	ldr	r3, [pc, #64]	@ (8008574 <xPortStartScheduler+0xdc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a0f      	ldr	r2, [pc, #60]	@ (8008574 <xPortStartScheduler+0xdc>)
 8008536:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800853a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800853c:	4b0d      	ldr	r3, [pc, #52]	@ (8008574 <xPortStartScheduler+0xdc>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a0c      	ldr	r2, [pc, #48]	@ (8008574 <xPortStartScheduler+0xdc>)
 8008542:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008546:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008548:	f000 f8b8 	bl	80086bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800854c:	4b0a      	ldr	r3, [pc, #40]	@ (8008578 <xPortStartScheduler+0xe0>)
 800854e:	2200      	movs	r2, #0
 8008550:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008552:	f7ff ff91 	bl	8008478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008556:	f7fe ffa3 	bl	80074a0 <vTaskSwitchContext>
	prvTaskExitError();
 800855a:	f7ff ff4d 	bl	80083f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800855e:	2300      	movs	r3, #0
}
 8008560:	4618      	mov	r0, r3
 8008562:	3710      	adds	r7, #16
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	e000e400 	.word	0xe000e400
 800856c:	200013a4 	.word	0x200013a4
 8008570:	200013a8 	.word	0x200013a8
 8008574:	e000ed20 	.word	0xe000ed20
 8008578:	2000000c 	.word	0x2000000c

0800857c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800857c:	b480      	push	{r7}
 800857e:	b083      	sub	sp, #12
 8008580:	af00      	add	r7, sp, #0
	__asm volatile
 8008582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	607b      	str	r3, [r7, #4]
}
 8008594:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008596:	4b0f      	ldr	r3, [pc, #60]	@ (80085d4 <vPortEnterCritical+0x58>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3301      	adds	r3, #1
 800859c:	4a0d      	ldr	r2, [pc, #52]	@ (80085d4 <vPortEnterCritical+0x58>)
 800859e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80085a0:	4b0c      	ldr	r3, [pc, #48]	@ (80085d4 <vPortEnterCritical+0x58>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d110      	bne.n	80085ca <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80085a8:	4b0b      	ldr	r3, [pc, #44]	@ (80085d8 <vPortEnterCritical+0x5c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	b2db      	uxtb	r3, r3
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00b      	beq.n	80085ca <vPortEnterCritical+0x4e>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	603b      	str	r3, [r7, #0]
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	e7fd      	b.n	80085c6 <vPortEnterCritical+0x4a>
	}
}
 80085ca:	bf00      	nop
 80085cc:	370c      	adds	r7, #12
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bc80      	pop	{r7}
 80085d2:	4770      	bx	lr
 80085d4:	2000000c 	.word	0x2000000c
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085e2:	4b12      	ldr	r3, [pc, #72]	@ (800862c <vPortExitCritical+0x50>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10b      	bne.n	8008602 <vPortExitCritical+0x26>
	__asm volatile
 80085ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ee:	f383 8811 	msr	BASEPRI, r3
 80085f2:	f3bf 8f6f 	isb	sy
 80085f6:	f3bf 8f4f 	dsb	sy
 80085fa:	607b      	str	r3, [r7, #4]
}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	e7fd      	b.n	80085fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008602:	4b0a      	ldr	r3, [pc, #40]	@ (800862c <vPortExitCritical+0x50>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	3b01      	subs	r3, #1
 8008608:	4a08      	ldr	r2, [pc, #32]	@ (800862c <vPortExitCritical+0x50>)
 800860a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800860c:	4b07      	ldr	r3, [pc, #28]	@ (800862c <vPortExitCritical+0x50>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d105      	bne.n	8008620 <vPortExitCritical+0x44>
 8008614:	2300      	movs	r3, #0
 8008616:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	f383 8811 	msr	BASEPRI, r3
}
 800861e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	bc80      	pop	{r7}
 8008628:	4770      	bx	lr
 800862a:	bf00      	nop
 800862c:	2000000c 	.word	0x2000000c

08008630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008630:	f3ef 8009 	mrs	r0, PSP
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	4b0d      	ldr	r3, [pc, #52]	@ (8008670 <pxCurrentTCBConst>)
 800863a:	681a      	ldr	r2, [r3, #0]
 800863c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008640:	6010      	str	r0, [r2, #0]
 8008642:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008646:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800864a:	f380 8811 	msr	BASEPRI, r0
 800864e:	f7fe ff27 	bl	80074a0 <vTaskSwitchContext>
 8008652:	f04f 0000 	mov.w	r0, #0
 8008656:	f380 8811 	msr	BASEPRI, r0
 800865a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800865e:	6819      	ldr	r1, [r3, #0]
 8008660:	6808      	ldr	r0, [r1, #0]
 8008662:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008666:	f380 8809 	msr	PSP, r0
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	4770      	bx	lr

08008670 <pxCurrentTCBConst>:
 8008670:	20000d78 	.word	0x20000d78
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop

08008678 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	607b      	str	r3, [r7, #4]
}
 8008690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008692:	f7fe fe45 	bl	8007320 <xTaskIncrementTick>
 8008696:	4603      	mov	r3, r0
 8008698:	2b00      	cmp	r3, #0
 800869a:	d003      	beq.n	80086a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800869c:	4b06      	ldr	r3, [pc, #24]	@ (80086b8 <SysTick_Handler+0x40>)
 800869e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a2:	601a      	str	r2, [r3, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	f383 8811 	msr	BASEPRI, r3
}
 80086ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086b0:	bf00      	nop
 80086b2:	3708      	adds	r7, #8
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	e000ed04 	.word	0xe000ed04

080086bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086c0:	4b0a      	ldr	r3, [pc, #40]	@ (80086ec <vPortSetupTimerInterrupt+0x30>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086c6:	4b0a      	ldr	r3, [pc, #40]	@ (80086f0 <vPortSetupTimerInterrupt+0x34>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086cc:	4b09      	ldr	r3, [pc, #36]	@ (80086f4 <vPortSetupTimerInterrupt+0x38>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a09      	ldr	r2, [pc, #36]	@ (80086f8 <vPortSetupTimerInterrupt+0x3c>)
 80086d2:	fba2 2303 	umull	r2, r3, r2, r3
 80086d6:	099b      	lsrs	r3, r3, #6
 80086d8:	4a08      	ldr	r2, [pc, #32]	@ (80086fc <vPortSetupTimerInterrupt+0x40>)
 80086da:	3b01      	subs	r3, #1
 80086dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086de:	4b03      	ldr	r3, [pc, #12]	@ (80086ec <vPortSetupTimerInterrupt+0x30>)
 80086e0:	2207      	movs	r2, #7
 80086e2:	601a      	str	r2, [r3, #0]
}
 80086e4:	bf00      	nop
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bc80      	pop	{r7}
 80086ea:	4770      	bx	lr
 80086ec:	e000e010 	.word	0xe000e010
 80086f0:	e000e018 	.word	0xe000e018
 80086f4:	20000000 	.word	0x20000000
 80086f8:	10624dd3 	.word	0x10624dd3
 80086fc:	e000e014 	.word	0xe000e014

08008700 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008706:	f3ef 8305 	mrs	r3, IPSR
 800870a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b0f      	cmp	r3, #15
 8008710:	d915      	bls.n	800873e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008712:	4a17      	ldr	r2, [pc, #92]	@ (8008770 <vPortValidateInterruptPriority+0x70>)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800871c:	4b15      	ldr	r3, [pc, #84]	@ (8008774 <vPortValidateInterruptPriority+0x74>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	7afa      	ldrb	r2, [r7, #11]
 8008722:	429a      	cmp	r2, r3
 8008724:	d20b      	bcs.n	800873e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872a:	f383 8811 	msr	BASEPRI, r3
 800872e:	f3bf 8f6f 	isb	sy
 8008732:	f3bf 8f4f 	dsb	sy
 8008736:	607b      	str	r3, [r7, #4]
}
 8008738:	bf00      	nop
 800873a:	bf00      	nop
 800873c:	e7fd      	b.n	800873a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800873e:	4b0e      	ldr	r3, [pc, #56]	@ (8008778 <vPortValidateInterruptPriority+0x78>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008746:	4b0d      	ldr	r3, [pc, #52]	@ (800877c <vPortValidateInterruptPriority+0x7c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	429a      	cmp	r2, r3
 800874c:	d90b      	bls.n	8008766 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	603b      	str	r3, [r7, #0]
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	e7fd      	b.n	8008762 <vPortValidateInterruptPriority+0x62>
	}
 8008766:	bf00      	nop
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	bc80      	pop	{r7}
 800876e:	4770      	bx	lr
 8008770:	e000e3f0 	.word	0xe000e3f0
 8008774:	200013a4 	.word	0x200013a4
 8008778:	e000ed0c 	.word	0xe000ed0c
 800877c:	200013a8 	.word	0x200013a8

08008780 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08a      	sub	sp, #40	@ 0x28
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800878c:	f7fe fd0e 	bl	80071ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008790:	4b5a      	ldr	r3, [pc, #360]	@ (80088fc <pvPortMalloc+0x17c>)
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008798:	f000 f916 	bl	80089c8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800879c:	4b58      	ldr	r3, [pc, #352]	@ (8008900 <pvPortMalloc+0x180>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4013      	ands	r3, r2
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f040 8090 	bne.w	80088ca <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d01e      	beq.n	80087ee <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80087b0:	2208      	movs	r2, #8
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4413      	add	r3, r2
 80087b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f003 0307 	and.w	r3, r3, #7
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d015      	beq.n	80087ee <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f023 0307 	bic.w	r3, r3, #7
 80087c8:	3308      	adds	r3, #8
 80087ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <pvPortMalloc+0x6e>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	617b      	str	r3, [r7, #20]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d06a      	beq.n	80088ca <pvPortMalloc+0x14a>
 80087f4:	4b43      	ldr	r3, [pc, #268]	@ (8008904 <pvPortMalloc+0x184>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d865      	bhi.n	80088ca <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087fe:	4b42      	ldr	r3, [pc, #264]	@ (8008908 <pvPortMalloc+0x188>)
 8008800:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008802:	4b41      	ldr	r3, [pc, #260]	@ (8008908 <pvPortMalloc+0x188>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008808:	e004      	b.n	8008814 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800880e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	429a      	cmp	r2, r3
 800881c:	d903      	bls.n	8008826 <pvPortMalloc+0xa6>
 800881e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f1      	bne.n	800880a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008826:	4b35      	ldr	r3, [pc, #212]	@ (80088fc <pvPortMalloc+0x17c>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800882c:	429a      	cmp	r2, r3
 800882e:	d04c      	beq.n	80088ca <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008830:	6a3b      	ldr	r3, [r7, #32]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2208      	movs	r2, #8
 8008836:	4413      	add	r3, r2
 8008838:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800883a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883c:	681a      	ldr	r2, [r3, #0]
 800883e:	6a3b      	ldr	r3, [r7, #32]
 8008840:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	1ad2      	subs	r2, r2, r3
 800884a:	2308      	movs	r3, #8
 800884c:	005b      	lsls	r3, r3, #1
 800884e:	429a      	cmp	r2, r3
 8008850:	d920      	bls.n	8008894 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4413      	add	r3, r2
 8008858:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800885a:	69bb      	ldr	r3, [r7, #24]
 800885c:	f003 0307 	and.w	r3, r3, #7
 8008860:	2b00      	cmp	r3, #0
 8008862:	d00b      	beq.n	800887c <pvPortMalloc+0xfc>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	613b      	str	r3, [r7, #16]
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800887c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800887e:	685a      	ldr	r2, [r3, #4]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	1ad2      	subs	r2, r2, r3
 8008884:	69bb      	ldr	r3, [r7, #24]
 8008886:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800888e:	69b8      	ldr	r0, [r7, #24]
 8008890:	f000 f8fc 	bl	8008a8c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008894:	4b1b      	ldr	r3, [pc, #108]	@ (8008904 <pvPortMalloc+0x184>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	4a19      	ldr	r2, [pc, #100]	@ (8008904 <pvPortMalloc+0x184>)
 80088a0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80088a2:	4b18      	ldr	r3, [pc, #96]	@ (8008904 <pvPortMalloc+0x184>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	4b19      	ldr	r3, [pc, #100]	@ (800890c <pvPortMalloc+0x18c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d203      	bcs.n	80088b6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80088ae:	4b15      	ldr	r3, [pc, #84]	@ (8008904 <pvPortMalloc+0x184>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a16      	ldr	r2, [pc, #88]	@ (800890c <pvPortMalloc+0x18c>)
 80088b4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80088b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	4b11      	ldr	r3, [pc, #68]	@ (8008900 <pvPortMalloc+0x180>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	431a      	orrs	r2, r3
 80088c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80088c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088c6:	2200      	movs	r2, #0
 80088c8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80088ca:	f7fe fc7d 	bl	80071c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	f003 0307 	and.w	r3, r3, #7
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d00b      	beq.n	80088f0 <pvPortMalloc+0x170>
	__asm volatile
 80088d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088dc:	f383 8811 	msr	BASEPRI, r3
 80088e0:	f3bf 8f6f 	isb	sy
 80088e4:	f3bf 8f4f 	dsb	sy
 80088e8:	60fb      	str	r3, [r7, #12]
}
 80088ea:	bf00      	nop
 80088ec:	bf00      	nop
 80088ee:	e7fd      	b.n	80088ec <pvPortMalloc+0x16c>
	return pvReturn;
 80088f0:	69fb      	ldr	r3, [r7, #28]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3728      	adds	r7, #40	@ 0x28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	200033b4 	.word	0x200033b4
 8008900:	200033c0 	.word	0x200033c0
 8008904:	200033b8 	.word	0x200033b8
 8008908:	200033ac 	.word	0x200033ac
 800890c:	200033bc 	.word	0x200033bc

08008910 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b086      	sub	sp, #24
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d04a      	beq.n	80089b8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008922:	2308      	movs	r3, #8
 8008924:	425b      	negs	r3, r3
 8008926:	697a      	ldr	r2, [r7, #20]
 8008928:	4413      	add	r3, r2
 800892a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008930:	693b      	ldr	r3, [r7, #16]
 8008932:	685a      	ldr	r2, [r3, #4]
 8008934:	4b22      	ldr	r3, [pc, #136]	@ (80089c0 <vPortFree+0xb0>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4013      	ands	r3, r2
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <vPortFree+0x46>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	60fb      	str	r3, [r7, #12]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d00b      	beq.n	8008976 <vPortFree+0x66>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008962:	f383 8811 	msr	BASEPRI, r3
 8008966:	f3bf 8f6f 	isb	sy
 800896a:	f3bf 8f4f 	dsb	sy
 800896e:	60bb      	str	r3, [r7, #8]
}
 8008970:	bf00      	nop
 8008972:	bf00      	nop
 8008974:	e7fd      	b.n	8008972 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008976:	693b      	ldr	r3, [r7, #16]
 8008978:	685a      	ldr	r2, [r3, #4]
 800897a:	4b11      	ldr	r3, [pc, #68]	@ (80089c0 <vPortFree+0xb0>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4013      	ands	r3, r2
 8008980:	2b00      	cmp	r3, #0
 8008982:	d019      	beq.n	80089b8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d115      	bne.n	80089b8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	685a      	ldr	r2, [r3, #4]
 8008990:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <vPortFree+0xb0>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	43db      	mvns	r3, r3
 8008996:	401a      	ands	r2, r3
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800899c:	f7fe fc06 	bl	80071ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	685a      	ldr	r2, [r3, #4]
 80089a4:	4b07      	ldr	r3, [pc, #28]	@ (80089c4 <vPortFree+0xb4>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4413      	add	r3, r2
 80089aa:	4a06      	ldr	r2, [pc, #24]	@ (80089c4 <vPortFree+0xb4>)
 80089ac:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80089ae:	6938      	ldr	r0, [r7, #16]
 80089b0:	f000 f86c 	bl	8008a8c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80089b4:	f7fe fc08 	bl	80071c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80089b8:	bf00      	nop
 80089ba:	3718      	adds	r7, #24
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	200033c0 	.word	0x200033c0
 80089c4:	200033b8 	.word	0x200033b8

080089c8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80089ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089d2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80089d4:	4b27      	ldr	r3, [pc, #156]	@ (8008a74 <prvHeapInit+0xac>)
 80089d6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f003 0307 	and.w	r3, r3, #7
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00c      	beq.n	80089fc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	3307      	adds	r3, #7
 80089e6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 0307 	bic.w	r3, r3, #7
 80089ee:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089f0:	68ba      	ldr	r2, [r7, #8]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	4a1f      	ldr	r2, [pc, #124]	@ (8008a74 <prvHeapInit+0xac>)
 80089f8:	4413      	add	r3, r2
 80089fa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008a00:	4a1d      	ldr	r2, [pc, #116]	@ (8008a78 <prvHeapInit+0xb0>)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008a06:	4b1c      	ldr	r3, [pc, #112]	@ (8008a78 <prvHeapInit+0xb0>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	4413      	add	r3, r2
 8008a12:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008a14:	2208      	movs	r2, #8
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0307 	bic.w	r3, r3, #7
 8008a22:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	4a15      	ldr	r2, [pc, #84]	@ (8008a7c <prvHeapInit+0xb4>)
 8008a28:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008a2a:	4b14      	ldr	r3, [pc, #80]	@ (8008a7c <prvHeapInit+0xb4>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008a32:	4b12      	ldr	r3, [pc, #72]	@ (8008a7c <prvHeapInit+0xb4>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	1ad2      	subs	r2, r2, r3
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a48:	4b0c      	ldr	r3, [pc, #48]	@ (8008a7c <prvHeapInit+0xb4>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	4a0a      	ldr	r2, [pc, #40]	@ (8008a80 <prvHeapInit+0xb8>)
 8008a56:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	4a09      	ldr	r2, [pc, #36]	@ (8008a84 <prvHeapInit+0xbc>)
 8008a5e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a60:	4b09      	ldr	r3, [pc, #36]	@ (8008a88 <prvHeapInit+0xc0>)
 8008a62:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a66:	601a      	str	r2, [r3, #0]
}
 8008a68:	bf00      	nop
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bc80      	pop	{r7}
 8008a70:	4770      	bx	lr
 8008a72:	bf00      	nop
 8008a74:	200013ac 	.word	0x200013ac
 8008a78:	200033ac 	.word	0x200033ac
 8008a7c:	200033b4 	.word	0x200033b4
 8008a80:	200033bc 	.word	0x200033bc
 8008a84:	200033b8 	.word	0x200033b8
 8008a88:	200033c0 	.word	0x200033c0

08008a8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a94:	4b27      	ldr	r3, [pc, #156]	@ (8008b34 <prvInsertBlockIntoFreeList+0xa8>)
 8008a96:	60fb      	str	r3, [r7, #12]
 8008a98:	e002      	b.n	8008aa0 <prvInsertBlockIntoFreeList+0x14>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d8f7      	bhi.n	8008a9a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	68ba      	ldr	r2, [r7, #8]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d108      	bne.n	8008ace <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	685a      	ldr	r2, [r3, #4]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	441a      	add	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d118      	bne.n	8008b14 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	681a      	ldr	r2, [r3, #0]
 8008ae6:	4b14      	ldr	r3, [pc, #80]	@ (8008b38 <prvInsertBlockIntoFreeList+0xac>)
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d00d      	beq.n	8008b0a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685a      	ldr	r2, [r3, #4]
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	685b      	ldr	r3, [r3, #4]
 8008af8:	441a      	add	r2, r3
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	e008      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8008b38 <prvInsertBlockIntoFreeList+0xac>)
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	e003      	b.n	8008b1c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008b1c:	68fa      	ldr	r2, [r7, #12]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d002      	beq.n	8008b2a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008b2a:	bf00      	nop
 8008b2c:	3714      	adds	r7, #20
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bc80      	pop	{r7}
 8008b32:	4770      	bx	lr
 8008b34:	200033ac 	.word	0x200033ac
 8008b38:	200033b4 	.word	0x200033b4

08008b3c <memset>:
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	4402      	add	r2, r0
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d100      	bne.n	8008b46 <memset+0xa>
 8008b44:	4770      	bx	lr
 8008b46:	f803 1b01 	strb.w	r1, [r3], #1
 8008b4a:	e7f9      	b.n	8008b40 <memset+0x4>

08008b4c <__libc_init_array>:
 8008b4c:	b570      	push	{r4, r5, r6, lr}
 8008b4e:	2600      	movs	r6, #0
 8008b50:	4d0c      	ldr	r5, [pc, #48]	@ (8008b84 <__libc_init_array+0x38>)
 8008b52:	4c0d      	ldr	r4, [pc, #52]	@ (8008b88 <__libc_init_array+0x3c>)
 8008b54:	1b64      	subs	r4, r4, r5
 8008b56:	10a4      	asrs	r4, r4, #2
 8008b58:	42a6      	cmp	r6, r4
 8008b5a:	d109      	bne.n	8008b70 <__libc_init_array+0x24>
 8008b5c:	f000 f828 	bl	8008bb0 <_init>
 8008b60:	2600      	movs	r6, #0
 8008b62:	4d0a      	ldr	r5, [pc, #40]	@ (8008b8c <__libc_init_array+0x40>)
 8008b64:	4c0a      	ldr	r4, [pc, #40]	@ (8008b90 <__libc_init_array+0x44>)
 8008b66:	1b64      	subs	r4, r4, r5
 8008b68:	10a4      	asrs	r4, r4, #2
 8008b6a:	42a6      	cmp	r6, r4
 8008b6c:	d105      	bne.n	8008b7a <__libc_init_array+0x2e>
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b74:	4798      	blx	r3
 8008b76:	3601      	adds	r6, #1
 8008b78:	e7ee      	b.n	8008b58 <__libc_init_array+0xc>
 8008b7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b7e:	4798      	blx	r3
 8008b80:	3601      	adds	r6, #1
 8008b82:	e7f2      	b.n	8008b6a <__libc_init_array+0x1e>
 8008b84:	08009054 	.word	0x08009054
 8008b88:	08009054 	.word	0x08009054
 8008b8c:	08009054 	.word	0x08009054
 8008b90:	08009058 	.word	0x08009058

08008b94 <memcpy>:
 8008b94:	440a      	add	r2, r1
 8008b96:	4291      	cmp	r1, r2
 8008b98:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b9c:	d100      	bne.n	8008ba0 <memcpy+0xc>
 8008b9e:	4770      	bx	lr
 8008ba0:	b510      	push	{r4, lr}
 8008ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ba6:	4291      	cmp	r1, r2
 8008ba8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bac:	d1f9      	bne.n	8008ba2 <memcpy+0xe>
 8008bae:	bd10      	pop	{r4, pc}

08008bb0 <_init>:
 8008bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb2:	bf00      	nop
 8008bb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb6:	bc08      	pop	{r3}
 8008bb8:	469e      	mov	lr, r3
 8008bba:	4770      	bx	lr

08008bbc <_fini>:
 8008bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbe:	bf00      	nop
 8008bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc2:	bc08      	pop	{r3}
 8008bc4:	469e      	mov	lr, r3
 8008bc6:	4770      	bx	lr
